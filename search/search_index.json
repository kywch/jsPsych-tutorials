{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the jsPsych in Qualtrics Tutorial Series WARNING!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial won't work. However, you can still download jsPsych v6.3.1 (the last jsPsych 6.x release) and use it for your projects. Hello, I am Kyoung Whan and have used jsPsych within Qualtrics extensively in my research. For example, I developed the Choose-And-Solve Task with jsPsych, ran the task using Qualtrics with math attitude surveys, and published a paper, titled \"Calculated avoidance: Math anxiety predicts math avoidance in effort-based decision-making\" (Choe et al., 2019, Science Advances ) . The purpose of this tutorial series is to provide an easy-to-follow guide to Qualtrics users (e.g., many social and psychological science researchers) on embedding jsPsych-based behavioral experiments into Qualtrics so that they could study interesting individual differences, correlating questionnaires vs. behavioral/cognitive measures. This tutorial assumes that readers are familiar with Qualtrics and have a basic understanding of HTML, CSS, JavaScript, and GitHub. For the beginners, I try to find and link good external resources (like below), so please do not give up and give it a try . If you are looking for Qualtrics tutorials, there are other excellent tutorials available, as well as Qualtrics' official support page. For example, CSULB Qualtrics Guide If you are looking for jsPsych v6.x tutorial, the best place to start is the jsPsych v6.3 Hello World! tutorial . Also check out these resources: The YouTube tutorial from Josh de Leeuw Online Experiments for Language Scientists by Kenny Smith and Alisdair Tullo jsPsych in Qualtrics Tutorial Series If you have suggestions, shoot me an email to choe_DOT_kyoung_AT_gmail_DOT_com . Thanks! Unfortunately, this tutorial series is no longer actively maintained (last update, 11/25/2021), as I moved to the industry. Still, I hope this helps fellow researchers. Part 1. The Basics: Launching an online study and saving the data Making jsPsych files loadable in Qualtrics The famous Hello World! example Reaction Time Task (from the jsPsych tutorial) Saving jsPsych data to a server using PHP Recruiting participants for your study Part 2. Case studies: Embedding existing jsPsych experiments into Qualtrics Flanker Task (from the jsPsych demo) Choose-And-Solve Task (CAST; Choe et al., 2019) Retaliate or Carry-on: Reactive AGgression Experiment (RC-RAGE; Meidenbauer et al., 2021) Stop Signal Task (STOP-IT; Verbruggen et al., 2019) Quick Audio Test (recommeded before any auditory study) Mood Induction (Mayer et al. 1995; Marzillier & Davey 2005)","title":"Introduction"},{"location":"#welcome-to-the-jspsych-in-qualtrics-tutorial-series","text":"WARNING!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial won't work. However, you can still download jsPsych v6.3.1 (the last jsPsych 6.x release) and use it for your projects. Hello, I am Kyoung Whan and have used jsPsych within Qualtrics extensively in my research. For example, I developed the Choose-And-Solve Task with jsPsych, ran the task using Qualtrics with math attitude surveys, and published a paper, titled \"Calculated avoidance: Math anxiety predicts math avoidance in effort-based decision-making\" (Choe et al., 2019, Science Advances ) . The purpose of this tutorial series is to provide an easy-to-follow guide to Qualtrics users (e.g., many social and psychological science researchers) on embedding jsPsych-based behavioral experiments into Qualtrics so that they could study interesting individual differences, correlating questionnaires vs. behavioral/cognitive measures. This tutorial assumes that readers are familiar with Qualtrics and have a basic understanding of HTML, CSS, JavaScript, and GitHub. For the beginners, I try to find and link good external resources (like below), so please do not give up and give it a try . If you are looking for Qualtrics tutorials, there are other excellent tutorials available, as well as Qualtrics' official support page. For example, CSULB Qualtrics Guide If you are looking for jsPsych v6.x tutorial, the best place to start is the jsPsych v6.3 Hello World! tutorial . Also check out these resources: The YouTube tutorial from Josh de Leeuw Online Experiments for Language Scientists by Kenny Smith and Alisdair Tullo","title":"Welcome to the jsPsych in Qualtrics Tutorial Series"},{"location":"audio-test/","text":"Embedding a Quick Audio Test into Qualtrics Before running an auditory task (like mood induction or dual n-back), you should make sure participants can listen to sound. To do so, I made a quick audio test using jsPsych. You can first try the test by clicking HERE . I uploaded the working codes on the Mood Induction repository . You can either directly use these files or fork this repository to customize. This tutorial consists of two parts. (1) I will first explain how you can embed the Audio Test in Qualtrics . (2) I will then explain the experiment code . Embedding the Quick Audio Test into Qualtrics Hosting the Quick Audio Test scripts in GitHub To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Go to the Mood Induction repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. Also make sure that sound files play on your browser. When you are done, you can check the online files with your browser by directly going to the jspsych.js , jspsych.css , jspsych-fullscreen.js , and jspsych-audio-keyboard-with-replay.js . jspsych.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/jspsych.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css . jspsych-fullscreen.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/plugins/jspsych-fullscreen.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/plugins/jspsych-fullscreen.js . jspsych-audio-keyboard-with-replay.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-audio-keyboard-with-replay.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-audio-keyboard-with-replay.js . Sound files are stored in the audiotest folder and should be available online, like https://kywch.github.io/Mood-Induction_jsPsych/audiotest/c.mp3 . Embedding the task to Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole audio-test-qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole audio-test-qualtrics.js (click to see the code) into the editor. ALSO CHECK WHETHER THE URLs ARE VALID. For example, task_github and audio_url . Step 3. Open the Question HTML editor and copy paste the below html code The Change 3 section of the audio-test-demo.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of audio-test-demo.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } #centerbox { width: 80vw; height: 30vh; position: relative; top: 40%; font-size: 20pt; line-height: normal; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below. Step 4. Create Embedded Data elements To store the additional details about this audio test, you need to create the Embedded Data elements named audio_test_rt and audio_test_order in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type audio_test_rt Click Add a New Field and type audio_test_order Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow Step 5. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same Audio Test running in Qualtrics. For example, try this Qualtrics link . Explaining the code For the basics, please read the Hello world tutorial . A working demo in a local browser: audio-test-demo.html Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The changes in audio-test-demo.html (click to see the code) are in the same order as in the Hello world tutorial . You should be able to run the audio test simply by opening audio-test-demo.html in a browser. Let's look at each change. Change 1: Using display_element By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* Change 1: Using `display_element` */ jsPsych.init({ timeline: timeline, display_element: 'display_stage' }) Change 2: Adding display_stage CSS and Div The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. The centerbox is where we put the text prompts. <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } #centerbox { width: 80vw; height: 30vh; position: relative; top: 40%; font-size: 20pt; line-height: normal; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> Change 3: Adding extra scripts for Qualtrics The below scripts are not necessary to run this task, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> Qualtrics transformation: audio-test-qualtrics.js To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change. Change 1: Hiding the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 2: Defining and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. /* Change 2: Defining and load required resources */ // task-related variables var audio_test_rt = []; var audio_test_order = []; // requiredResources must include all the required JS files var task_github = \"https://kywch.github.io/Mood-Induction_jsPsych/\"; // https://<your-github-username>.github.io/<your-experiment-name> var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-fullscreen.js\", task_github + \"jspsych-audio-keyboard-with-replay.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 3: Appending the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 4: Adding resources, scripts, and helper functions /* Change 4: Adding resouces, scripts, and helper functions */ var audio_url = 'https://kywch.github.io/Mood-Induction_jsPsych/audiotest/'; var audio_seed = ['c', 'd', 'g', 'k', 'p', 'q', 't']; // WARNING: YOU SHOULD MAKE SURE THE OUTPUT URLS ARE CORRECT function get_audio_url(audio_url, file_name, file_ext = 'mp3') { return audio_url + file_name + '.' + file_ext; } // generate audiotest trials function generate_audiotest_block(audio_url, audio_seed) { audio_test_order = jsPsych.randomization.shuffle(audio_seed); let block_audiotest = []; let enter_audiotest_page = { type: 'audio-keyboard-with-replay', prompt: \"<div id=centerbox><p>\" + \"The task you are about to do requires listening to sounds. Please adjust your sound setting.<br> \" + \"<p>We will do a simple task to make sure you can hear the sounds. </p>\" + \"<p>In the next pages, press the alphabet key associated with the played sound to proceed. </p> \" + \"<br><p>If you are ready, press the <strong>'n'</strong> key to proceed.</p>\" + \"<p>If the key doesn't work, please click the screen and press again.</p></div>\", choices: ['n'], }; block_audiotest.push(enter_audiotest_page); for (let ii = 0; ii < audio_test_order.length; ii++) { let audiotest_trial = { type: 'audio-keyboard-with-replay', stimulus: get_audio_url(audio_url, audio_test_order[ii]), prompt: \"<div id=centerbox><p>\" + \"Trial \" + (ii + 1) + \" / \" + audio_test_order.length + \" : \" + \"Please press the alphabet key you just heard.</p>\" + \"<br><p>To replay, press the <strong>'r'</strong> key. </p></div>\", choices: [audio_test_order[ii]], on_finish: function (data) { audio_test_rt.push(data.rt) } } block_audiotest.push(audiotest_trial); } return { timeline: block_audiotest }; } Change 5: Wrapping jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). /* Change 5: Wrapping jsPsych.init() in a function */ function initExp() { // push all the procedures, which are defined in stop-it_main.js to the overall timeline var timeline = []; // this array stores the events we want to run in the experiment // use the full screen // also playing sound only works after an interaction with user, like button press timeline.push({ type: 'fullscreen', message: '<p>Audio test will start to play when you press the button below.</p><br>', fullscreen_mode: true }); timeline.push(generate_audiotest_block(audio_url, audio_seed)); timeline.push({ type: 'fullscreen', fullscreen_mode: false }); jsPsych.init({ display_element: 'display_stage', timeline: timeline, // see the Change 6 }); } Change 6: Adding the clean up and continue functions When the jsPsych ends, display_stage and display_stage_background should be removed. This script also saves additional data (test order and RT) to Qualtrics Embedded Data. After saving, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { /* Change 6: Adding the clean up and continue functions.*/ // save the induction-related data to Qualtrics Qualtrics.SurveyEngine.setEmbeddedData(\"audio_test_rt\", audio_test_rt.toString().replace(/,/g, ';')); Qualtrics.SurveyEngine.setEmbeddedData(\"audio_test_order\", audio_test_order.toString().replace(/,/g, ';')); // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }","title":"Embedding Quick Audio Test"},{"location":"audio-test/#embedding-a-quick-audio-test-into-qualtrics","text":"Before running an auditory task (like mood induction or dual n-back), you should make sure participants can listen to sound. To do so, I made a quick audio test using jsPsych. You can first try the test by clicking HERE . I uploaded the working codes on the Mood Induction repository . You can either directly use these files or fork this repository to customize. This tutorial consists of two parts. (1) I will first explain how you can embed the Audio Test in Qualtrics . (2) I will then explain the experiment code .","title":"Embedding a Quick Audio Test into Qualtrics"},{"location":"audio-test/#embedding-the-quick-audio-test-into-qualtrics","text":"","title":"Embedding the Quick Audio Test into Qualtrics"},{"location":"audio-test/#hosting-the-quick-audio-test-scripts-in-github","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Go to the Mood Induction repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. Also make sure that sound files play on your browser. When you are done, you can check the online files with your browser by directly going to the jspsych.js , jspsych.css , jspsych-fullscreen.js , and jspsych-audio-keyboard-with-replay.js . jspsych.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/jspsych.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css . jspsych-fullscreen.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/plugins/jspsych-fullscreen.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/plugins/jspsych-fullscreen.js . jspsych-audio-keyboard-with-replay.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-audio-keyboard-with-replay.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-audio-keyboard-with-replay.js . Sound files are stored in the audiotest folder and should be available online, like https://kywch.github.io/Mood-Induction_jsPsych/audiotest/c.mp3 .","title":"Hosting the Quick Audio Test scripts in GitHub"},{"location":"audio-test/#embedding-the-task-to-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Embedding the task to Qualtrics"},{"location":"audio-test/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"audio-test/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-audio-test-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole audio-test-qualtrics.js (click to see the code) into the editor. ALSO CHECK WHETHER THE URLs ARE VALID. For example, task_github and audio_url .","title":"Step 2. Open the Question JavaScript editor and copy paste the whole audio-test-qualtrics.js"},{"location":"audio-test/#step-3-open-the-question-html-editor-and-copy-paste-the-below-html-code","text":"The Change 3 section of the audio-test-demo.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of audio-test-demo.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } #centerbox { width: 80vw; height: 30vh; position: relative; top: 40%; font-size: 20pt; line-height: normal; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the below html code"},{"location":"audio-test/#step-4-create-embedded-data-elements","text":"To store the additional details about this audio test, you need to create the Embedded Data elements named audio_test_rt and audio_test_order in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type audio_test_rt Click Add a New Field and type audio_test_order Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow","title":"Step 4. Create Embedded Data elements"},{"location":"audio-test/#step-5-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same Audio Test running in Qualtrics. For example, try this Qualtrics link .","title":"Step 5. Publish and test!"},{"location":"audio-test/#explaining-the-code","text":"For the basics, please read the Hello world tutorial .","title":"Explaining the code"},{"location":"audio-test/#a-working-demo-in-a-local-browser-audio-test-demohtml","text":"Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The changes in audio-test-demo.html (click to see the code) are in the same order as in the Hello world tutorial . You should be able to run the audio test simply by opening audio-test-demo.html in a browser. Let's look at each change.","title":"A working demo in a local browser: audio-test-demo.html"},{"location":"audio-test/#change-1-using-display_element","text":"By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* Change 1: Using `display_element` */ jsPsych.init({ timeline: timeline, display_element: 'display_stage' })","title":"Change 1: Using display_element"},{"location":"audio-test/#change-2-adding-display_stage-css-and-div","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. The centerbox is where we put the text prompts. <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } #centerbox { width: 80vw; height: 30vh; position: relative; top: 40%; font-size: 20pt; line-height: normal; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Change 2: Adding display_stage CSS and Div"},{"location":"audio-test/#change-3-adding-extra-scripts-for-qualtrics","text":"The below scripts are not necessary to run this task, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div>","title":"Change 3: Adding extra scripts for Qualtrics"},{"location":"audio-test/#qualtrics-transformation-audio-test-qualtricsjs","text":"To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change.","title":"Qualtrics transformation: audio-test-qualtrics.js"},{"location":"audio-test/#change-1-hiding-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 1: Hiding the Next button"},{"location":"audio-test/#change-2-defining-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. /* Change 2: Defining and load required resources */ // task-related variables var audio_test_rt = []; var audio_test_order = []; // requiredResources must include all the required JS files var task_github = \"https://kywch.github.io/Mood-Induction_jsPsych/\"; // https://<your-github-username>.github.io/<your-experiment-name> var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-fullscreen.js\", task_github + \"jspsych-audio-keyboard-with-replay.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 2: Defining and load required resources"},{"location":"audio-test/#change-3-appending-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 3: Appending the display_stage Div using jQuery"},{"location":"audio-test/#change-4-adding-resources-scripts-and-helper-functions","text":"/* Change 4: Adding resouces, scripts, and helper functions */ var audio_url = 'https://kywch.github.io/Mood-Induction_jsPsych/audiotest/'; var audio_seed = ['c', 'd', 'g', 'k', 'p', 'q', 't']; // WARNING: YOU SHOULD MAKE SURE THE OUTPUT URLS ARE CORRECT function get_audio_url(audio_url, file_name, file_ext = 'mp3') { return audio_url + file_name + '.' + file_ext; } // generate audiotest trials function generate_audiotest_block(audio_url, audio_seed) { audio_test_order = jsPsych.randomization.shuffle(audio_seed); let block_audiotest = []; let enter_audiotest_page = { type: 'audio-keyboard-with-replay', prompt: \"<div id=centerbox><p>\" + \"The task you are about to do requires listening to sounds. Please adjust your sound setting.<br> \" + \"<p>We will do a simple task to make sure you can hear the sounds. </p>\" + \"<p>In the next pages, press the alphabet key associated with the played sound to proceed. </p> \" + \"<br><p>If you are ready, press the <strong>'n'</strong> key to proceed.</p>\" + \"<p>If the key doesn't work, please click the screen and press again.</p></div>\", choices: ['n'], }; block_audiotest.push(enter_audiotest_page); for (let ii = 0; ii < audio_test_order.length; ii++) { let audiotest_trial = { type: 'audio-keyboard-with-replay', stimulus: get_audio_url(audio_url, audio_test_order[ii]), prompt: \"<div id=centerbox><p>\" + \"Trial \" + (ii + 1) + \" / \" + audio_test_order.length + \" : \" + \"Please press the alphabet key you just heard.</p>\" + \"<br><p>To replay, press the <strong>'r'</strong> key. </p></div>\", choices: [audio_test_order[ii]], on_finish: function (data) { audio_test_rt.push(data.rt) } } block_audiotest.push(audiotest_trial); } return { timeline: block_audiotest }; }","title":"Change 4: Adding resources, scripts, and helper functions"},{"location":"audio-test/#change-5-wrapping-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). /* Change 5: Wrapping jsPsych.init() in a function */ function initExp() { // push all the procedures, which are defined in stop-it_main.js to the overall timeline var timeline = []; // this array stores the events we want to run in the experiment // use the full screen // also playing sound only works after an interaction with user, like button press timeline.push({ type: 'fullscreen', message: '<p>Audio test will start to play when you press the button below.</p><br>', fullscreen_mode: true }); timeline.push(generate_audiotest_block(audio_url, audio_seed)); timeline.push({ type: 'fullscreen', fullscreen_mode: false }); jsPsych.init({ display_element: 'display_stage', timeline: timeline, // see the Change 6 }); }","title":"Change 5: Wrapping jsPsych.init() in a function"},{"location":"audio-test/#change-6-adding-the-clean-up-and-continue-functions","text":"When the jsPsych ends, display_stage and display_stage_background should be removed. This script also saves additional data (test order and RT) to Qualtrics Embedded Data. After saving, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { /* Change 6: Adding the clean up and continue functions.*/ // save the induction-related data to Qualtrics Qualtrics.SurveyEngine.setEmbeddedData(\"audio_test_rt\", audio_test_rt.toString().replace(/,/g, ';')); Qualtrics.SurveyEngine.setEmbeddedData(\"audio_test_order\", audio_test_order.toString().replace(/,/g, ';')); // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }","title":"Change 6: Adding the clean up and continue functions"},{"location":"choose-and-solve/","text":"Embedding Choose-And-Solve Task (CAST) into Qualtrics The Choose-And-Solve Task (Choe et al., 2019) is an effort-based decision-making task to study math anxiety and math avoidance behavior. You can first try the task by clicking HERE . The CAST code is freely available at the CAST GitHub repository . You can either directly use these files for your study or fork this repository to customize. This tutorial consists of two parts. (1) I will first explain how you can embed CAST in Qualtrics . (2) I will then briefly explain the experiment code . Embedding CAST into Qualtrics Hosting the CAST scripts in GitHub To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Necessary files are already available online and used in the live demo . (OPTIONAL) However, if you want to create your own version, you can do so by Go to the CAST GitHub repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. Embedding the task to Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole choose-and-solve_qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole choose-and-solve_qualtrics.js (click to see the code) into the editor. ALSO CHECK WHETHER THE URL, task_github , IS VALID. Step 3. Open the Question HTML editor and copy paste the below html code To put the HTML code that contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong, open the HTML editor by clicking the HTML View button. Then, copy paste the below HTML code to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/CAST_jsPsych/lib_for_qualtrics/cast.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us (YOUR EMAIL). <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <style> .display_stage_background { width: 100vw; background-color: white; z-index: -1; } .display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below. Step 4. Create Embedded Data elements To store the session-level CAST data, you need to create the below 29 Embedded Data elements in your survey. points, bonus easy_math_cnt, easy_acc_math, easy_RT_math easy_word_cnt, easy_acc_word, easy_RT_word hard_math_cnt, hard_level_math, hard_acc_math, hard_RT_math hard_word_cnt, hard_level_word, hard_acc_word, hard_RT_word hcp_h2e2_math, hcp_h3e2_math, hcp_h4e2_math, hcp_h5e2_math, hcp_h6e2_math, hcp_h456e2_math hcp_h2e2_word, hcp_h3e2_word, hcp_h4e2_word, hcp_h5e2_word, hcp_h6e2_word, hcp_h456e2_word cnt_per_cond To do so, follow this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type points Click Add a New Field and type bonus Repeteadly add the remaining 27 elements (until hcp_h456e2_word and cnt_per_cond ). Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow Step 5. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same CAST running in Qualtrics. Explaining the code For the basics, please read the Hello world tutorial . Qualtrics js code: choose-and-solve_qualtrics.js To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change. Change 1: Hiding the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 2: Defining and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. /* Change 2: Defining and loading required resources */ // `requiredResources` must include all the required JS files var task_github = \"https://kywch.github.io/CAST_jsPsych/lib_for_qualtrics/\"; // https://<your-github-username>.github.io/<your-experiment-name> var requiredResources = [ task_github + \"jquery.min.js\", task_github + \"jspsych.js\", task_github + \"jspsych-text.js\", task_github + \"jspsych-poldrack-instructions.js\", task_github + \"jspsych-single-stim-rev.js\", task_github + \"poldrack_utils.js\", task_github + \"probset.js\", task_github + \"practice_problems.js\", task_github + \"choose-and-solve_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 3: Wrapping jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). /* Change 3: Wrapping jsPsych.init() in a function */ function initExp() { // instruction image location var task_instruct_page1 = '<div class = centerbox><p class = block-text>Welcome to the choose-and-solve task!</p></div>'; var task_instruct_page2 = '<div class = centerbox><p class = block-text>This task consists of four parts.</p> ' + '<p class = block-text>Your performance-based cash bonus will be determined in the last block of 140 trials.</p>' + '<p class = block-text>1. Word practice (12 problems)</p>' + '<p class = block-text>2. Math practice (12 problems)</p>' + '<p class = block-text>3. Choose-and-solve practice (28 trials)</p>' + '<p class = block-text>4. Five blocks of choose-and-solve trials (140 trials)</p></div>' var task_instruct_page = { type: 'poldrack-instructions', data: { exp_stage: 'task_instruction', participant: sbj_id, }, pages: [task_instruct_page1, task_instruct_page2], allow_keys: false, show_clickable_nav: true, timing_post_trial: 1000 }; // NOTE that the functions used below are defined in `choose-and-solve_main.js` for readability var maadm_experiment = []; maadm_experiment.push(task_instruct_page); maadm_experiment.push({ timeline: sequence_word_practice }); maadm_experiment.push({ timeline: sequence_math_practice }); maadm_experiment.push({ timeline: sequence_practice_choice }); maadm_experiment.push(enter_mainexp_page); for (var ii = 0; ii < num_block; ii++) { maadm_experiment.push({ timeline: generate_main_block(ii) }); } jsPsych.init({ display_element: \"getDisplayElement\", timeline: maadm_experiment, fullscreen: true, }); Changes 4-5: Summarizing and saving the session-level data This script aggregates and saves the session-level data to Qualtrics Embedded Data to simplify the overall analysis. When the jsPsych ends, display_stage and display_stage_background divs are removed. After saving, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { /* Change 4: Summarize the data */ var cnt_trial_type = {}; // for math trials cnt_trial_type[\"me0\"] = 0; // # of hard math chosen / solved when 2 vs 2 cnt_trial_type[\"me2\"] = 0; // no choice trials, easy reward 2 cnt_trial_type[\"mh0\"] = 0; // # of hard math chosen / solved when 2 vs 2 cnt_trial_type[\"mh1\"] = 0; // when 3 vs 2 cnt_trial_type[\"mh2\"] = 0; // when 4 vs 2 cnt_trial_type[\"mh3\"] = 0; // when 5 vs 2 cnt_trial_type[\"mh4\"] = 0; // when 6 vs 2 cnt_trial_type[\"mh5\"] = 0; // no choice trials, hard reward 5 // for word trials cnt_trial_type[\"we0\"] = 0; // # of hard word chosen / solved when 2 vs 2 cnt_trial_type[\"we2\"] = 0; // no choice trials, easy reward 2 cnt_trial_type[\"wh0\"] = 0; // # of hard word chosen / solved when 2 vs 2 cnt_trial_type[\"wh1\"] = 0; // when 3 vs 2 cnt_trial_type[\"wh2\"] = 0; // when 4 vs 2 cnt_trial_type[\"wh3\"] = 0; // when 5 vs 2 cnt_trial_type[\"wh4\"] = 0; // when 6 vs 2 cnt_trial_type[\"wh5\"] = 0; // no choice trials, hard reward 5 // count the me, mh, we, wh trials cnt_trial_type[\"me_cnt\"] = 0; cnt_trial_type[\"mh_cnt\"] = 0; cnt_trial_type[\"we_cnt\"] = 0; cnt_trial_type[\"wh_cnt\"] = 0; // count correct trials cnt_trial_type[\"me_corr\"] = 0; // # of correct for easy math cnt_trial_type[\"mh_corr\"] = 0; // for hard math cnt_trial_type[\"we_corr\"] = 0; // for easy word cnt_trial_type[\"wh_corr\"] = 0; // for hard word // adding problem-solving RTs to get the average cnt_trial_type[\"me_rt\"] = 0; cnt_trial_type[\"mh_rt\"] = 0; cnt_trial_type[\"we_rt\"] = 0; cnt_trial_type[\"wh_rt\"] = 0; for (var ii = 0; ii < choice_main.length; ii++) { // counting the # of trial types to get the choice probabilities // all the problem types need to be defined above. cnt_trial_type[choice_main[ii]]++; // add up the # of corrects and RT let curr_type = choice_main[ii].substring(0, 2); cnt_trial_type[curr_type + \"_cnt\"]++; cnt_trial_type[curr_type + \"_corr\"] += correct_main[ii]; cnt_trial_type[curr_type + \"_rt\"] += solvetime_main[ii]; } var mwlevel = {}; // based on history_hard mwlevel[\"m\"] = 0; mwlevel[\"w\"] = 0; for (var ii = 0; ii < choice_level.length; ii++) { mwlevel[choice_level[ii][0]] += Number(choice_level[ii][1]); } var rtsum = 0; for (var ii = 0; ii < solvetime_main.length; ii++) { // add all the problem-solving RT to see how much time P spent rtsum += solvetime_main[ii]; } /* Change 5: Saving the trial-level data and finishing up */ // Overall Qualtrics.SurveyEngine.setEmbeddedData(\"points\", point_main); Qualtrics.SurveyEngine.setEmbeddedData(\"bonus\", point_main); // 1 cent/point // easy_math_cnt, easy_acc_math, easy_RT_math Qualtrics.SurveyEngine.setEmbeddedData(\"easy_math_cnt\", cnt_trial_type[\"me_cnt\"] ); Qualtrics.SurveyEngine.setEmbeddedData(\"easy_acc_math\", (cnt_trial_type[\"me_corr\"]/cnt_trial_type[\"me_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"easy_RT_math\", Math.round(cnt_trial_type[\"me_rt\"]/cnt_trial_type[\"me_cnt\"]) ); // easy_word_cnt, easy_acc_word, easy_RT_word Qualtrics.SurveyEngine.setEmbeddedData(\"easy_word_cnt\", cnt_trial_type[\"we_cnt\"] ); Qualtrics.SurveyEngine.setEmbeddedData(\"easy_acc_word\", (cnt_trial_type[\"we_corr\"]/cnt_trial_type[\"we_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"easy_RT_word\", Math.round(cnt_trial_type[\"we_rt\"]/cnt_trial_type[\"we_cnt\"]) ); // hard_math_cnt, hard_level_math, hard_acc_math, hard_RT_math Qualtrics.SurveyEngine.setEmbeddedData(\"hard_math_cnt\", cnt_trial_type[\"mh_cnt\"] ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_level_math\", (mwlevel[\"m\"]/cnt_trial_type[\"mh_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_acc_math\", (cnt_trial_type[\"mh_corr\"]/cnt_trial_type[\"mh_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_RT_math\", Math.round(cnt_trial_type[\"mh_rt\"]/cnt_trial_type[\"mh_cnt\"]) ); // hard_word_cnt, hard_level_word, hard_acc_word, hard_RT_word Qualtrics.SurveyEngine.setEmbeddedData(\"hard_word_cnt\", cnt_trial_type[\"wh_cnt\"] ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_level_word\", (mwlevel[\"w\"]/cnt_trial_type[\"wh_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_acc_word\", (cnt_trial_type[\"wh_corr\"]/cnt_trial_type[\"wh_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_RT_word\", Math.round(cnt_trial_type[\"wh_rt\"]/cnt_trial_type[\"wh_cnt\"]) ); // hard choice probabilities of math trials : hcp_h2e2_math, hcp_h3e2_math, hcp_h4e2_math, hcp_h5e2_math, hcp_h6e2_math, hcp_h456e2_math let numPerCond = 2*num_block; Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h2e2_math\", (cnt_trial_type[\"mh0\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h3e2_math\", (cnt_trial_type[\"mh1\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h4e2_math\", (cnt_trial_type[\"mh2\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h5e2_math\", (cnt_trial_type[\"mh3\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h6e2_math\", (cnt_trial_type[\"mh4\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h456e2_math\", ((cnt_trial_type[\"mh2\"]+cnt_trial_type[\"mh3\"]+cnt_trial_type[\"mh4\"])/(3*numPerCond)).toFixed(4) ); // hard choice probabilities of word trials : hcp_h2e2_word, hcp_h3e2_word, hcp_h4e2_word, hcp_h5e2_word, hcp_h6e2_word, hcp_h456e2_word Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h2e2_word\", (cnt_trial_type[\"wh0\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h3e2_word\", (cnt_trial_type[\"wh1\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h4e2_word\", (cnt_trial_type[\"wh2\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h5e2_word\", (cnt_trial_type[\"wh3\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h6e2_word\", (cnt_trial_type[\"wh4\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h456e2_word\", ((cnt_trial_type[\"wh2\"]+cnt_trial_type[\"wh3\"]+cnt_trial_type[\"wh4\"])/(3*numPerCond)).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"cnt_per_cond\", numPerCond ); // finishing up function sleep(time) { return new Promise((resolve) => setTimeout(resolve, time)); } sleep(500).then(() => { // clear the stage jQuery('.display_stage').remove(); jQuery('.display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }); }","title":"Embedding Choose-And-Solve Task"},{"location":"choose-and-solve/#embedding-choose-and-solve-task-cast-into-qualtrics","text":"The Choose-And-Solve Task (Choe et al., 2019) is an effort-based decision-making task to study math anxiety and math avoidance behavior. You can first try the task by clicking HERE . The CAST code is freely available at the CAST GitHub repository . You can either directly use these files for your study or fork this repository to customize. This tutorial consists of two parts. (1) I will first explain how you can embed CAST in Qualtrics . (2) I will then briefly explain the experiment code .","title":"Embedding Choose-And-Solve Task (CAST) into Qualtrics"},{"location":"choose-and-solve/#embedding-cast-into-qualtrics","text":"","title":"Embedding CAST into Qualtrics"},{"location":"choose-and-solve/#hosting-the-cast-scripts-in-github","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Necessary files are already available online and used in the live demo . (OPTIONAL) However, if you want to create your own version, you can do so by Go to the CAST GitHub repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online.","title":"Hosting the CAST scripts in GitHub"},{"location":"choose-and-solve/#embedding-the-task-to-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Embedding the task to Qualtrics"},{"location":"choose-and-solve/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"choose-and-solve/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-choose-and-solve_qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole choose-and-solve_qualtrics.js (click to see the code) into the editor. ALSO CHECK WHETHER THE URL, task_github , IS VALID.","title":"Step 2. Open the Question JavaScript editor and copy paste the whole choose-and-solve_qualtrics.js"},{"location":"choose-and-solve/#step-3-open-the-question-html-editor-and-copy-paste-the-below-html-code","text":"To put the HTML code that contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong, open the HTML editor by clicking the HTML View button. Then, copy paste the below HTML code to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/CAST_jsPsych/lib_for_qualtrics/cast.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us (YOUR EMAIL). <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <style> .display_stage_background { width: 100vw; background-color: white; z-index: -1; } .display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the below html code"},{"location":"choose-and-solve/#step-4-create-embedded-data-elements","text":"To store the session-level CAST data, you need to create the below 29 Embedded Data elements in your survey. points, bonus easy_math_cnt, easy_acc_math, easy_RT_math easy_word_cnt, easy_acc_word, easy_RT_word hard_math_cnt, hard_level_math, hard_acc_math, hard_RT_math hard_word_cnt, hard_level_word, hard_acc_word, hard_RT_word hcp_h2e2_math, hcp_h3e2_math, hcp_h4e2_math, hcp_h5e2_math, hcp_h6e2_math, hcp_h456e2_math hcp_h2e2_word, hcp_h3e2_word, hcp_h4e2_word, hcp_h5e2_word, hcp_h6e2_word, hcp_h456e2_word cnt_per_cond To do so, follow this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type points Click Add a New Field and type bonus Repeteadly add the remaining 27 elements (until hcp_h456e2_word and cnt_per_cond ). Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow","title":"Step 4. Create Embedded Data elements"},{"location":"choose-and-solve/#step-5-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same CAST running in Qualtrics.","title":"Step 5. Publish and test!"},{"location":"choose-and-solve/#explaining-the-code","text":"For the basics, please read the Hello world tutorial .","title":"Explaining the code"},{"location":"choose-and-solve/#qualtrics-js-code-choose-and-solve_qualtricsjs","text":"To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change.","title":"Qualtrics js code: choose-and-solve_qualtrics.js"},{"location":"choose-and-solve/#change-1-hiding-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 1: Hiding the Next button"},{"location":"choose-and-solve/#change-2-defining-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. /* Change 2: Defining and loading required resources */ // `requiredResources` must include all the required JS files var task_github = \"https://kywch.github.io/CAST_jsPsych/lib_for_qualtrics/\"; // https://<your-github-username>.github.io/<your-experiment-name> var requiredResources = [ task_github + \"jquery.min.js\", task_github + \"jspsych.js\", task_github + \"jspsych-text.js\", task_github + \"jspsych-poldrack-instructions.js\", task_github + \"jspsych-single-stim-rev.js\", task_github + \"poldrack_utils.js\", task_github + \"probset.js\", task_github + \"practice_problems.js\", task_github + \"choose-and-solve_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 2: Defining and load required resources"},{"location":"choose-and-solve/#change-3-wrapping-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). /* Change 3: Wrapping jsPsych.init() in a function */ function initExp() { // instruction image location var task_instruct_page1 = '<div class = centerbox><p class = block-text>Welcome to the choose-and-solve task!</p></div>'; var task_instruct_page2 = '<div class = centerbox><p class = block-text>This task consists of four parts.</p> ' + '<p class = block-text>Your performance-based cash bonus will be determined in the last block of 140 trials.</p>' + '<p class = block-text>1. Word practice (12 problems)</p>' + '<p class = block-text>2. Math practice (12 problems)</p>' + '<p class = block-text>3. Choose-and-solve practice (28 trials)</p>' + '<p class = block-text>4. Five blocks of choose-and-solve trials (140 trials)</p></div>' var task_instruct_page = { type: 'poldrack-instructions', data: { exp_stage: 'task_instruction', participant: sbj_id, }, pages: [task_instruct_page1, task_instruct_page2], allow_keys: false, show_clickable_nav: true, timing_post_trial: 1000 }; // NOTE that the functions used below are defined in `choose-and-solve_main.js` for readability var maadm_experiment = []; maadm_experiment.push(task_instruct_page); maadm_experiment.push({ timeline: sequence_word_practice }); maadm_experiment.push({ timeline: sequence_math_practice }); maadm_experiment.push({ timeline: sequence_practice_choice }); maadm_experiment.push(enter_mainexp_page); for (var ii = 0; ii < num_block; ii++) { maadm_experiment.push({ timeline: generate_main_block(ii) }); } jsPsych.init({ display_element: \"getDisplayElement\", timeline: maadm_experiment, fullscreen: true, });","title":"Change 3: Wrapping jsPsych.init() in a function"},{"location":"choose-and-solve/#changes-4-5-summarizing-and-saving-the-session-level-data","text":"This script aggregates and saves the session-level data to Qualtrics Embedded Data to simplify the overall analysis. When the jsPsych ends, display_stage and display_stage_background divs are removed. After saving, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { /* Change 4: Summarize the data */ var cnt_trial_type = {}; // for math trials cnt_trial_type[\"me0\"] = 0; // # of hard math chosen / solved when 2 vs 2 cnt_trial_type[\"me2\"] = 0; // no choice trials, easy reward 2 cnt_trial_type[\"mh0\"] = 0; // # of hard math chosen / solved when 2 vs 2 cnt_trial_type[\"mh1\"] = 0; // when 3 vs 2 cnt_trial_type[\"mh2\"] = 0; // when 4 vs 2 cnt_trial_type[\"mh3\"] = 0; // when 5 vs 2 cnt_trial_type[\"mh4\"] = 0; // when 6 vs 2 cnt_trial_type[\"mh5\"] = 0; // no choice trials, hard reward 5 // for word trials cnt_trial_type[\"we0\"] = 0; // # of hard word chosen / solved when 2 vs 2 cnt_trial_type[\"we2\"] = 0; // no choice trials, easy reward 2 cnt_trial_type[\"wh0\"] = 0; // # of hard word chosen / solved when 2 vs 2 cnt_trial_type[\"wh1\"] = 0; // when 3 vs 2 cnt_trial_type[\"wh2\"] = 0; // when 4 vs 2 cnt_trial_type[\"wh3\"] = 0; // when 5 vs 2 cnt_trial_type[\"wh4\"] = 0; // when 6 vs 2 cnt_trial_type[\"wh5\"] = 0; // no choice trials, hard reward 5 // count the me, mh, we, wh trials cnt_trial_type[\"me_cnt\"] = 0; cnt_trial_type[\"mh_cnt\"] = 0; cnt_trial_type[\"we_cnt\"] = 0; cnt_trial_type[\"wh_cnt\"] = 0; // count correct trials cnt_trial_type[\"me_corr\"] = 0; // # of correct for easy math cnt_trial_type[\"mh_corr\"] = 0; // for hard math cnt_trial_type[\"we_corr\"] = 0; // for easy word cnt_trial_type[\"wh_corr\"] = 0; // for hard word // adding problem-solving RTs to get the average cnt_trial_type[\"me_rt\"] = 0; cnt_trial_type[\"mh_rt\"] = 0; cnt_trial_type[\"we_rt\"] = 0; cnt_trial_type[\"wh_rt\"] = 0; for (var ii = 0; ii < choice_main.length; ii++) { // counting the # of trial types to get the choice probabilities // all the problem types need to be defined above. cnt_trial_type[choice_main[ii]]++; // add up the # of corrects and RT let curr_type = choice_main[ii].substring(0, 2); cnt_trial_type[curr_type + \"_cnt\"]++; cnt_trial_type[curr_type + \"_corr\"] += correct_main[ii]; cnt_trial_type[curr_type + \"_rt\"] += solvetime_main[ii]; } var mwlevel = {}; // based on history_hard mwlevel[\"m\"] = 0; mwlevel[\"w\"] = 0; for (var ii = 0; ii < choice_level.length; ii++) { mwlevel[choice_level[ii][0]] += Number(choice_level[ii][1]); } var rtsum = 0; for (var ii = 0; ii < solvetime_main.length; ii++) { // add all the problem-solving RT to see how much time P spent rtsum += solvetime_main[ii]; } /* Change 5: Saving the trial-level data and finishing up */ // Overall Qualtrics.SurveyEngine.setEmbeddedData(\"points\", point_main); Qualtrics.SurveyEngine.setEmbeddedData(\"bonus\", point_main); // 1 cent/point // easy_math_cnt, easy_acc_math, easy_RT_math Qualtrics.SurveyEngine.setEmbeddedData(\"easy_math_cnt\", cnt_trial_type[\"me_cnt\"] ); Qualtrics.SurveyEngine.setEmbeddedData(\"easy_acc_math\", (cnt_trial_type[\"me_corr\"]/cnt_trial_type[\"me_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"easy_RT_math\", Math.round(cnt_trial_type[\"me_rt\"]/cnt_trial_type[\"me_cnt\"]) ); // easy_word_cnt, easy_acc_word, easy_RT_word Qualtrics.SurveyEngine.setEmbeddedData(\"easy_word_cnt\", cnt_trial_type[\"we_cnt\"] ); Qualtrics.SurveyEngine.setEmbeddedData(\"easy_acc_word\", (cnt_trial_type[\"we_corr\"]/cnt_trial_type[\"we_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"easy_RT_word\", Math.round(cnt_trial_type[\"we_rt\"]/cnt_trial_type[\"we_cnt\"]) ); // hard_math_cnt, hard_level_math, hard_acc_math, hard_RT_math Qualtrics.SurveyEngine.setEmbeddedData(\"hard_math_cnt\", cnt_trial_type[\"mh_cnt\"] ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_level_math\", (mwlevel[\"m\"]/cnt_trial_type[\"mh_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_acc_math\", (cnt_trial_type[\"mh_corr\"]/cnt_trial_type[\"mh_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_RT_math\", Math.round(cnt_trial_type[\"mh_rt\"]/cnt_trial_type[\"mh_cnt\"]) ); // hard_word_cnt, hard_level_word, hard_acc_word, hard_RT_word Qualtrics.SurveyEngine.setEmbeddedData(\"hard_word_cnt\", cnt_trial_type[\"wh_cnt\"] ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_level_word\", (mwlevel[\"w\"]/cnt_trial_type[\"wh_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_acc_word\", (cnt_trial_type[\"wh_corr\"]/cnt_trial_type[\"wh_cnt\"]).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hard_RT_word\", Math.round(cnt_trial_type[\"wh_rt\"]/cnt_trial_type[\"wh_cnt\"]) ); // hard choice probabilities of math trials : hcp_h2e2_math, hcp_h3e2_math, hcp_h4e2_math, hcp_h5e2_math, hcp_h6e2_math, hcp_h456e2_math let numPerCond = 2*num_block; Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h2e2_math\", (cnt_trial_type[\"mh0\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h3e2_math\", (cnt_trial_type[\"mh1\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h4e2_math\", (cnt_trial_type[\"mh2\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h5e2_math\", (cnt_trial_type[\"mh3\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h6e2_math\", (cnt_trial_type[\"mh4\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h456e2_math\", ((cnt_trial_type[\"mh2\"]+cnt_trial_type[\"mh3\"]+cnt_trial_type[\"mh4\"])/(3*numPerCond)).toFixed(4) ); // hard choice probabilities of word trials : hcp_h2e2_word, hcp_h3e2_word, hcp_h4e2_word, hcp_h5e2_word, hcp_h6e2_word, hcp_h456e2_word Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h2e2_word\", (cnt_trial_type[\"wh0\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h3e2_word\", (cnt_trial_type[\"wh1\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h4e2_word\", (cnt_trial_type[\"wh2\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h5e2_word\", (cnt_trial_type[\"wh3\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h6e2_word\", (cnt_trial_type[\"wh4\"]/numPerCond).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"hcp_h456e2_word\", ((cnt_trial_type[\"wh2\"]+cnt_trial_type[\"wh3\"]+cnt_trial_type[\"wh4\"])/(3*numPerCond)).toFixed(4) ); Qualtrics.SurveyEngine.setEmbeddedData(\"cnt_per_cond\", numPerCond ); // finishing up function sleep(time) { return new Promise((resolve) => setTimeout(resolve, time)); } sleep(500).then(() => { // clear the stage jQuery('.display_stage').remove(); jQuery('.display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }); }","title":"Changes 4-5: Summarizing and saving the session-level data"},{"location":"dichotic-listening/","text":"Dichotic Listening Tutorial This tutorial covers creating a dichotic listening task. It's aimed at new users, but contains some advanced features that might be of interest to experienced users too. Topics covered include: Creating a simple timeline Using audio files, including how to preload and common problems with audio. Using timeline variables to construct a series of trials Processing text response data to record whether the participant responded in the expected way. Video Link Watch the tutorial on YouTube Experiment link Try the completed experiment","title":"Dichotic Listening Tutorial"},{"location":"dichotic-listening/#dichotic-listening-tutorial","text":"This tutorial covers creating a dichotic listening task. It's aimed at new users, but contains some advanced features that might be of interest to experienced users too. Topics covered include: Creating a simple timeline Using audio files, including how to preload and common problems with audio. Using timeline variables to construct a series of trials Processing text response data to record whether the participant responded in the expected way.","title":"Dichotic Listening Tutorial"},{"location":"dichotic-listening/#video-link","text":"Watch the tutorial on YouTube","title":"Video Link"},{"location":"dichotic-listening/#experiment-link","text":"Try the completed experiment","title":"Experiment link"},{"location":"flanker/","text":"Embedding the jsPsych Flanker Task into Qualtrics Please NOTE!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial may not work with jsPsych v7.x and above. So, I instead use the 6.1.0 version below, which I forked previously . Or, you can get jsPsych v6.3.1 (the last jsPsych 6.x release) from here . Here, I used v6.1.0 , which is not much different from v6.3.1 ** Let's start from the demo-flanker.html in the jsPsych repository and embed it to qualtrics. The current demo file was revised to incorporate jsPsych v7, so it's different from what I used to create this tutorial. For details of demo-flanker.html in jsPsych v6.x, please read the separate tutorial in this GitHub repository . You can first try the task by clicking HERE . The start: demo-flanker-task.html The experiment code, demo-flanker.html is included in the flanker folder in this tutorial repository . Let's make the code work in a separate folder like the hello-world example . To do so, you need to change the url of jsPsych scripts, stylesheet, and stimuli of the experiment code. In this tutorial, we will change those twice to make the flanker task (1) run on a new folder and (2) use the GitHub-hosted resources. First, let's make it run locally. To do so, The jsPsych library, plugins, and stylesheet come from the local folder. As you can see, the demo-flanker.html in this repository looks at the local jspsych-6.1.0 folder for these files. <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\"></script> <link rel=\"stylesheet\" href=\"jspsych-6.1.0/css/jspsych.css\"></link> The experiment also needs stimuli images. So, you need to create a folder called img in the experiment folder and copy con1.png , con2.png , inc1.png , and inc2.png into the img folder. Your folder should look like this (and imagine the html file has the name demo-flanker.html ). Using files in public GitHub repositories To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. You can make your files online using GitHub Pages, as explained in the Hosting jsPsych or the Hosting RT Task . But you can do so WITHOUT setting up your own GitHub Pages. If you see a GitHub file that you want to embed in your experiment, you can use jSDelivr to fetch the file like https://cdn.jsdelivr.net/gh/<github-username>/<repository-name>/<file-name> . WARNING: If you are developing your experiment and making frequent changes, jsDelivr is NOT your best option because it takes up to 24 hours to serve the modified files. Read How to use jsDelivr to learn more about jsDelivr and Content Delivery Network (CDN) in general. Using this tutorial's GitHub files for the flanker task This jsPsych-in-Qualtrics repository has the files necessary to run the flanker task. These files can be embedded via jSDelivr (github-username: kywch , repository-name: jsPsych-in-Qualtrics , experiment-folder: flanker ). You need eight files to run the flanker experiment. jspsych.css : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/css/jspsych.css jspsych.js : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/jspsych.js jspsych-html-keyboard-response.js : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js jspsych-image-keyboard-response.js : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js con1.png : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/img/con1.png con2.png : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/img/con2.png inc1.png : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/img/inc1.png inc2.png : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/img/inc2.png First transformation: demo-flanker-transformed.html and flanker_main.js I prefer to separate out the experiment-related code from the operation-related code, following the Experiment Factory style. If you haven't, please visit the Experiment Factory library , which contain a ton of experiments with running demos and their code. In the demo-flanker.html , constructing the timeline can be considered to be experiment-related, and the remaining parts that also appear in the Hello-World example , such as loading jspsych.js and jsPsych.init() , can be considered to be operation-related. Here, I am separating the experiment-related code and the operation-related code and putting the code into flanker_main.js and demo-flanker-transformed.html , respectively, by following steps: Step 1. Copy demo-flanker.html to demo-flanker-transformed.html Step 2. Create a new file flanker_main.js And open flanker_main.js in a new editor window. Step 3. Cut and paste the experiment-related code Open demo-flanker-transformed.html . You should have both flanker_main.js and demo-flanker-transformed.html opened. Select the code from the /* experiment parameters */ line to the timeline.push(debrief_block); line, cut the selection , and paste it to flanker_main.js . REPEAT . The code is being cut-and-pasted (NOT copy-pasted). /* experiment parameters */ var reps_per_trial_type = 4; /*set up welcome block*/ var welcome = { type: \"html-keyboard-response\", stimulus: \"Welcome to the experiment. Press any key to begin.\" }; /*set up instructions block*/ var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this task, you will see five arrows on the screen, like the example below.</p>\" + \"<img src='img/inc1.png'></img>\" + \"<p>Press the left arrow key if the middle arrow is pointing left. (<)</p>\" + \"<p>Press the right arrow key if the middle arrow is pointing right. (>)</p>\" + \"<p>Press any key to begin.</p>\", post_trial_gap: 1000 }; /*defining stimuli*/ var test_stimuli = [ { stimulus: \"img/con1.png\", data: { stim_type: 'congruent', direction: 'left'} }, { stimulus: \"img/con2.png\", data: { stim_type: 'congruent', direction: 'right'} }, { stimulus: \"img/inc1.png\", data: { stim_type: 'incongruent', direction: 'right'} }, { stimulus: \"img/inc2.png\", data: { stim_type: 'incongruent', direction: 'left'} } ]; /* defining test timeline */ var test = { timeline: [{ type: 'image-keyboard-response', choices: [37, 39], trial_duration: 1500, stimulus: jsPsych.timelineVariable('stimulus'), data: jsPsych.timelineVariable('data'), on_finish: function (data) { var correct = false; if (data.direction == 'left' && data.key_press == 37 && data.rt > -1) { correct = true; } else if (data.direction == 'right' && data.key_press == 39 && data.rt > -1) { correct = true; } data.correct = correct; }, post_trial_gap: function () { return Math.floor(Math.random() * 1500) + 500; } }], timeline_variables: test_stimuli, sample: { type: 'fixed-repetitions', size: reps_per_trial_type } }; /*defining debriefing block*/ var debrief = { type: \"html-keyboard-response\", stimulus: function () { var total_trials = jsPsych.data.get().filter({ trial_type: 'image-keyboard-response' }).count(); var accuracy = Math.round(jsPsych.data.get().filter({ correct: true }).count() / total_trials * 100); var congruent_rt = Math.round(jsPsych.data.get().filter({ correct: true, stim_type: 'congruent' }).select('rt').mean()); var incongruent_rt = Math.round(jsPsych.data.get().filter({ correct: true, stim_type: 'incongruent' }).select('rt').mean()); return \"<p>You responded correctly on <strong>\" + accuracy + \"%</strong> of the trials.</p> \" + \"<p>Your average response time for congruent trials was <strong>\" + congruent_rt + \"ms</strong>.</p>\" + \"<p>Your average response time for incongruent trials was <strong>\" + incongruent_rt + \"ms</strong>.</p>\" + \"<p>Press any key to complete the experiment. Thank you!</p>\"; } }; /*set up experiment structure*/ var timeline = []; timeline.push(welcome); timeline.push(instructions); timeline.push(test); timeline.push(debrief); Step 4. flanker_main.js : Use the GitHub-hosted stimuli images Let's use the above GitHub-hosted images . The flanker_main.js in this tutorial has a few changes to do so. Let's see these changes. Change 1: Adding the image hosting site The repo_site variable was added to locate the JSDELIVR site that hosts stimuli images. You can easily use your repository by changing this line. // Use JSDELIVR to get the files from a GitHub repository // https://cdn.jsdelivr.net/gh/<github-username>/<repository-name>/<specific folder or file> var repo_site = \"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/\"; Change 2: Adding repo_site in instructions The repo_site variable should be added to wherever img/con1.png , img/con2.png , img/inc1.png , and img/inc2.png are used like the below. The find function really helps in doing so. var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this task, you will see five arrows on the screen, like the example below.</p>\" + \"<img src='\" + repo_site + \"img/inc1.png'></img>\" + \"<p>Press the left arrow key if the middle arrow is pointing left. (<)</p>\" + \"<p>Press the right arrow key if the middle arrow is pointing right. (>)</p>\" + \"<p>Press any key to begin.</p>\", post_trial_gap: 1000 }; Change 3: Adding repo_site in test_stimuli var test_stimuli = [ { stimulus: repo_site + \"img/con1.png\", data: { stim_type: 'congruent', direction: 'left'} }, { stimulus: repo_site + \"img/con2.png\", data: { stim_type: 'congruent', direction: 'right'} }, { stimulus: repo_site + \"img/inc1.png\", data: { stim_type: 'incongruent', direction: 'right'} }, { stimulus: repo_site + \"img/inc2.png\", data: { stim_type: 'incongruent', direction: 'left'} } ]; Step 5. demo-flanker-transformed.html : Import flanker_main.js Cutting the experiment-related code makes the demo-flanker-transformed.html file much shorter. Let's also use the GitHub-hosted JS and CSS files (above) . In addition, you also need to load flanker_main.js by using a <script> tag like the other jspsych plugin files (see the original jsPsych v6.3 tutorial ). You can use your own repository by creating the jsDelivr link by following this guide . CHANGE 1: Using the GitHub-hosted JS and CSS files <!-- CHANGE 1: Using the GitHub-hosted files --> <script src=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/jspsych.js\"></script> <script src=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <script src=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\"></script> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/css/jspsych.css\"> CHANGE 2: Loading the main experiment script in the same local folder <!-- CHANGE 2: Loading the main experiment script in the same folder--> <script src=\"flanker_main.js\"></script> Does this work? Let's find out by opening demo-flanker-transformed.html in a browser. Step 6: Upload demo-flanker-transformed.html and flanker_main.js to GitHub If this works, you may want to start a new GitHub repository for this task, as I did with my simple Reaction Time Task . Or, you may just want to try this flanker task in the Qualtrics. In that case, you can use the flanker_main.js in this tutorial GitHub repository, which is at https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/flanker_main.js and available for Qualtrics to load. Second transformation: demo-flanker-transformed-with-display-element.html Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The demo-flanker-transformed-with-display-element.html file in this GitHub repository contains three changes from the demo-flanker-transformed.html . When you open demo-flanker-transformed-with-display-element.html in a browser, you should see the same flanker task. Let's look at each change. Change 1: Using display_element By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* start the experiment */ jsPsych.init({ timeline: timeline, /* Change 1: Using `display_element` */ display_element: 'display_stage', on_finish: function () { jsPsych.data.displayData(); } }); Change 2: Adding display_stage CSS and Div The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div> Change 3: Adding extra scripts for Qualtrics The below scripts are not necessary to run this reaction time experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Using the jsPsych files section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- Use JSDELIVR to get the files from a GitHub repository https://cdn.jsdelivr.net/gh/<github-username>/<repository-name>/<specific folder or file> --> <link href=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> Third transformation: demo-flanker-qualtrics.js To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); The demo-flanker-qualtrics.js file in this GitHub repository contains several changes from demo-flanker-transformed-with-display-element.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. By separating the experiment-related code from the operation-related code, converting the html file to Qualtrics JavaScript function is pretty much similar to the Hello-World example . Let's look at each change. Change 1: Hiding the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 2: Defining and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. Or, you can provide the embeddable links via jsDelivr. Here, let's continue to use jsDelivr. One way to check whether these files are accessilbe is to view the source of demo-flanker-transformed.html and click the imported scripts. For example of jspsych.js , https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/jspsych.js . // https://cdn.jsdelivr.net/gh/<github-username>/<repository-name>/<experiment-folder> var task_github = \"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/\"; // requiredResources must include all the JS files that demo-simple-rt-task-transformed.html uses. var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\", task_github + \"flanker_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 3: Appending the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 4: Wrapping jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). Change 5: Summarizing and save the results to Qualtrics The jsPsych v6.3 tutorial shows you how you can process and summarize the experiment results online. Wouldn't it be great if your experiment results are directly included in your Qualtrics data? Well, you can actually summarize the results online and save those results in Qualtrics' Embedded Data using the setEmbeddedData function. demo-flanker-qualtrics.js does so when the jsPsych experiment finishes by running the below code from debrief_block . jsPsych.init({ timeline: timeline, display_element: 'display_stage', on_finish: function (data) { /* Change 5: Summarizing and save the results to Qualtrics */ // summarize the results var total_trials = jsPsych.data.get().filter({ trial_type: 'image-keyboard-response' }).count(); var accuracy = Math.round(jsPsych.data.get().filter({ correct: true }).count() / total_trials * 100); var congruent_rt = Math.round(jsPsych.data.get().filter({ correct: true, stim_type: 'congruent' }).select('rt').mean()); var incongruent_rt = Math.round(jsPsych.data.get().filter({ correct: true, stim_type: 'incongruent' }).select('rt').mean()); // save to qualtrics embedded data Qualtrics.SurveyEngine.setEmbeddedData(\"accuracy\", accuracy); Qualtrics.SurveyEngine.setEmbeddedData(\"congruent_rt\", congruent_rt); Qualtrics.SurveyEngine.setEmbeddedData(\"incongruent_rt\", incongruent_rt); /* Change 6: Adding the clean up and continue functions.*/ // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); Change 6: Adding the clean up and continue functions When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question. Finally, embedding jsPsych in Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question Create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole demo-simple-rt-task-qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Step 3. Open the Question HTML editor and copy paste the portion of demo-flanker-transformed-with-display-element.html The Change 3 section of the demo-flanker-transformed-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of demo-flanker-transformed-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below. Step 4. Creating Embedded Data elements To store the experiment results -- accuracy , congruent_rt , and incongruent_rt -- in Qualtrics, you need to create the Embedded Data elements named accuracy , congruent_rt , and incongruent_rt in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type accuracy Click Set a Value Now and type -1 Click Add a New Field and type congruent_rt Click Set a Value Now and type -1 Click Add a New Field and type incogruent_rt Click Set a Value Now and type -1 Step 5. Move Set Embedded Data block to the top of Survey Flow The accuracy , congruent_rt , and incongruent_rt fields should be defined before the jsPsych reaction time task, so you need to move the Embedded Data block to the top of the Survey Flow. Click and hold down Move to drag the Embedded Data to the top of the Survey Flow. After this, you should see the Survey Flow like below. Step 6. Add a check for the Embedded Data You should make sure that the experiment results are saved correctly. You can do so by showing the accuracy , congruent_rt , and incongruent_rt Embedded Data after the reaction task. Click Add Page Break Click Create a New Question Change Question Type to Text/Graphic Type ${e://Field/accuracy} , ${e://Field/congruent_rt} , and ${e://Field/incongruent_rt} to access these Embedded Data Step 7. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same reaction time task running in Qualtrics. For example, try this Qualtrics link . Do you also want to save the trial-by-trial data? Then, you need a server that can receive your data. See the tutorial Saving data to a web server using PHP .","title":"Embedding Flanker Task"},{"location":"flanker/#embedding-the-jspsych-flanker-task-into-qualtrics","text":"Please NOTE!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial may not work with jsPsych v7.x and above. So, I instead use the 6.1.0 version below, which I forked previously . Or, you can get jsPsych v6.3.1 (the last jsPsych 6.x release) from here . Here, I used v6.1.0 , which is not much different from v6.3.1 ** Let's start from the demo-flanker.html in the jsPsych repository and embed it to qualtrics. The current demo file was revised to incorporate jsPsych v7, so it's different from what I used to create this tutorial. For details of demo-flanker.html in jsPsych v6.x, please read the separate tutorial in this GitHub repository . You can first try the task by clicking HERE .","title":"Embedding the jsPsych Flanker Task into Qualtrics"},{"location":"flanker/#the-start-demo-flanker-taskhtml","text":"The experiment code, demo-flanker.html is included in the flanker folder in this tutorial repository . Let's make the code work in a separate folder like the hello-world example . To do so, you need to change the url of jsPsych scripts, stylesheet, and stimuli of the experiment code. In this tutorial, we will change those twice to make the flanker task (1) run on a new folder and (2) use the GitHub-hosted resources. First, let's make it run locally. To do so, The jsPsych library, plugins, and stylesheet come from the local folder. As you can see, the demo-flanker.html in this repository looks at the local jspsych-6.1.0 folder for these files. <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\"></script> <link rel=\"stylesheet\" href=\"jspsych-6.1.0/css/jspsych.css\"></link> The experiment also needs stimuli images. So, you need to create a folder called img in the experiment folder and copy con1.png , con2.png , inc1.png , and inc2.png into the img folder. Your folder should look like this (and imagine the html file has the name demo-flanker.html ).","title":"The start: demo-flanker-task.html"},{"location":"flanker/#using-files-in-public-github-repositories","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. You can make your files online using GitHub Pages, as explained in the Hosting jsPsych or the Hosting RT Task . But you can do so WITHOUT setting up your own GitHub Pages. If you see a GitHub file that you want to embed in your experiment, you can use jSDelivr to fetch the file like https://cdn.jsdelivr.net/gh/<github-username>/<repository-name>/<file-name> . WARNING: If you are developing your experiment and making frequent changes, jsDelivr is NOT your best option because it takes up to 24 hours to serve the modified files. Read How to use jsDelivr to learn more about jsDelivr and Content Delivery Network (CDN) in general.","title":"Using files in public GitHub repositories"},{"location":"flanker/#using-this-tutorials-github-files-for-the-flanker-task","text":"This jsPsych-in-Qualtrics repository has the files necessary to run the flanker task. These files can be embedded via jSDelivr (github-username: kywch , repository-name: jsPsych-in-Qualtrics , experiment-folder: flanker ). You need eight files to run the flanker experiment. jspsych.css : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/css/jspsych.css jspsych.js : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/jspsych.js jspsych-html-keyboard-response.js : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js jspsych-image-keyboard-response.js : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js con1.png : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/img/con1.png con2.png : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/img/con2.png inc1.png : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/img/inc1.png inc2.png : https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/img/inc2.png","title":"Using this tutorial's GitHub files for the flanker task"},{"location":"flanker/#first-transformation-demo-flanker-transformedhtml-and-flanker_mainjs","text":"I prefer to separate out the experiment-related code from the operation-related code, following the Experiment Factory style. If you haven't, please visit the Experiment Factory library , which contain a ton of experiments with running demos and their code. In the demo-flanker.html , constructing the timeline can be considered to be experiment-related, and the remaining parts that also appear in the Hello-World example , such as loading jspsych.js and jsPsych.init() , can be considered to be operation-related. Here, I am separating the experiment-related code and the operation-related code and putting the code into flanker_main.js and demo-flanker-transformed.html , respectively, by following steps:","title":"First transformation: demo-flanker-transformed.html and flanker_main.js"},{"location":"flanker/#step-1-copy-demo-flankerhtml-to-demo-flanker-transformedhtml","text":"","title":"Step 1. Copy demo-flanker.html to demo-flanker-transformed.html"},{"location":"flanker/#step-2-create-a-new-file-flanker_mainjs","text":"And open flanker_main.js in a new editor window.","title":"Step 2. Create a new file flanker_main.js"},{"location":"flanker/#step-3-cut-and-paste-the-experiment-related-code","text":"Open demo-flanker-transformed.html . You should have both flanker_main.js and demo-flanker-transformed.html opened. Select the code from the /* experiment parameters */ line to the timeline.push(debrief_block); line, cut the selection , and paste it to flanker_main.js . REPEAT . The code is being cut-and-pasted (NOT copy-pasted). /* experiment parameters */ var reps_per_trial_type = 4; /*set up welcome block*/ var welcome = { type: \"html-keyboard-response\", stimulus: \"Welcome to the experiment. Press any key to begin.\" }; /*set up instructions block*/ var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this task, you will see five arrows on the screen, like the example below.</p>\" + \"<img src='img/inc1.png'></img>\" + \"<p>Press the left arrow key if the middle arrow is pointing left. (<)</p>\" + \"<p>Press the right arrow key if the middle arrow is pointing right. (>)</p>\" + \"<p>Press any key to begin.</p>\", post_trial_gap: 1000 }; /*defining stimuli*/ var test_stimuli = [ { stimulus: \"img/con1.png\", data: { stim_type: 'congruent', direction: 'left'} }, { stimulus: \"img/con2.png\", data: { stim_type: 'congruent', direction: 'right'} }, { stimulus: \"img/inc1.png\", data: { stim_type: 'incongruent', direction: 'right'} }, { stimulus: \"img/inc2.png\", data: { stim_type: 'incongruent', direction: 'left'} } ]; /* defining test timeline */ var test = { timeline: [{ type: 'image-keyboard-response', choices: [37, 39], trial_duration: 1500, stimulus: jsPsych.timelineVariable('stimulus'), data: jsPsych.timelineVariable('data'), on_finish: function (data) { var correct = false; if (data.direction == 'left' && data.key_press == 37 && data.rt > -1) { correct = true; } else if (data.direction == 'right' && data.key_press == 39 && data.rt > -1) { correct = true; } data.correct = correct; }, post_trial_gap: function () { return Math.floor(Math.random() * 1500) + 500; } }], timeline_variables: test_stimuli, sample: { type: 'fixed-repetitions', size: reps_per_trial_type } }; /*defining debriefing block*/ var debrief = { type: \"html-keyboard-response\", stimulus: function () { var total_trials = jsPsych.data.get().filter({ trial_type: 'image-keyboard-response' }).count(); var accuracy = Math.round(jsPsych.data.get().filter({ correct: true }).count() / total_trials * 100); var congruent_rt = Math.round(jsPsych.data.get().filter({ correct: true, stim_type: 'congruent' }).select('rt').mean()); var incongruent_rt = Math.round(jsPsych.data.get().filter({ correct: true, stim_type: 'incongruent' }).select('rt').mean()); return \"<p>You responded correctly on <strong>\" + accuracy + \"%</strong> of the trials.</p> \" + \"<p>Your average response time for congruent trials was <strong>\" + congruent_rt + \"ms</strong>.</p>\" + \"<p>Your average response time for incongruent trials was <strong>\" + incongruent_rt + \"ms</strong>.</p>\" + \"<p>Press any key to complete the experiment. Thank you!</p>\"; } }; /*set up experiment structure*/ var timeline = []; timeline.push(welcome); timeline.push(instructions); timeline.push(test); timeline.push(debrief);","title":"Step 3. Cut and paste the experiment-related code"},{"location":"flanker/#step-4-flanker_mainjs-use-the-github-hosted-stimuli-images","text":"Let's use the above GitHub-hosted images . The flanker_main.js in this tutorial has a few changes to do so. Let's see these changes.","title":"Step 4. flanker_main.js: Use the GitHub-hosted stimuli images"},{"location":"flanker/#change-1-adding-the-image-hosting-site","text":"The repo_site variable was added to locate the JSDELIVR site that hosts stimuli images. You can easily use your repository by changing this line. // Use JSDELIVR to get the files from a GitHub repository // https://cdn.jsdelivr.net/gh/<github-username>/<repository-name>/<specific folder or file> var repo_site = \"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/\";","title":"Change 1: Adding the image hosting site"},{"location":"flanker/#change-2-adding-repo_site-in-instructions","text":"The repo_site variable should be added to wherever img/con1.png , img/con2.png , img/inc1.png , and img/inc2.png are used like the below. The find function really helps in doing so. var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this task, you will see five arrows on the screen, like the example below.</p>\" + \"<img src='\" + repo_site + \"img/inc1.png'></img>\" + \"<p>Press the left arrow key if the middle arrow is pointing left. (<)</p>\" + \"<p>Press the right arrow key if the middle arrow is pointing right. (>)</p>\" + \"<p>Press any key to begin.</p>\", post_trial_gap: 1000 };","title":"Change 2: Adding repo_site in instructions"},{"location":"flanker/#change-3-adding-repo_site-in-test_stimuli","text":"var test_stimuli = [ { stimulus: repo_site + \"img/con1.png\", data: { stim_type: 'congruent', direction: 'left'} }, { stimulus: repo_site + \"img/con2.png\", data: { stim_type: 'congruent', direction: 'right'} }, { stimulus: repo_site + \"img/inc1.png\", data: { stim_type: 'incongruent', direction: 'right'} }, { stimulus: repo_site + \"img/inc2.png\", data: { stim_type: 'incongruent', direction: 'left'} } ];","title":"Change 3: Adding repo_site in test_stimuli"},{"location":"flanker/#step-5-demo-flanker-transformedhtml-import-flanker_mainjs","text":"Cutting the experiment-related code makes the demo-flanker-transformed.html file much shorter. Let's also use the GitHub-hosted JS and CSS files (above) . In addition, you also need to load flanker_main.js by using a <script> tag like the other jspsych plugin files (see the original jsPsych v6.3 tutorial ). You can use your own repository by creating the jsDelivr link by following this guide .","title":"Step 5. demo-flanker-transformed.html: Import flanker_main.js"},{"location":"flanker/#change-1-using-the-github-hosted-js-and-css-files","text":"<!-- CHANGE 1: Using the GitHub-hosted files --> <script src=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/jspsych.js\"></script> <script src=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <script src=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\"></script> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/css/jspsych.css\">","title":"CHANGE 1: Using the GitHub-hosted JS and CSS files"},{"location":"flanker/#change-2-loading-the-main-experiment-script-in-the-same-local-folder","text":"<!-- CHANGE 2: Loading the main experiment script in the same folder--> <script src=\"flanker_main.js\"></script>","title":"CHANGE 2: Loading the main experiment script in the same local folder"},{"location":"flanker/#does-this-work","text":"Let's find out by opening demo-flanker-transformed.html in a browser.","title":"Does this work?"},{"location":"flanker/#step-6-upload-demo-flanker-transformedhtml-and-flanker_mainjs-to-github","text":"If this works, you may want to start a new GitHub repository for this task, as I did with my simple Reaction Time Task . Or, you may just want to try this flanker task in the Qualtrics. In that case, you can use the flanker_main.js in this tutorial GitHub repository, which is at https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/flanker_main.js and available for Qualtrics to load.","title":"Step 6: Upload demo-flanker-transformed.html and flanker_main.js to GitHub"},{"location":"flanker/#second-transformation-demo-flanker-transformed-with-display-elementhtml","text":"Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The demo-flanker-transformed-with-display-element.html file in this GitHub repository contains three changes from the demo-flanker-transformed.html . When you open demo-flanker-transformed-with-display-element.html in a browser, you should see the same flanker task. Let's look at each change.","title":"Second transformation: demo-flanker-transformed-with-display-element.html"},{"location":"flanker/#change-1-using-display_element","text":"By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* start the experiment */ jsPsych.init({ timeline: timeline, /* Change 1: Using `display_element` */ display_element: 'display_stage', on_finish: function () { jsPsych.data.displayData(); } });","title":"Change 1: Using display_element"},{"location":"flanker/#change-2-adding-display_stage-css-and-div","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Change 2: Adding display_stage CSS and Div"},{"location":"flanker/#change-3-adding-extra-scripts-for-qualtrics","text":"The below scripts are not necessary to run this reaction time experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Using the jsPsych files section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- Use JSDELIVR to get the files from a GitHub repository https://cdn.jsdelivr.net/gh/<github-username>/<repository-name>/<specific folder or file> --> <link href=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div>","title":"Change 3: Adding extra scripts for Qualtrics"},{"location":"flanker/#third-transformation-demo-flanker-qualtricsjs","text":"To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); The demo-flanker-qualtrics.js file in this GitHub repository contains several changes from demo-flanker-transformed-with-display-element.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. By separating the experiment-related code from the operation-related code, converting the html file to Qualtrics JavaScript function is pretty much similar to the Hello-World example . Let's look at each change.","title":"Third transformation: demo-flanker-qualtrics.js"},{"location":"flanker/#change-1-hiding-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 1: Hiding the Next button"},{"location":"flanker/#change-2-defining-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. Or, you can provide the embeddable links via jsDelivr. Here, let's continue to use jsDelivr. One way to check whether these files are accessilbe is to view the source of demo-flanker-transformed.html and click the imported scripts. For example of jspsych.js , https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/jspsych.js . // https://cdn.jsdelivr.net/gh/<github-username>/<repository-name>/<experiment-folder> var task_github = \"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/\"; // requiredResources must include all the JS files that demo-simple-rt-task-transformed.html uses. var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\", task_github + \"flanker_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 2: Defining and load required resources"},{"location":"flanker/#change-3-appending-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 3: Appending the display_stage Div using jQuery"},{"location":"flanker/#change-4-wrapping-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above).","title":"Change 4: Wrapping jsPsych.init() in a function"},{"location":"flanker/#change-5-summarizing-and-save-the-results-to-qualtrics","text":"The jsPsych v6.3 tutorial shows you how you can process and summarize the experiment results online. Wouldn't it be great if your experiment results are directly included in your Qualtrics data? Well, you can actually summarize the results online and save those results in Qualtrics' Embedded Data using the setEmbeddedData function. demo-flanker-qualtrics.js does so when the jsPsych experiment finishes by running the below code from debrief_block . jsPsych.init({ timeline: timeline, display_element: 'display_stage', on_finish: function (data) { /* Change 5: Summarizing and save the results to Qualtrics */ // summarize the results var total_trials = jsPsych.data.get().filter({ trial_type: 'image-keyboard-response' }).count(); var accuracy = Math.round(jsPsych.data.get().filter({ correct: true }).count() / total_trials * 100); var congruent_rt = Math.round(jsPsych.data.get().filter({ correct: true, stim_type: 'congruent' }).select('rt').mean()); var incongruent_rt = Math.round(jsPsych.data.get().filter({ correct: true, stim_type: 'incongruent' }).select('rt').mean()); // save to qualtrics embedded data Qualtrics.SurveyEngine.setEmbeddedData(\"accuracy\", accuracy); Qualtrics.SurveyEngine.setEmbeddedData(\"congruent_rt\", congruent_rt); Qualtrics.SurveyEngine.setEmbeddedData(\"incongruent_rt\", incongruent_rt); /* Change 6: Adding the clean up and continue functions.*/ // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } });","title":"Change 5: Summarizing and save the results to Qualtrics"},{"location":"flanker/#change-6-adding-the-clean-up-and-continue-functions","text":"When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question.","title":"Change 6: Adding the clean up and continue functions"},{"location":"flanker/#finally-embedding-jspsych-in-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Finally, embedding jsPsych in Qualtrics"},{"location":"flanker/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"Create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"flanker/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-demo-simple-rt-task-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript .","title":"Step 2. Open the Question JavaScript editor and copy paste the whole demo-simple-rt-task-qualtrics.js"},{"location":"flanker/#step-3-open-the-question-html-editor-and-copy-paste-the-portion-of-demo-flanker-transformed-with-display-elementhtml","text":"The Change 3 section of the demo-flanker-transformed-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of demo-flanker-transformed-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://cdn.jsdelivr.net/gh/kywch/jsPsych-in-Qualtrics/flanker/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the portion of demo-flanker-transformed-with-display-element.html"},{"location":"flanker/#step-4-creating-embedded-data-elements","text":"To store the experiment results -- accuracy , congruent_rt , and incongruent_rt -- in Qualtrics, you need to create the Embedded Data elements named accuracy , congruent_rt , and incongruent_rt in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type accuracy Click Set a Value Now and type -1 Click Add a New Field and type congruent_rt Click Set a Value Now and type -1 Click Add a New Field and type incogruent_rt Click Set a Value Now and type -1","title":"Step 4. Creating Embedded Data elements"},{"location":"flanker/#step-5-move-set-embedded-data-block-to-the-top-of-survey-flow","text":"The accuracy , congruent_rt , and incongruent_rt fields should be defined before the jsPsych reaction time task, so you need to move the Embedded Data block to the top of the Survey Flow. Click and hold down Move to drag the Embedded Data to the top of the Survey Flow. After this, you should see the Survey Flow like below.","title":"Step 5. Move Set Embedded Data block to the top of Survey Flow"},{"location":"flanker/#step-6-add-a-check-for-the-embedded-data","text":"You should make sure that the experiment results are saved correctly. You can do so by showing the accuracy , congruent_rt , and incongruent_rt Embedded Data after the reaction task. Click Add Page Break Click Create a New Question Change Question Type to Text/Graphic Type ${e://Field/accuracy} , ${e://Field/congruent_rt} , and ${e://Field/incongruent_rt} to access these Embedded Data","title":"Step 6. Add a check for the Embedded Data"},{"location":"flanker/#step-7-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same reaction time task running in Qualtrics. For example, try this Qualtrics link .","title":"Step 7. Publish and test!"},{"location":"flanker/#do-you-also-want-to-save-the-trial-by-trial-data","text":"Then, you need a server that can receive your data. See the tutorial Saving data to a web server using PHP .","title":"Do you also want to save the trial-by-trial data?"},{"location":"github-pages/","text":"Making jsPsych files loadable in Qualtrics To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. GitHub Pages allows you to do so with only three steps (if you have a GitHub account). I will use these GitHub-hosted scripts in the following tutorials, so please complete this step. Please NOTE!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial may not work with jsPsych v7.x and above. So, I instead use the 6.1.0 version below, which I forked previously . Step 0. Create a GitHub account Go to the GitHub site and create your account. Step 1. Fork the (old) jsPsych repository (NOTE: I'm NOT using the latest/official version!) Go to my previously-forked jsPsych v6.1.0 repository and click the Fork button to copy the repo to your account. Step 2. Click the Settings button The whole jsPsych repository has been copied to your account, which should be accessible at https://github.com/<your-github-username>/jsPsych/ . For example, https://github.com/kywch/jsPsych/ . Go to your copy of the jsPsych repository and click the Settings button on the home page. Step 3. Enable GitHub Pages for the jsPsych repository Scroll down and find the GitHub Pages section. Select the Source to be the master branch . Within a few minutes, a website will be available at https://<your-github-username>.github.io/jsPsych/ . For example, https://kywch.github.io/jsPsych/ . And, you are done. You can check with your browser by directly going to the jspsych.js , jspsych.css , and jspsych-html-keyboard-response.js . jspsych.js should be available at https://<your-github-username>.github.io/jsPsych/jspsych.js , like https://kywch.github.io/jsPsych/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/jsPsych/css/jspsych.css , like https://kywch.github.io/jsPsych/css/jspsych.css . jspsych-html-keyboard-response.js should be available at https://<your-github-username>.github.io/jsPsych/plugins/jspsych-html-keyboard-response.js , like https://kywch.github.io/jsPsych/plugins/jspsych-html-keyboard-response.js . BUT WAIT! This is not the only way. There are two more ways to make your files loadable in Qualtrics. Creating your experiment GitHub repostory (preferred) , like the Reaction-Time Task tutorial. Borrowing files from public GitHub repository, like the Flanker Task tutorial","title":"Hosting jsPsych"},{"location":"github-pages/#making-jspsych-files-loadable-in-qualtrics","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. GitHub Pages allows you to do so with only three steps (if you have a GitHub account). I will use these GitHub-hosted scripts in the following tutorials, so please complete this step. Please NOTE!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial may not work with jsPsych v7.x and above. So, I instead use the 6.1.0 version below, which I forked previously .","title":"Making jsPsych files loadable in Qualtrics"},{"location":"github-pages/#step-0-create-a-github-account","text":"Go to the GitHub site and create your account.","title":"Step 0. Create a GitHub account"},{"location":"github-pages/#step-1-fork-the-old-jspsych-repository-note-im-not-using-the-latestofficial-version","text":"Go to my previously-forked jsPsych v6.1.0 repository and click the Fork button to copy the repo to your account.","title":"Step 1. Fork the (old) jsPsych repository (NOTE: I'm NOT using the latest/official version!)"},{"location":"github-pages/#step-2-click-the-settings-button","text":"The whole jsPsych repository has been copied to your account, which should be accessible at https://github.com/<your-github-username>/jsPsych/ . For example, https://github.com/kywch/jsPsych/ . Go to your copy of the jsPsych repository and click the Settings button on the home page.","title":"Step 2. Click the Settings button"},{"location":"github-pages/#step-3-enable-github-pages-for-the-jspsych-repository","text":"Scroll down and find the GitHub Pages section. Select the Source to be the master branch . Within a few minutes, a website will be available at https://<your-github-username>.github.io/jsPsych/ . For example, https://kywch.github.io/jsPsych/ .","title":"Step 3. Enable GitHub Pages for the jsPsych repository"},{"location":"github-pages/#and-you-are-done","text":"You can check with your browser by directly going to the jspsych.js , jspsych.css , and jspsych-html-keyboard-response.js . jspsych.js should be available at https://<your-github-username>.github.io/jsPsych/jspsych.js , like https://kywch.github.io/jsPsych/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/jsPsych/css/jspsych.css , like https://kywch.github.io/jsPsych/css/jspsych.css . jspsych-html-keyboard-response.js should be available at https://<your-github-username>.github.io/jsPsych/plugins/jspsych-html-keyboard-response.js , like https://kywch.github.io/jsPsych/plugins/jspsych-html-keyboard-response.js .","title":"And, you are done."},{"location":"github-pages/#but-wait-this-is-not-the-only-way","text":"There are two more ways to make your files loadable in Qualtrics. Creating your experiment GitHub repostory (preferred) , like the Reaction-Time Task tutorial. Borrowing files from public GitHub repository, like the Flanker Task tutorial","title":"BUT WAIT! This is not the only way."},{"location":"hello-world/","text":"Embedding the jsPsych \"Hello world\" experiment into Qualtrics WARNING!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial may not work with jsPsych v7.x and above. You can get jsPsych v6.3.1 (the last jsPsych 6.x release) from here . Let's start from the original jsPsych v6.3 \"Hello world!\" example and embed it to qualtrics. To do so, you need to use the display_element option, which was briefly mentioned in the jsPsych tutorial . The start: experiment.html After completing the original jsPsych v6.3 \"Hello world!\" example , your folder should look like this. When you open experiment.html using your programming-friendly text editor, such as Atom or VSCode , you should see the html code like below. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial] }) </script> </html> When you open experiment.html in a browser, you should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial). First transformation: experiment-with-display-element.html Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The experiment-with-display-element.html file in the tutorial GitHub repository contains three changes from the experiment.html . When you open experiment-with-display-element.html in a browser, you should see the same \"Hello world!\". Let's look at each change. Change 1: Using display_element By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the ' ' called display_stage , which the current script does not have yet. So, let's add the display_stage . jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage' }) Change 2: Adding display_stage CSS and Div The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div> Change 3: Adding extra scripts for Qualtrics The below scripts are not necessary to run this hello-world experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> Putting it all together So the experiment-with-display-element.html code looks like this. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body> <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE UP TO QUALTRICS TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> </body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } /* Change 1: Using `display_element` */ jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage' }) </script> </html> Second transformation: qualtrics.js To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); The qualtrics.js file in the tutorial GitHub repository contains several changes from experiment-with-display-element.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. Let's look at each change. Change 1: Hiding the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 2: Defining and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. After Making jsPsych files loadable in Qualtrics , you should be able to put your github page url at jslib_url . var jslib_url = \"https://kywch.github.io/jsPsych/\"; // \"https://<your-github-username>.github.io/jsPsych/\" // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 3: Appending the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 4: Wrapping jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', }); } Change 5: Adding the clean up and continue functions When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function (data) { // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } Putting it all together So the qualtrics.js code looks like this. Qualtrics.SurveyEngine.addOnload(function () { /*Place your JavaScript here to run when the page loads*/ /* Change 2: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); /* Change 3: Defining and load required resources */ var jslib_url = \"https://kywch.github.io/jsPsych/\"; // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } /* Change 4: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); /* Change 5: Wrapping jsPsych.init() in a function */ function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Adding the clean up and continue functions.*/ on_finish: function (data) { // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); } }); Qualtrics.SurveyEngine.addOnReady(function () { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function () { /*Place your JavaScript here to run when the page is unloaded*/ }); Finally, embedding jsPsych in Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Step 3. Open the Question HTML editor and copy paste the portion of experiment-with-display-element.html The Change 3 section of the experiment-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of experiment-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below. Step 4. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see \"Hello World!\" in Qualtrics. For example, here is a just another Hello-World Qualtrics survey . Do you want to save the trial-by-trial results? Then, you need a server that can receive your data. See the tutorial Saving data to a web server using PHP .","title":"Embedding Hello World!"},{"location":"hello-world/#embedding-the-jspsych-hello-world-experiment-into-qualtrics","text":"WARNING!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial may not work with jsPsych v7.x and above. You can get jsPsych v6.3.1 (the last jsPsych 6.x release) from here . Let's start from the original jsPsych v6.3 \"Hello world!\" example and embed it to qualtrics. To do so, you need to use the display_element option, which was briefly mentioned in the jsPsych tutorial .","title":"Embedding the jsPsych \"Hello world\" experiment into Qualtrics"},{"location":"hello-world/#the-start-experimenthtml","text":"After completing the original jsPsych v6.3 \"Hello world!\" example , your folder should look like this. When you open experiment.html using your programming-friendly text editor, such as Atom or VSCode , you should see the html code like below. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.0.5/jspsych.js\"></script> <script src=\"jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body></body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial] }) </script> </html> When you open experiment.html in a browser, you should see \"Hello world!\" printed on the screen, and if you press a key on the keyboard, the text should disappear (ending the trial).","title":"The start: experiment.html"},{"location":"hello-world/#first-transformation-experiment-with-display-elementhtml","text":"Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The experiment-with-display-element.html file in the tutorial GitHub repository contains three changes from the experiment.html . When you open experiment-with-display-element.html in a browser, you should see the same \"Hello world!\". Let's look at each change.","title":"First transformation: experiment-with-display-element.html"},{"location":"hello-world/#change-1-using-display_element","text":"By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the ' ' called display_stage , which the current script does not have yet. So, let's add the display_stage . jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage' })","title":"Change 1: Using display_element"},{"location":"hello-world/#change-2-adding-display_stage-css-and-div","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Change 2: Adding display_stage CSS and Div"},{"location":"hello-world/#change-3-adding-extra-scripts-for-qualtrics","text":"The below scripts are not necessary to run this hello-world experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div>","title":"Change 3: Adding extra scripts for Qualtrics"},{"location":"hello-world/#putting-it-all-together","text":"So the experiment-with-display-element.html code looks like this. <!DOCTYPE html> <html> <head> <title>My experiment</title> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> </head> <body> <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE UP TO QUALTRICS TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> </body> <script> var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } /* Change 1: Using `display_element` */ jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage' }) </script> </html>","title":"Putting it all together"},{"location":"hello-world/#second-transformation-qualtricsjs","text":"To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); The qualtrics.js file in the tutorial GitHub repository contains several changes from experiment-with-display-element.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. Let's look at each change.","title":"Second transformation: qualtrics.js"},{"location":"hello-world/#change-1-hiding-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 1: Hiding the Next button"},{"location":"hello-world/#change-2-defining-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. After Making jsPsych files loadable in Qualtrics , you should be able to put your github page url at jslib_url . var jslib_url = \"https://kywch.github.io/jsPsych/\"; // \"https://<your-github-username>.github.io/jsPsych/\" // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 2: Defining and load required resources"},{"location":"hello-world/#change-3-appending-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 3: Appending the display_stage Div using jQuery"},{"location":"hello-world/#change-4-wrapping-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', }); }","title":"Change 4: Wrapping jsPsych.init() in a function"},{"location":"hello-world/#change-5-adding-the-clean-up-and-continue-functions","text":"When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function (data) { // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }","title":"Change 5: Adding the clean up and continue functions"},{"location":"hello-world/#putting-it-all-together_1","text":"So the qualtrics.js code looks like this. Qualtrics.SurveyEngine.addOnload(function () { /*Place your JavaScript here to run when the page loads*/ /* Change 2: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); /* Change 3: Defining and load required resources */ var jslib_url = \"https://kywch.github.io/jsPsych/\"; // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } /* Change 4: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); /* Change 5: Wrapping jsPsych.init() in a function */ function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Adding the clean up and continue functions.*/ on_finish: function (data) { // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); } }); Qualtrics.SurveyEngine.addOnReady(function () { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function () { /*Place your JavaScript here to run when the page is unloaded*/ });","title":"Putting it all together"},{"location":"hello-world/#finally-embedding-jspsych-in-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Finally, embedding jsPsych in Qualtrics"},{"location":"hello-world/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"hello-world/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript .","title":"Step 2. Open the Question JavaScript editor and copy paste the whole qualtrics.js"},{"location":"hello-world/#step-3-open-the-question-html-editor-and-copy-paste-the-portion-of-experiment-with-display-elementhtml","text":"The Change 3 section of the experiment-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of experiment-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the portion of experiment-with-display-element.html"},{"location":"hello-world/#step-4-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see \"Hello World!\" in Qualtrics. For example, here is a just another Hello-World Qualtrics survey .","title":"Step 4. Publish and test!"},{"location":"hello-world/#do-you-want-to-save-the-trial-by-trial-results","text":"Then, you need a server that can receive your data. See the tutorial Saving data to a web server using PHP .","title":"Do you want to save the trial-by-trial results?"},{"location":"mood-induction/","text":"Embedding Mood Induction into Qualtrics The mood induction procedures by Mayer et al. (1995) and Marzillier & Davey (2005), which use both music and prompts, were implemented using jsPsych: happy , angry , fear , sad , and neutral . Before running an auditory task (like mood induction or dual n-back), you should make sure participants can listen to sound. To do so, I also made a quick audio test using jsPsych. You can first try the test by clicking HERE . See the Embedding Quick Audio Test tutorial to use this in Qualtrics. I uploaded these codes on the Mood Induction repository . You can either directly use these files or fork this repository to customize. This tutorial consists of two parts. (1) I will first explain how you can embed the mood induction in Qualtrics . (2) I will then explain the experiment code . Embedding the Mood Induction into Qualtrics Hosting the Mood Induction scripts in GitHub To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Go to the Mood Induction repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. Also make sure that sound files play on your browser. When you are done, you can check the online files with your browser by directly going to the jspsych.js , jspsych.css , jspsych-fullscreen.js , and jspsych-mood-induction.js . jspsych.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/jspsych.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css . jspsych-fullscreen.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/plugins/jspsych-fullscreen.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/plugins/jspsych-fullscreen.js . jspsych-mood-induction.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-mood-induction.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-mood-induction.js . Sound files are stored in the music folder and should be available online. Embedding the task to Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole mood-induction-qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole mood-induction-qualtrics.js (click to see the code) into the editor. ALSO CHECK WHETHER THE URL, task_github , IS VALID. Step 3. Open the Question HTML editor and copy paste the below html code The Change 3 section of the mood-induction-demo.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of mood-induction-demo.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } #centerbox { width: 80vh; height: 20vh; position: relative; top: 40%; font-size: 22pt; line-height: normal; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below. Step 4. Create Embedded Data elements To store the addition details about this audio test, you need to create the Embedded Data elements named mood , mood_script_order and mood_spent_time in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type mood Click Add a New Field and type mood_script_order Click Add a New Field and type mood_spent_time Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow Step 5. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same Audio Test running in Qualtrics. For example, try this Qualtrics link . Explaining the code For the basics, please read the Hello world tutorial . A working demo in a local browser: mood-induction-demo.html Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The changes in mood-induction-demo.html (click to see the code) are in the same order as in the Hello world tutorial . You should be able to run the audio test simply by opening mood-induction-demo.html in a browser. Let's look at each change. Change 1: Using display_element By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* Change 1: Using `display_element` */ jsPsych.init({ timeline: timeline, display_element: 'display_stage' }) Change 2: Adding display_stage CSS and Div The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. The centerbox is where we put the text prompts. <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } #centerbox { width: 80vh; height: 20vh; position: relative; top: 40%; font-size: 22pt; line-height: normal; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> Change 3: Adding extra scripts for Qualtrics The below scripts are not necessary to run this task, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> Qualtrics transformation: mood-induction-qualtrics.js To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change. Change 1: Hiding the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 2: Defining and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. AFTER TESTING, CHANGE the flag_debug variable to false . /* Change 2: Defining and load required resources */ // task-related variables var flag_debug = true; var time_unit = 1000; // ms var mood_spent_time = ''; var script_order = ''; // requiredResources must include all the required JS files var task_github = \"https://kywch.github.io/Mood-Induction_jsPsych/\"; // https://<your-github-username>.github.io/<your-experiment-name> var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-fullscreen.js\", task_github + \"jspsych-mood-induction.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 3: Appending the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 4: Adding resources, scripts, and helper functions Note that the music-only duration is set to 60 s (or 6 s when flag_debug is true ) and the prompt duration is set to 30 s (or 3 s when flag_debug is true ). See inside the function generate_mood_induction to modify these. /* Change 4: Adding resouces, scripts, and helper functions */ var mood_music = { happy: task_github + 'music/Mazurka_HappyMIP.mp3', // happy angry: task_github + 'music/NightOnBaldMountain_AngerMIP.mp3', // angry fear: task_github + 'music/PsychoTheme_FearMIP.mp3', // fear sad: task_github + 'music/ChopinOpus28no6_SadMIP.mp3', // sad neutral: task_github + 'music/ChopinWaltz11_NeutralMIP.mp3' // neutral }; var mood_scripts = {}; mood_scripts['happy'] = [ // happy \"You just got a new job, and it's even better than you expected.\", \"You wake up on a Saturday after a number of wintry-cold rainy days, and the temperature is in the high sixties.\", \"You buy a lottery ticket and you win $100.00 instantly.\", \"You and a friend go to a nice restaurant. The meal, the conversation and the atmosphere are all perfect.\", \"You get out of class or work early. It\u2019s a beautiful day and you and some friends go out for ice cream.\", \"You spend a day in the mountains; the air is clean and sharp, the day sunny, and you take a swim in a beautiful lake.\", \"You unexpectedly run into someone you like. You go for coffee and have a great conversation. You discover you think alike, and share many of the same interests.\", \"It\u2019s your birthday and friends throw you a terrific surprise party.\" ]; mood_scripts['angry'] = [ // angry \"A student stole the exam in an important course you\u2019re taking. The teacher takes it out on everyone by making such a tough exam that you get a very low grade even though you understood the material.\", \"A friend of yours was assaulted by a convicted rapist just released on parole.\", \"Your boss decides to promote another employee who is related to him to a position he knew you wanted. He tells you that you didn\u2019t work hard enough, even though he knows you worked much harder and better than his relative.\", \"It\u2019s a very hot day, and you have been standing in a long, slow line at the Department of Motor Vehicles for over an hour. Kids are screaming all around you when two of the four clerks close their windows for no apparent reason.\", \"Someone put a big scratch in your car while it was parked in the lot and didn\u2019t even bother to leave a note.\", \"The landlord doesn\u2019t like you and has been accusing you of unsanitary conditions, even though you keep your apartment very clean. You arrive home only to see an eviction notice on your door.\", \"Somebody files false legal claim against you.\", \"You have had a long, busy day and the person you live with starts to complain about how you forgot to do something that you forgot to do.\" ] mood_scripts['fear'] = [ // fear \"You are riding alone in an elevator when a man walks in and pulls out a knife. He stares at you without saying what he wants.\", \"You\u2019re in an overcrowded carriage at the top of a ferris wheel when the mechanism malfunctions and the wheel jams. A thunder storm is developing, and the wheel sways in the wind, it\u2019s metal creaking.\", \"Your car breaks down on a back street in a dangerous part of the city. You start to go for help when you see several teenage boys walking toward you carrying weapons.\", \"You are driving down an unfamiliar road on a stormy night when your car skids out of control.\", \"You are driving down the road when a tractor trailer in the opposite direction crosses over into your lane.\", \"You\u2019re in your your bedroom late at night when you hear someone enter your apartment. No one else you know has a key.\", \"You\u2019re swimming in a dark lake and something big, slimy, and prickly brushes against your leg.\", \"You\u2019re having a nightmare about someone chasing you and you fall into a bottomless pit. You start to scream in your sleep.\" ]; mood_scripts['sad'] = [ // sad \"You read in the newspaper that a teacher you used to house-sit for recently passed away.\", \"You are told by a young relative that she has cancer and only six months to live.\", \"You have been dating someone and thought it looked quite promising, when the person calls you up and tells you he/she doesn\u2019t want to see you anymore.\", \"A pet you were really fond of has died.\", \"Your best friend just got married and is moving far away from you.\", \"No one remembers your birthday.\", \"A relative of yours, with whom you\u2019ve shared a close relationship, has been diagnosed as having cancer and has only a short time to live.\", \"A beloved pet dies of old age. You have very fond memories of your pet and are reminded of them every time you see a similar breed.\" ]; mood_scripts['neutral'] = [ // neutral \"You get up in the morning, get dressed and have your usual breakfast.\", \"You go to the supermarket and get a week\u2019s worth of groceries. You unload the bags from the car and put the food away.\", \"It is the evening and you are feeling tired. You have a long bath, wash your hair, and watch some television.\", \"You decide to clean your kitchen, and spend some time wiping down the counter tops and sweeping the floor.\", \"As you are driving you notice you are low on gas. You fill up your car from a nearby gas station and buy a drink while you are there.\", \"You go to a restaurant and order a starter and a main course. You have a glass of water with your meal.\", \"Whilst going for a walk you meet someone you know. You chat about the weather and your plans for the weekend.\", \"You and some friends go to your local cinema and watch a film. After it is finished you go home.\" ]; function generate_mood_induction(mood = 'happy') { if (mood_music[mood] === undefined) { throw 'Undefined mood was entered.'; } var pages = []; pages.push({ prompt: '<div id=centerbox>Please listen to the music for a minute.</div>', duration: 60 * time_unit }); let order = jsPsych.randomization.shuffle([...Array(mood_scripts[mood].length).keys()]) for (let ii of order) { pages.push({ prompt: \"<div id=centerbox>\" + mood_scripts[mood][ii] + \"</div>\", duration: 30 * time_unit }); } return { type: 'mood-induction', background_music: mood_music[mood], pages: pages, on_finish: function (data) { script_order = order.toString().replace(/,/g, ';'); mood_spent_time = data.view_history.toString().replace(/,/g, ';'); //console.log(pages); //console.log(script_order, mood_spent_time); } } } Change 5: Wrapping jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). You can pass mood via URL parameter, like ?mood=happy , and this script can read it by piping from an Embedded Data mood . /* Change 5: Wrapping jsPsych.init() in a function */ function initExp() { var mood = \"${e://Field/mood}\"; // experimental session-defining variables if (flag_debug) { // WARNING: WHEN DEPLOYING THIS, BE SURE TO CHANGE flag_debug to false // if true: make the button appear faster time_unit = 100; // ms instead of 1000 ms console.log('Entered mood: ', mood); } // push all the procedures, which are defined in stop-it_main.js to the overall timeline var timeline = []; // this array stores the events we want to run in the experiment // use the full screen // also playing sound only works after an interaction with user, like button press timeline.push({ type: 'fullscreen', message: '<p>Music will start to play when you press the button below.</p><br>', fullscreen_mode: true }); timeline.push(generate_mood_induction(mood)); timeline.push({ type: 'fullscreen', fullscreen_mode: false }); jsPsych.init({ display_element: 'display_stage', timeline: timeline, // see the Change 6 }); } Change 6: Adding the clean up and continue functions When the jsPsych ends, display_stage and display_stage_background should be removed. This script also saves additional data (script order and spent time)) to Qualtrics Embedded Data. After saving, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { /* Change 6: Adding the clean up and continue functions.*/ // save the induction-related data to Qualtrics Qualtrics.SurveyEngine.setEmbeddedData(\"mood_script_order\", script_order); Qualtrics.SurveyEngine.setEmbeddedData(\"mood_spent_time\", mood_spent_time); if (flag_debug) { console.log('Mood script order: ', script_order); console.log('Mood spent time: ', mood_spent_time); } // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }","title":"Embedding Mood Induction"},{"location":"mood-induction/#embedding-mood-induction-into-qualtrics","text":"The mood induction procedures by Mayer et al. (1995) and Marzillier & Davey (2005), which use both music and prompts, were implemented using jsPsych: happy , angry , fear , sad , and neutral . Before running an auditory task (like mood induction or dual n-back), you should make sure participants can listen to sound. To do so, I also made a quick audio test using jsPsych. You can first try the test by clicking HERE . See the Embedding Quick Audio Test tutorial to use this in Qualtrics. I uploaded these codes on the Mood Induction repository . You can either directly use these files or fork this repository to customize. This tutorial consists of two parts. (1) I will first explain how you can embed the mood induction in Qualtrics . (2) I will then explain the experiment code .","title":"Embedding Mood Induction into Qualtrics"},{"location":"mood-induction/#embedding-the-mood-induction-into-qualtrics","text":"","title":"Embedding the Mood Induction into Qualtrics"},{"location":"mood-induction/#hosting-the-mood-induction-scripts-in-github","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Go to the Mood Induction repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. Also make sure that sound files play on your browser. When you are done, you can check the online files with your browser by directly going to the jspsych.js , jspsych.css , jspsych-fullscreen.js , and jspsych-mood-induction.js . jspsych.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/jspsych.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css . jspsych-fullscreen.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/plugins/jspsych-fullscreen.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/plugins/jspsych-fullscreen.js . jspsych-mood-induction.js should be available at https://<your-github-username>.github.io/Mood-Induction_jsPsych/jspsych-mood-induction.js , like https://kywch.github.io/Mood-Induction_jsPsych/jspsych-mood-induction.js . Sound files are stored in the music folder and should be available online.","title":"Hosting the Mood Induction scripts in GitHub"},{"location":"mood-induction/#embedding-the-task-to-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Embedding the task to Qualtrics"},{"location":"mood-induction/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"mood-induction/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-mood-induction-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole mood-induction-qualtrics.js (click to see the code) into the editor. ALSO CHECK WHETHER THE URL, task_github , IS VALID.","title":"Step 2. Open the Question JavaScript editor and copy paste the whole mood-induction-qualtrics.js"},{"location":"mood-induction/#step-3-open-the-question-html-editor-and-copy-paste-the-below-html-code","text":"The Change 3 section of the mood-induction-demo.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of mood-induction-demo.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } #centerbox { width: 80vh; height: 20vh; position: relative; top: 40%; font-size: 22pt; line-height: normal; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the below html code"},{"location":"mood-induction/#step-4-create-embedded-data-elements","text":"To store the addition details about this audio test, you need to create the Embedded Data elements named mood , mood_script_order and mood_spent_time in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type mood Click Add a New Field and type mood_script_order Click Add a New Field and type mood_spent_time Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow","title":"Step 4. Create Embedded Data elements"},{"location":"mood-induction/#step-5-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same Audio Test running in Qualtrics. For example, try this Qualtrics link .","title":"Step 5. Publish and test!"},{"location":"mood-induction/#explaining-the-code","text":"For the basics, please read the Hello world tutorial .","title":"Explaining the code"},{"location":"mood-induction/#a-working-demo-in-a-local-browser-mood-induction-demohtml","text":"Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The changes in mood-induction-demo.html (click to see the code) are in the same order as in the Hello world tutorial . You should be able to run the audio test simply by opening mood-induction-demo.html in a browser. Let's look at each change.","title":"A working demo in a local browser: mood-induction-demo.html"},{"location":"mood-induction/#change-1-using-display_element","text":"By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* Change 1: Using `display_element` */ jsPsych.init({ timeline: timeline, display_element: 'display_stage' })","title":"Change 1: Using display_element"},{"location":"mood-induction/#change-2-adding-display_stage-css-and-div","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. The centerbox is where we put the text prompts. <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } #centerbox { width: 80vh; height: 20vh; position: relative; top: 40%; font-size: 22pt; line-height: normal; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Change 2: Adding display_stage CSS and Div"},{"location":"mood-induction/#change-3-adding-extra-scripts-for-qualtrics","text":"The below scripts are not necessary to run this task, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Mood-Induction_jsPsych/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div>","title":"Change 3: Adding extra scripts for Qualtrics"},{"location":"mood-induction/#qualtrics-transformation-mood-induction-qualtricsjs","text":"To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change.","title":"Qualtrics transformation: mood-induction-qualtrics.js"},{"location":"mood-induction/#change-1-hiding-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 1: Hiding the Next button"},{"location":"mood-induction/#change-2-defining-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. AFTER TESTING, CHANGE the flag_debug variable to false . /* Change 2: Defining and load required resources */ // task-related variables var flag_debug = true; var time_unit = 1000; // ms var mood_spent_time = ''; var script_order = ''; // requiredResources must include all the required JS files var task_github = \"https://kywch.github.io/Mood-Induction_jsPsych/\"; // https://<your-github-username>.github.io/<your-experiment-name> var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-fullscreen.js\", task_github + \"jspsych-mood-induction.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 2: Defining and load required resources"},{"location":"mood-induction/#change-3-appending-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 3: Appending the display_stage Div using jQuery"},{"location":"mood-induction/#change-4-adding-resources-scripts-and-helper-functions","text":"Note that the music-only duration is set to 60 s (or 6 s when flag_debug is true ) and the prompt duration is set to 30 s (or 3 s when flag_debug is true ). See inside the function generate_mood_induction to modify these. /* Change 4: Adding resouces, scripts, and helper functions */ var mood_music = { happy: task_github + 'music/Mazurka_HappyMIP.mp3', // happy angry: task_github + 'music/NightOnBaldMountain_AngerMIP.mp3', // angry fear: task_github + 'music/PsychoTheme_FearMIP.mp3', // fear sad: task_github + 'music/ChopinOpus28no6_SadMIP.mp3', // sad neutral: task_github + 'music/ChopinWaltz11_NeutralMIP.mp3' // neutral }; var mood_scripts = {}; mood_scripts['happy'] = [ // happy \"You just got a new job, and it's even better than you expected.\", \"You wake up on a Saturday after a number of wintry-cold rainy days, and the temperature is in the high sixties.\", \"You buy a lottery ticket and you win $100.00 instantly.\", \"You and a friend go to a nice restaurant. The meal, the conversation and the atmosphere are all perfect.\", \"You get out of class or work early. It\u2019s a beautiful day and you and some friends go out for ice cream.\", \"You spend a day in the mountains; the air is clean and sharp, the day sunny, and you take a swim in a beautiful lake.\", \"You unexpectedly run into someone you like. You go for coffee and have a great conversation. You discover you think alike, and share many of the same interests.\", \"It\u2019s your birthday and friends throw you a terrific surprise party.\" ]; mood_scripts['angry'] = [ // angry \"A student stole the exam in an important course you\u2019re taking. The teacher takes it out on everyone by making such a tough exam that you get a very low grade even though you understood the material.\", \"A friend of yours was assaulted by a convicted rapist just released on parole.\", \"Your boss decides to promote another employee who is related to him to a position he knew you wanted. He tells you that you didn\u2019t work hard enough, even though he knows you worked much harder and better than his relative.\", \"It\u2019s a very hot day, and you have been standing in a long, slow line at the Department of Motor Vehicles for over an hour. Kids are screaming all around you when two of the four clerks close their windows for no apparent reason.\", \"Someone put a big scratch in your car while it was parked in the lot and didn\u2019t even bother to leave a note.\", \"The landlord doesn\u2019t like you and has been accusing you of unsanitary conditions, even though you keep your apartment very clean. You arrive home only to see an eviction notice on your door.\", \"Somebody files false legal claim against you.\", \"You have had a long, busy day and the person you live with starts to complain about how you forgot to do something that you forgot to do.\" ] mood_scripts['fear'] = [ // fear \"You are riding alone in an elevator when a man walks in and pulls out a knife. He stares at you without saying what he wants.\", \"You\u2019re in an overcrowded carriage at the top of a ferris wheel when the mechanism malfunctions and the wheel jams. A thunder storm is developing, and the wheel sways in the wind, it\u2019s metal creaking.\", \"Your car breaks down on a back street in a dangerous part of the city. You start to go for help when you see several teenage boys walking toward you carrying weapons.\", \"You are driving down an unfamiliar road on a stormy night when your car skids out of control.\", \"You are driving down the road when a tractor trailer in the opposite direction crosses over into your lane.\", \"You\u2019re in your your bedroom late at night when you hear someone enter your apartment. No one else you know has a key.\", \"You\u2019re swimming in a dark lake and something big, slimy, and prickly brushes against your leg.\", \"You\u2019re having a nightmare about someone chasing you and you fall into a bottomless pit. You start to scream in your sleep.\" ]; mood_scripts['sad'] = [ // sad \"You read in the newspaper that a teacher you used to house-sit for recently passed away.\", \"You are told by a young relative that she has cancer and only six months to live.\", \"You have been dating someone and thought it looked quite promising, when the person calls you up and tells you he/she doesn\u2019t want to see you anymore.\", \"A pet you were really fond of has died.\", \"Your best friend just got married and is moving far away from you.\", \"No one remembers your birthday.\", \"A relative of yours, with whom you\u2019ve shared a close relationship, has been diagnosed as having cancer and has only a short time to live.\", \"A beloved pet dies of old age. You have very fond memories of your pet and are reminded of them every time you see a similar breed.\" ]; mood_scripts['neutral'] = [ // neutral \"You get up in the morning, get dressed and have your usual breakfast.\", \"You go to the supermarket and get a week\u2019s worth of groceries. You unload the bags from the car and put the food away.\", \"It is the evening and you are feeling tired. You have a long bath, wash your hair, and watch some television.\", \"You decide to clean your kitchen, and spend some time wiping down the counter tops and sweeping the floor.\", \"As you are driving you notice you are low on gas. You fill up your car from a nearby gas station and buy a drink while you are there.\", \"You go to a restaurant and order a starter and a main course. You have a glass of water with your meal.\", \"Whilst going for a walk you meet someone you know. You chat about the weather and your plans for the weekend.\", \"You and some friends go to your local cinema and watch a film. After it is finished you go home.\" ]; function generate_mood_induction(mood = 'happy') { if (mood_music[mood] === undefined) { throw 'Undefined mood was entered.'; } var pages = []; pages.push({ prompt: '<div id=centerbox>Please listen to the music for a minute.</div>', duration: 60 * time_unit }); let order = jsPsych.randomization.shuffle([...Array(mood_scripts[mood].length).keys()]) for (let ii of order) { pages.push({ prompt: \"<div id=centerbox>\" + mood_scripts[mood][ii] + \"</div>\", duration: 30 * time_unit }); } return { type: 'mood-induction', background_music: mood_music[mood], pages: pages, on_finish: function (data) { script_order = order.toString().replace(/,/g, ';'); mood_spent_time = data.view_history.toString().replace(/,/g, ';'); //console.log(pages); //console.log(script_order, mood_spent_time); } } }","title":"Change 4: Adding resources, scripts, and helper functions"},{"location":"mood-induction/#change-5-wrapping-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). You can pass mood via URL parameter, like ?mood=happy , and this script can read it by piping from an Embedded Data mood . /* Change 5: Wrapping jsPsych.init() in a function */ function initExp() { var mood = \"${e://Field/mood}\"; // experimental session-defining variables if (flag_debug) { // WARNING: WHEN DEPLOYING THIS, BE SURE TO CHANGE flag_debug to false // if true: make the button appear faster time_unit = 100; // ms instead of 1000 ms console.log('Entered mood: ', mood); } // push all the procedures, which are defined in stop-it_main.js to the overall timeline var timeline = []; // this array stores the events we want to run in the experiment // use the full screen // also playing sound only works after an interaction with user, like button press timeline.push({ type: 'fullscreen', message: '<p>Music will start to play when you press the button below.</p><br>', fullscreen_mode: true }); timeline.push(generate_mood_induction(mood)); timeline.push({ type: 'fullscreen', fullscreen_mode: false }); jsPsych.init({ display_element: 'display_stage', timeline: timeline, // see the Change 6 }); }","title":"Change 5: Wrapping jsPsych.init() in a function"},{"location":"mood-induction/#change-6-adding-the-clean-up-and-continue-functions","text":"When the jsPsych ends, display_stage and display_stage_background should be removed. This script also saves additional data (script order and spent time)) to Qualtrics Embedded Data. After saving, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { /* Change 6: Adding the clean up and continue functions.*/ // save the induction-related data to Qualtrics Qualtrics.SurveyEngine.setEmbeddedData(\"mood_script_order\", script_order); Qualtrics.SurveyEngine.setEmbeddedData(\"mood_spent_time\", mood_spent_time); if (flag_debug) { console.log('Mood script order: ', script_order); console.log('Mood spent time: ', mood_spent_time); } // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }","title":"Change 6: Adding the clean up and continue functions"},{"location":"n-back/","text":"N-Back Tutorial This tutorial covers creating an n-back task using timeline variables and dynamic parameters. The techniques covered here are probably useful in circumstances where you want to generate a sequence of trials that have some dependencies (like the current trial must sometimes be the same as the trial two items ago) and don't want to manually code a fixed sequence of items. Video Link Watch the tutorial on YouTube Experiment link Try the completed experiment Full experiment The video tutorial walks through setting up the n-back task but doesn't go through setting up instructions or showing the participant their data at the end. The full-experiment.html code adds both of these features. You can try the full experiment here .","title":"N-Back Tutorial"},{"location":"n-back/#n-back-tutorial","text":"This tutorial covers creating an n-back task using timeline variables and dynamic parameters. The techniques covered here are probably useful in circumstances where you want to generate a sequence of trials that have some dependencies (like the current trial must sometimes be the same as the trial two items ago) and don't want to manually code a fixed sequence of items.","title":"N-Back Tutorial"},{"location":"n-back/#video-link","text":"Watch the tutorial on YouTube","title":"Video Link"},{"location":"n-back/#experiment-link","text":"Try the completed experiment","title":"Experiment link"},{"location":"n-back/#full-experiment","text":"The video tutorial walks through setting up the n-back task but doesn't go through setting up instructions or showing the participant their data at the end. The full-experiment.html code adds both of these features. You can try the full experiment here .","title":"Full experiment"},{"location":"participants/","text":"Recruiting Participants for Your jsPsych Qualtrics Experiments The best advantage of using Qualtrics is that many participant recruiting services already offer easy tutorials for integrating Qualtrics with their services. One important thing that you must check is how participant IDs are handled, which varies from one service to another. In this tutorial, Saving Data with PHP , the Embedded Data workerId is determine the file name of each participant's experiment data. Should you use another name, you should also replace workerId with the name you use in the Qualtrics code var sbj_id = \"${e://Field/workerId}\"; . Before launching your experiment, DOUBLE CHECK if the experiment files are saved with correct participant ID. The beauty and peril of online experiments is the speed of data collection and thus the speed of spending money. Participant recruiting services and their Qualtrics integration tutorial I will keep adding the list below. If I missed something, please shoot me an email to choe_DOT_kyoung_AT_gmail_DOT_com . Thanks! Qualtrics.com: Assigning Randomized IDs , Panel Company Integration Your department's SONA System: External Study Credit Granting with Qualtrics Example tutorials from Pitt.edu and Missouristate.edu Cloudresearch (TurkPrime): WorkerID (And All MTurk Fields) Sent to Qualtrics Prolific: Recording participants` Prolific IDs in your study/survey","title":"Recruiting Participants"},{"location":"participants/#recruiting-participants-for-your-jspsych-qualtrics-experiments","text":"The best advantage of using Qualtrics is that many participant recruiting services already offer easy tutorials for integrating Qualtrics with their services. One important thing that you must check is how participant IDs are handled, which varies from one service to another. In this tutorial, Saving Data with PHP , the Embedded Data workerId is determine the file name of each participant's experiment data. Should you use another name, you should also replace workerId with the name you use in the Qualtrics code var sbj_id = \"${e://Field/workerId}\"; . Before launching your experiment, DOUBLE CHECK if the experiment files are saved with correct participant ID. The beauty and peril of online experiments is the speed of data collection and thus the speed of spending money.","title":"Recruiting Participants for Your jsPsych Qualtrics Experiments"},{"location":"rc-rage/","text":"Embedding Reactive AGression Task (RC-RAGE) into Qualtrics An improved costly-reactive-aggression paradigm, called Retaliate or Carry-on: Reactive AGression Experiment (RC-RAGE) , by Meidenbauer, Choe, Bakkour, Inzlicht & Berman (2021) was implemented using jsPsych. You can first try the task by clicking HERE . The RC-RAGE code is freely available at the RC-RAGE GitHub repository . You can either directly use these files for your study or fork this repository to customize. This tutorial consists of two parts. (1) I will first explain how you can embed RC-RAGE in Qualtrics . (2) I will then explain the experiment code . Embedding RC-RAGE into Qualtrics Hosting the RC-RAGE scripts in GitHub To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Go to the RC-RAGE GitHub repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. Also make sure that sound files play on your browser. When you are done, you can check the online files with your browser by directly going to the jspsych.js , rc-rage.css , jspsych-fullscreen.js , and rc-rage_main.js . jspsych.js should be available at https://<your-github-username>.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/jspsych.js , like https://kywch.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/jspsych.js . rc-rage.css should be available at https://<your-github-username>.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/css/jspsych.css , like https://kywch.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/css/jspsych.css . jspsych-fullscreen.js should be available at https://<your-github-username>.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/plugins/jspsych-fullscreen.js , like https://kywch.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/plugins/jspsych-fullscreen.js . rc-rage_main.js should be available at https://<your-github-username>.github.io/RC-RAGE_jsPsych/lib/jspsych-mood-induction.js , like https://kywch.github.io/RC-RAGE_jsPsych/lib/rc-rage_main.js . Sound files are stored in the sounds folder and should be available to play online. Embedding the task to Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole rc-rage-qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole rc-rage-qualtrics.js (click to see the code) into the editor. ALSO CHECK WHETHER THE URL, task_github , IS VALID. Step 3. Open the Question HTML editor and copy paste the below html code The Change 3 section of the rc-rage-demo.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of rc-rage-demo.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Step 2: Add `display_stage` CSS, DIV, and extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/RC-RAGE_jsPsych/lib/rc-rage.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below. Step 4. Create Embedded Data elements To store the addition details about this audio test, you need to create the Embedded Data elements named bonus , click_cnt , finished_trial_cnt , provoked_cnt , kill_cnt , planned_trial , and wasted_click_history in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type bonus Click Add a New Field and type click_cnt Click Add a New Field and type finished_trial_cnt Click Add a New Field and type provoked_cnt Click Add a New Field and type kill_cnt Click Add a New Field and type planned_trial Click Add a New Field and type wasted_click_history Click Add a New Field and type trial_data Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow Step 5. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same Audio Test running in Qualtrics. For example, try this Qualtrics link . Explaining the code For the basics, please read the Hello world tutorial . A working demo in a local browser: rc-rage-demo.html You should be able to run RC-RAGE simply by opening rc-rage-demo.html in a browser (with all other files downloaded in put into the folder like the GitHub repo). I broke down the html file into 5 steps/parts. Let's look at each step. Step 1. Define and load required resources RC-RAGE uses jQuery, so it should be loaded. Also, the below scripts load all the necessary files. <!-- Step 1. Define and load required resources --> <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'></script> <script src='lib/jspsych-6.1.0/jspsych.js'></script> <script src='lib/jspsych-6.1.0/plugins/jspsych-fullscreen.js'></script> <script src='lib/jspsych-6.1.0/plugins/jspsych-instructions.js'></script> <script src='lib/jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js'></script> <script src='lib/jspsych-audio-keyboard-with-replay.js'></script> <script src='lib/jspsych-rc-rage.js'></script> <script src='lib/rc-rage_main.js'></script> Step 2: Add display_stage CSS, DIV, and extra scripts for Qualtrics The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <!-- Step 2: Add `display_stage` CSS, DIV, and extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/RC-RAGE_jsPsych/lib/rc-rage.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> Step 3: Define the experiment flow The below scripts construct an experiment session using the functions defined in the rc-rage_main.js file, which are get_instruction_imglist , generate_instruction_block , generate_practice_block , and generate_main_block . Please see the rc-rage_main.js (click to see the code) for their definitions. /* Step 3: Define the experiment flow */ // NOTE that the functions used below are defined in `rc-rage_main.js` for readability var instr_url = 'instruction/'; var instr_imglist = get_instruction_imglist(instr_url, 30); var jspsych_session = []; // use the full screen jspsych_session.push({ type: 'fullscreen', fullscreen_mode: true }); jspsych_session.push({ timeline: generate_instruction_block(instr_imglist) }); jspsych_session.push({ timeline: generate_practice_block() }); jspsych_session.push({ timeline: generate_main_block() }); Step 4: Show the aggregate session-level data To aggregate session-level data eaily, rc-rage_main.js has defined main_score , main_seq , click_history , and wasted_click_history . The below script takes advantage of these variables rather than going through the all raw data and shows the aggregated results for debugging. In the actual study, we only showed the bonus amount. /* Step 4: Show the aggregate session-level data */ // NOTE that main_score, main_seq, click_history, wasted_click_history are defined in rc-rage_main.js // The below lines take advantage of these rather than going through the raw data jspsych_session.push({ type: \"html-keyboard-response\", stimulus: function () { // performance-based bonus in dollar (in string) let bonus = (main_score / 100).toFixed(2); // the trial sequence (specifies when the robber appears) let trial_seq = main_seq; trial_seq.forEach(function (item, ii) { if (item > 1000) trial_seq[ii] = -1; // robber did not appear }); trial_seq = trial_seq.toString().replace(/,/g, ';'); // participants' click counts for each trial let click_cnt = click_history.reduce(function (a, b) { return (a + b); }).toString(); // completed trials (within the time limit) var comp_trial_cnt = wasted_click_history.filter(x => x >= 0).length; // the number of trials, in which the robber appeared var provoked_cnt = main_seq.slice(0, comp_trial_cnt).filter(x => x > 0).length; // the number of trials, in which the robber was killed by retailation var kill_cnt = wasted_click_history.filter(x => x > 0).length; return \"<div class = centerbox><p><p>\" + \"<p class = block-text>Your performance-based bonus: $\" + bonus + \"</p>\" + \"<p class = block-text>Number of completed trials: \" + comp_trial_cnt + \" out of \" + main_seq.length .toString() + \"</p>\" + \"<p class = block-text>Number of provocations: \" + provoked_cnt + \"</p>\" + \"<p class = block-text>Number of retaliations: \" + kill_cnt + \"</p>\" + \"<p class = block-text>Press any key to complete the experiment. Thank you!</p></div>\"; } }); Step 5: Run the experiment /* Step 5: Run the experiment. */ jsPsych.init({ display_element: 'display_stage', timeline: jspsych_session, preload_images: instr_imglist, exclusions: { // browser window needs to have these dimensions, if not, participants get the chance to maximize their window, if they don't support this resolution when maximized they can't particiate. min_width: 1000, min_height: 700 } }); Qualtrics transformation: rc-rage-qualtrics.js To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change. Change 1: Hiding the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 2: Defining and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. /* Change 2: Defining and loading required resources */ // `requiredResources` must include all the required JS files var task_github = \"https://kywch.github.io/RC-RAGE_jsPsych/\"; // https://<your-github-username>.github.io/<your-experiment-name> var requiredResources = [ task_github + \"lib/jspsych-6.1.0/jspsych.js\", task_github + \"lib/jspsych-6.1.0/plugins/jspsych-fullscreen.js\", task_github + \"lib/jspsych-6.1.0/plugins/jspsych-instructions.js\", task_github + \"lib/jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\", task_github + \"lib/jspsych-audio-keyboard-with-replay.js\", task_github + \"lib/jspsych-rc-rage.js\", task_github + \"lib/rc-rage_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 3: Appending the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 4: Wrapping jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). /* Change 4: Wrapping jsPsych.init() in a function */ function initExp() { // these are to pre-load instruction images var instr_url = task_github + 'instruction/'; var instr_imglist = get_instruction_imglist(instr_url, 30); // push all the procedures, which are defined in stop-it_main.js to the overall timeline var jspsych_session = []; // this array stores the events we want to run in the experiment // use the full screen jspsych_session.push({ type: 'fullscreen', fullscreen_mode: true }); jspsych_session.push({ timeline: generate_instruction_block(instr_imglist) }); jspsych_session.push({ timeline: generate_practice_block() }); jspsych_session.push({ timeline: generate_main_block() }); // exit the full screen jspsych_session.push({ type: 'fullscreen', fullscreen_mode: false }); jsPsych.init({ display_element: 'display_stage', timeline: jspsych_session, preload_images: instr_imglist, exclusions: { // browser window needs to have these dimensions, if not, participants get the chance to maximize their window, if they don't support this resolution when maximized they can't particiate. min_width: 1000, min_height: 700 }, // see the Change 5 }); Changes 5-6: Summarizing and saving the results, then finishing the study This script saves additional data (script order and spent time)) to Qualtrics Embedded Data to simplify the analysis. The trial_data is a csv-like string with space (' ') as the delimiter and semicolor (';') as the newline character. The columns are: trial, steal_timing, finish_code, click_cnt, extra_click, points, rt, time_remain. This string can be turned into the csv format by this python command. Please see this google colab page for a working example. # python code result_csv = result_string.strip().replace(';', '\\n').replace(' ', ',') When the jsPsych ends, display_stage and display_stage_background should be removed. After saving, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { /* Change 5: Summarizing and saving the results, then finishing the study */ // NOTE that main_score, main_seq, click_history, wasted_click_history // are all alreday defined in rc-rage_main.js // The below lines take advantage of these variables rather than going through the raw data // performance-based bonus in dollar (in string) let bonus = (main_score / 100).toFixed(2); // the trial sequence (specifies when the robber appears) let trial_seq = main_seq; trial_seq.forEach(function (item, ii) { if (item > 1000) trial_seq[ii] = -1; // robber did not appear }); trial_seq = trial_seq.toString().replace(/,/g, ';'); // participants' click counts for each trial let click_cnt = click_history.reduce(function (a, b) { return (a + b); }).toString(); // completed trials (within the time limit) var comp_trial_cnt = wasted_click_history.filter(x => x >= 0).length; // the number of trials, in which the robber appeared var provoked_cnt = main_seq.slice(0, comp_trial_cnt).filter(x => x > 0).length; // the number of trials, in which the robber was killed by retailation var kill_cnt = wasted_click_history.filter(x => x > 0).length; // save the session-level data to Qualtrics Qualtrics.SurveyEngine.setEmbeddedData(\"bonus\", bonus); Qualtrics.SurveyEngine.setEmbeddedData(\"click_cnt\", click_cnt); Qualtrics.SurveyEngine.setEmbeddedData(\"finished_trial_cnt\", comp_trial_cnt); Qualtrics.SurveyEngine.setEmbeddedData(\"provoked_cnt\", provoked_cnt); Qualtrics.SurveyEngine.setEmbeddedData(\"kill_cnt\", kill_cnt); // the simple trial-level data // NOTE that detailed trial-level data are not saved here, but it can be done. Qualtrics.SurveyEngine.setEmbeddedData(\"planned_trial\", trial_seq); Qualtrics.SurveyEngine.setEmbeddedData(\"wasted_click_history\", wasted_click_history.toString().replace(/,/g, ';')); /* Change 6: Saving the trial-level data and finishing up */ // save the data Qualtrics.SurveyEngine.setEmbeddedData(\"trial_data\", result_string); function sleep(time) { return new Promise((resolve) => setTimeout(resolve, time)); } sleep(500).then(() => { saved_string = Qualtrics.SurveyEngine.getEmbeddedData(\"trial_data\"); //console.log(saved_string); if (result_string !== saved_string) { console.log('There was a problem with saving data. Trying again...') // try to save it once more, but no guarantee Qualtrics.SurveyEngine.setEmbeddedData(\"trial_data\", result_string); } else { console.log('Save was successful.') } }); sleep(500).then(() => { // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }); } });","title":"Embedding Reactive AGression Task"},{"location":"rc-rage/#embedding-reactive-agression-task-rc-rage-into-qualtrics","text":"An improved costly-reactive-aggression paradigm, called Retaliate or Carry-on: Reactive AGression Experiment (RC-RAGE) , by Meidenbauer, Choe, Bakkour, Inzlicht & Berman (2021) was implemented using jsPsych. You can first try the task by clicking HERE . The RC-RAGE code is freely available at the RC-RAGE GitHub repository . You can either directly use these files for your study or fork this repository to customize. This tutorial consists of two parts. (1) I will first explain how you can embed RC-RAGE in Qualtrics . (2) I will then explain the experiment code .","title":"Embedding Reactive AGression Task (RC-RAGE) into Qualtrics"},{"location":"rc-rage/#embedding-rc-rage-into-qualtrics","text":"","title":"Embedding RC-RAGE into Qualtrics"},{"location":"rc-rage/#hosting-the-rc-rage-scripts-in-github","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Go to the RC-RAGE GitHub repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. Also make sure that sound files play on your browser. When you are done, you can check the online files with your browser by directly going to the jspsych.js , rc-rage.css , jspsych-fullscreen.js , and rc-rage_main.js . jspsych.js should be available at https://<your-github-username>.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/jspsych.js , like https://kywch.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/jspsych.js . rc-rage.css should be available at https://<your-github-username>.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/css/jspsych.css , like https://kywch.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/css/jspsych.css . jspsych-fullscreen.js should be available at https://<your-github-username>.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/plugins/jspsych-fullscreen.js , like https://kywch.github.io/RC-RAGE_jsPsych/lib/jspsych-6.1.0/plugins/jspsych-fullscreen.js . rc-rage_main.js should be available at https://<your-github-username>.github.io/RC-RAGE_jsPsych/lib/jspsych-mood-induction.js , like https://kywch.github.io/RC-RAGE_jsPsych/lib/rc-rage_main.js . Sound files are stored in the sounds folder and should be available to play online.","title":"Hosting the RC-RAGE scripts in GitHub"},{"location":"rc-rage/#embedding-the-task-to-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Embedding the task to Qualtrics"},{"location":"rc-rage/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"rc-rage/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-rc-rage-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole rc-rage-qualtrics.js (click to see the code) into the editor. ALSO CHECK WHETHER THE URL, task_github , IS VALID.","title":"Step 2. Open the Question JavaScript editor and copy paste the whole rc-rage-qualtrics.js"},{"location":"rc-rage/#step-3-open-the-question-html-editor-and-copy-paste-the-below-html-code","text":"The Change 3 section of the rc-rage-demo.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of rc-rage-demo.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Step 2: Add `display_stage` CSS, DIV, and extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/RC-RAGE_jsPsych/lib/rc-rage.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the below html code"},{"location":"rc-rage/#step-4-create-embedded-data-elements","text":"To store the addition details about this audio test, you need to create the Embedded Data elements named bonus , click_cnt , finished_trial_cnt , provoked_cnt , kill_cnt , planned_trial , and wasted_click_history in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type bonus Click Add a New Field and type click_cnt Click Add a New Field and type finished_trial_cnt Click Add a New Field and type provoked_cnt Click Add a New Field and type kill_cnt Click Add a New Field and type planned_trial Click Add a New Field and type wasted_click_history Click Add a New Field and type trial_data Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow","title":"Step 4. Create Embedded Data elements"},{"location":"rc-rage/#step-5-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same Audio Test running in Qualtrics. For example, try this Qualtrics link .","title":"Step 5. Publish and test!"},{"location":"rc-rage/#explaining-the-code","text":"For the basics, please read the Hello world tutorial .","title":"Explaining the code"},{"location":"rc-rage/#a-working-demo-in-a-local-browser-rc-rage-demohtml","text":"You should be able to run RC-RAGE simply by opening rc-rage-demo.html in a browser (with all other files downloaded in put into the folder like the GitHub repo). I broke down the html file into 5 steps/parts. Let's look at each step.","title":"A working demo in a local browser: rc-rage-demo.html"},{"location":"rc-rage/#step-1-define-and-load-required-resources","text":"RC-RAGE uses jQuery, so it should be loaded. Also, the below scripts load all the necessary files. <!-- Step 1. Define and load required resources --> <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'></script> <script src='lib/jspsych-6.1.0/jspsych.js'></script> <script src='lib/jspsych-6.1.0/plugins/jspsych-fullscreen.js'></script> <script src='lib/jspsych-6.1.0/plugins/jspsych-instructions.js'></script> <script src='lib/jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js'></script> <script src='lib/jspsych-audio-keyboard-with-replay.js'></script> <script src='lib/jspsych-rc-rage.js'></script> <script src='lib/rc-rage_main.js'></script>","title":"Step 1. Define and load required resources"},{"location":"rc-rage/#step-2-add-display_stage-css-div-and-extra-scripts-for-qualtrics","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <!-- Step 2: Add `display_stage` CSS, DIV, and extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/RC-RAGE_jsPsych/lib/rc-rage.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"> <b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Step 2: Add display_stage CSS, DIV, and extra scripts for Qualtrics"},{"location":"rc-rage/#step-3-define-the-experiment-flow","text":"The below scripts construct an experiment session using the functions defined in the rc-rage_main.js file, which are get_instruction_imglist , generate_instruction_block , generate_practice_block , and generate_main_block . Please see the rc-rage_main.js (click to see the code) for their definitions. /* Step 3: Define the experiment flow */ // NOTE that the functions used below are defined in `rc-rage_main.js` for readability var instr_url = 'instruction/'; var instr_imglist = get_instruction_imglist(instr_url, 30); var jspsych_session = []; // use the full screen jspsych_session.push({ type: 'fullscreen', fullscreen_mode: true }); jspsych_session.push({ timeline: generate_instruction_block(instr_imglist) }); jspsych_session.push({ timeline: generate_practice_block() }); jspsych_session.push({ timeline: generate_main_block() });","title":"Step 3: Define the experiment flow"},{"location":"rc-rage/#step-4-show-the-aggregate-session-level-data","text":"To aggregate session-level data eaily, rc-rage_main.js has defined main_score , main_seq , click_history , and wasted_click_history . The below script takes advantage of these variables rather than going through the all raw data and shows the aggregated results for debugging. In the actual study, we only showed the bonus amount. /* Step 4: Show the aggregate session-level data */ // NOTE that main_score, main_seq, click_history, wasted_click_history are defined in rc-rage_main.js // The below lines take advantage of these rather than going through the raw data jspsych_session.push({ type: \"html-keyboard-response\", stimulus: function () { // performance-based bonus in dollar (in string) let bonus = (main_score / 100).toFixed(2); // the trial sequence (specifies when the robber appears) let trial_seq = main_seq; trial_seq.forEach(function (item, ii) { if (item > 1000) trial_seq[ii] = -1; // robber did not appear }); trial_seq = trial_seq.toString().replace(/,/g, ';'); // participants' click counts for each trial let click_cnt = click_history.reduce(function (a, b) { return (a + b); }).toString(); // completed trials (within the time limit) var comp_trial_cnt = wasted_click_history.filter(x => x >= 0).length; // the number of trials, in which the robber appeared var provoked_cnt = main_seq.slice(0, comp_trial_cnt).filter(x => x > 0).length; // the number of trials, in which the robber was killed by retailation var kill_cnt = wasted_click_history.filter(x => x > 0).length; return \"<div class = centerbox><p><p>\" + \"<p class = block-text>Your performance-based bonus: $\" + bonus + \"</p>\" + \"<p class = block-text>Number of completed trials: \" + comp_trial_cnt + \" out of \" + main_seq.length .toString() + \"</p>\" + \"<p class = block-text>Number of provocations: \" + provoked_cnt + \"</p>\" + \"<p class = block-text>Number of retaliations: \" + kill_cnt + \"</p>\" + \"<p class = block-text>Press any key to complete the experiment. Thank you!</p></div>\"; } });","title":"Step 4: Show the aggregate session-level data"},{"location":"rc-rage/#step-5-run-the-experiment","text":"/* Step 5: Run the experiment. */ jsPsych.init({ display_element: 'display_stage', timeline: jspsych_session, preload_images: instr_imglist, exclusions: { // browser window needs to have these dimensions, if not, participants get the chance to maximize their window, if they don't support this resolution when maximized they can't particiate. min_width: 1000, min_height: 700 } });","title":"Step 5: Run the experiment"},{"location":"rc-rage/#qualtrics-transformation-rc-rage-qualtricsjs","text":"To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change.","title":"Qualtrics transformation: rc-rage-qualtrics.js"},{"location":"rc-rage/#change-1-hiding-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 1: Hiding the Next button"},{"location":"rc-rage/#change-2-defining-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. /* Change 2: Defining and loading required resources */ // `requiredResources` must include all the required JS files var task_github = \"https://kywch.github.io/RC-RAGE_jsPsych/\"; // https://<your-github-username>.github.io/<your-experiment-name> var requiredResources = [ task_github + \"lib/jspsych-6.1.0/jspsych.js\", task_github + \"lib/jspsych-6.1.0/plugins/jspsych-fullscreen.js\", task_github + \"lib/jspsych-6.1.0/plugins/jspsych-instructions.js\", task_github + \"lib/jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\", task_github + \"lib/jspsych-audio-keyboard-with-replay.js\", task_github + \"lib/jspsych-rc-rage.js\", task_github + \"lib/rc-rage_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 2: Defining and load required resources"},{"location":"rc-rage/#change-3-appending-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 3: Appending the display_stage Div using jQuery"},{"location":"rc-rage/#change-4-wrapping-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). /* Change 4: Wrapping jsPsych.init() in a function */ function initExp() { // these are to pre-load instruction images var instr_url = task_github + 'instruction/'; var instr_imglist = get_instruction_imglist(instr_url, 30); // push all the procedures, which are defined in stop-it_main.js to the overall timeline var jspsych_session = []; // this array stores the events we want to run in the experiment // use the full screen jspsych_session.push({ type: 'fullscreen', fullscreen_mode: true }); jspsych_session.push({ timeline: generate_instruction_block(instr_imglist) }); jspsych_session.push({ timeline: generate_practice_block() }); jspsych_session.push({ timeline: generate_main_block() }); // exit the full screen jspsych_session.push({ type: 'fullscreen', fullscreen_mode: false }); jsPsych.init({ display_element: 'display_stage', timeline: jspsych_session, preload_images: instr_imglist, exclusions: { // browser window needs to have these dimensions, if not, participants get the chance to maximize their window, if they don't support this resolution when maximized they can't particiate. min_width: 1000, min_height: 700 }, // see the Change 5 });","title":"Change 4: Wrapping jsPsych.init() in a function"},{"location":"rc-rage/#changes-5-6-summarizing-and-saving-the-results-then-finishing-the-study","text":"This script saves additional data (script order and spent time)) to Qualtrics Embedded Data to simplify the analysis. The trial_data is a csv-like string with space (' ') as the delimiter and semicolor (';') as the newline character. The columns are: trial, steal_timing, finish_code, click_cnt, extra_click, points, rt, time_remain. This string can be turned into the csv format by this python command. Please see this google colab page for a working example. # python code result_csv = result_string.strip().replace(';', '\\n').replace(' ', ',') When the jsPsych ends, display_stage and display_stage_background should be removed. After saving, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { /* Change 5: Summarizing and saving the results, then finishing the study */ // NOTE that main_score, main_seq, click_history, wasted_click_history // are all alreday defined in rc-rage_main.js // The below lines take advantage of these variables rather than going through the raw data // performance-based bonus in dollar (in string) let bonus = (main_score / 100).toFixed(2); // the trial sequence (specifies when the robber appears) let trial_seq = main_seq; trial_seq.forEach(function (item, ii) { if (item > 1000) trial_seq[ii] = -1; // robber did not appear }); trial_seq = trial_seq.toString().replace(/,/g, ';'); // participants' click counts for each trial let click_cnt = click_history.reduce(function (a, b) { return (a + b); }).toString(); // completed trials (within the time limit) var comp_trial_cnt = wasted_click_history.filter(x => x >= 0).length; // the number of trials, in which the robber appeared var provoked_cnt = main_seq.slice(0, comp_trial_cnt).filter(x => x > 0).length; // the number of trials, in which the robber was killed by retailation var kill_cnt = wasted_click_history.filter(x => x > 0).length; // save the session-level data to Qualtrics Qualtrics.SurveyEngine.setEmbeddedData(\"bonus\", bonus); Qualtrics.SurveyEngine.setEmbeddedData(\"click_cnt\", click_cnt); Qualtrics.SurveyEngine.setEmbeddedData(\"finished_trial_cnt\", comp_trial_cnt); Qualtrics.SurveyEngine.setEmbeddedData(\"provoked_cnt\", provoked_cnt); Qualtrics.SurveyEngine.setEmbeddedData(\"kill_cnt\", kill_cnt); // the simple trial-level data // NOTE that detailed trial-level data are not saved here, but it can be done. Qualtrics.SurveyEngine.setEmbeddedData(\"planned_trial\", trial_seq); Qualtrics.SurveyEngine.setEmbeddedData(\"wasted_click_history\", wasted_click_history.toString().replace(/,/g, ';')); /* Change 6: Saving the trial-level data and finishing up */ // save the data Qualtrics.SurveyEngine.setEmbeddedData(\"trial_data\", result_string); function sleep(time) { return new Promise((resolve) => setTimeout(resolve, time)); } sleep(500).then(() => { saved_string = Qualtrics.SurveyEngine.getEmbeddedData(\"trial_data\"); //console.log(saved_string); if (result_string !== saved_string) { console.log('There was a problem with saving data. Trying again...') // try to save it once more, but no guarantee Qualtrics.SurveyEngine.setEmbeddedData(\"trial_data\", result_string); } else { console.log('Save was successful.') } }); sleep(500).then(() => { // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }); } });","title":"Changes 5-6: Summarizing and saving the results, then finishing the study"},{"location":"rt-task/","text":"Embedding the jsPsych Simple Reaction Time Task into Qualtrics WARNING!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial may not work with jsPsych v7.x and above. You can get jsPsych v6.3.1 (the last jsPsych 6.x release) from here . Here, I used v6.1.0 , which is not much different from v6.3.1 Let's try to embed a more complicated task, the original jsPsych v6.3 Simple Reaction Time Task , to qualtrics. You can first try the task by clicking HERE . The start: demo-simple-rt-task.html The original experiment code, demo-simple-rt-task.html is here . Let's make the code work in a separate folder like the hello-world example . To do so, you need to change the url of jsPsych scripts, stylesheet, and stimuli of the experiment code. In this tutorial, we will change those twice to make the rt-task (1) run on a new folder and (2) use the GitHub-hosted resources. First, let's make it run locally. To do so, The jsPsych library, plugins, and stylesheet come from the local folder. As you can see, the demo-simple-rt-task.html in this repository looks at the local jspsych-6.1.0 folder for these files. <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\"></script> <link rel=\"stylesheet\" href=\"jspsych-6.1.0/css/jspsych.css\"></link> The experiment also needs stimuli images (see the original jsPsych v6.3 tutorial ). So, you need to create a folder called img in the experiment folder and copy blue.png and orange.png into the img folder. Your folder should look like this. Hosting this task in GitHub To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Step 0. Create a GitHub account Go to the GitHub site and create your account. Step 1. Create a new GitHub repository First, create a repository for your experiment by following this Create a repo guide . Step 2. Add experiment files to the repository Upload your experiment files to the repository. The easy way is to drag and drop your files like this Adding a file to a repository guide . Do NOT forget to click the Commit changes button. My Simple-RT-Task repository looks like this: https://github.com/kywch/Simple-RT-Task/ . Step 3. Click the Settings button Click the Settings button on the repository home page. Step 4. Enable GitHub Pages for your experiment Scroll down and find the GitHub Pages section. Select the Source to be the master branch . Within a few minutes, a website will be available at https://<your-github-username>.github.io/<your-experiment-name>/ . How do you know the page is up and running? Well, let's try to access the jspsych.css file by going into https://<your-github-username>.github.io/<your-experiment-name>/jspsych-6.1.0/css/jspsych.css . For example, https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css . WAIT, did you know? Did you know that you also accidentally made your task online that anyone with the Internet can try your task? Open your browser and go to https://<your-github-username>.github.io/<your-experiment-name>/demo-simple-rt-task.html , or try mine: https://kywch.github.io/Simple-RT-Task/demo-simple-rt-task.html . If your expeirment doesnt' work, (this may sound silly but worked for me) try to turn off and on the GitHub Pages multiple times (i.e., switching the Source to be None and master branch ). First transformation: demo-simple-rt-task-transformed.html and rt-task_main.js I prefer to separate out the experiment-related code from the operation-related code, following the Experiment Factory style. If you haven't, please visit the Experiment Factory library , which contain a ton of experiments with running demos and their code. In the demo-simple-rt-task.html , constructing the timeline can be considered to be experiment-related, and the remaining parts that also appear in the Hello-World example , such as loading jspsych.js and jsPsych.init() can be considered to be operation-related. Here, I am separating the experiment-related code and the operation-related code and putting the code into rt-task_main.js and demo-simple-rt-task-transformed.html , respectively, by following steps: Step 1. Copy demo-simple-rt-task.html to demo-simple-rt-task-transformed.html Step 2. Create a new file rt-task_main.js And open rt-task_main.js in a new editor window. Step 3. Cut and paste the experiment-related code Open demo-simple-rt-task-transformed.html . You should have both rt-task_main.js and demo-simple-rt-task-transformed.html opened. Select the code from the /* create timeline */ line to the timeline.push(debrief_block); line, cut the selection , and paste it to rt-task_main.js . REPEAT . The code is being cut-and-pasted (NOT copy-pasted). /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome_block = { type: \"html-keyboard-response\", stimulus: \"Welcome to the experiment. Press any key to begin.\" }; timeline.push(welcome_block); /* define instructions trial */ var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\"+ \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\"+ \"<p>Press any key to begin.</p>\", post_trial_gap: 2000 }; timeline.push(instructions); /* test trials */ var test_stimuli = [ { stimulus: \"img/blue.png\", data: { test_part: 'test', correct_response: 'f' } }, { stimulus: \"img/orange.png\", data: { test_part: 'test', correct_response: 'j' } } ]; var fixation = { type: 'html-keyboard-response', stimulus: '<div style=\"font-size:60px;\">+</div>', choices: jsPsych.NO_KEYS, trial_duration: function(){ return jsPsych.randomization.sampleWithoutReplacement([250, 500, 750, 1000, 1250, 1500, 1750, 2000], 1)[0]; }, data: {test_part: 'fixation'} } var test = { type: \"image-keyboard-response\", stimulus: jsPsych.timelineVariable('stimulus'), choices: ['f', 'j'], data: jsPsych.timelineVariable('data'), on_finish: function(data){ data.correct = data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode(data.correct_response); }, } var test_procedure = { timeline: [fixation, test], timeline_variables: test_stimuli, repetitions: 5, randomize_order: true } timeline.push(test_procedure); /* define debrief */ var debrief_block = { type: \"html-keyboard-response\", stimulus: function() { var trials = jsPsych.data.get().filter({test_part: 'test'}); var correct_trials = trials.filter({correct: true}); var accuracy = Math.round(correct_trials.count() / trials.count() * 100); var rt = Math.round(correct_trials.select('rt').mean()); return \"<p>You responded correctly on \"+accuracy+\"% of the trials.</p>\"+ \"<p>Your average response time was \"+rt+\"ms.</p>\"+ \"<p>Press any key to complete the experiment. Thank you!</p>\"; } }; timeline.push(debrief_block); Step 4. rt-task_main.js : Use the GitHub-hosted stimuli images The above code uses the stimuli images in the img folder placed with the experiment html. But since you also put these images in your GitHub repository and made these available through the Internet, you can also use these images. The img/blue.png is available at https://<your-github-username>.github.io/<your-experiment-name>/img/blue.png . For example, https://kywch.github.io/Simple-RT-Task/img/blue.png . And, the img/orange.png is available at https://<your-github-username>.github.io/<your-experiment-name>/img/orange.png . For example, https://kywch.github.io/Simple-RT-Task/img/orange.png . The rt-task_main.js in this tutorial has a few changes to use the GitHub-hosted images. Let's see these changes. Change 1: Adding the image hosting site The repo_site variable was added to locate the site that hosts stimuli images. You can easily use your repository by changing this line. // define the site that hosts stimuli images // usually https://<your-github-username>.github.io/<your-experiment-name>/ var repo_site = \"https://kywch.github.io/Simple-RT-Task/\"; Change 2: Adding repo_site in instructions The repo_site variable should be added to wherever img/blue.png and img/orange.png are used like the below. The find function really helps in doing so. var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='\" + repo_site + \"img/blue.png'></img>\" + // Change 2: Adding `repo_site` in `instructions` \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='\" + repo_site + \"img/orange.png'></img>\" + // Change 2: Adding `repo_site` in `instructions` \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\", post_trial_gap: 2000 }; Change 3: Adding repo_site in test_stimuli var test_stimuli = [{ stimulus: repo_site + \"img/blue.png\", // Change 3: Adding `repo_site` in `test_stimuli` data: { test_part: 'test', correct_response: 'f' } }, { stimulus: repo_site + \"img/orange.png\", // Change 3: Adding `repo_site` in `test_stimuli` data: { test_part: 'test', correct_response: 'j' } } ]; Step 5. demo-simple-rt-task-transformed.html : Import rt-task_main.js Cutting the experiment-related code makes the demo-simple-rt-task-transformed.html file much shorter. To make demo-simple-rt-task-transformed.html work, you need to load rt-task_main.js by using a <script> tag like the other jspsych plugin files (see the original jsPsych v6.3 tutorial ). <!-- CHANGE: Loading the external main experiment script --> <script src=\"rt-task_main.js\"></script> After making these changes, don't forget to SAVE ! Does this work? Let's find out by opening demo-simple-rt-task-transformed.html in a browser. Step 6: Upload demo-simple-rt-task-transformed.html and rt-task_main.js to GitHub If this works, let's upload demo-simple-rt-task-transformed.html and rt-task_main.js to your GitHub repository so that your task also runs over the Internet. After uploading both scripts (and waiting for a few minutes), you should be able to access https://<your-github-username>.github.io/<your-experiment-name>/demo-simple-rt-task-transformed.html . For example, https://kywch.github.io/Simple-RT-Task/demo-simple-rt-task-transformed.html . If the above link works, then it also means that the experiment-related code, rt-task_main.js , is also available for Qualtrics to load. You can actually access it by going to https://<your-github-username>.github.io/<your-experiment-name>/rt-task_main.js . For example, https://kywch.github.io/Simple-RT-Task/rt-task_main.js . Second transformation: demo-simple-rt-task-transformed-with-display-element.html Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The demo-simple-rt-task-transformed-with-display-element.html file in this GitHub repository contains three changes from the demo-simple-rt-task-transformed.html . When you open demo-simple-rt-task-transformed-with-display-element.html in a browser, you should see the same reaction time task. Let's look at each change. Change 1: Using display_element By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* start the experiment */ jsPsych.init({ timeline: timeline, /* Change 1: Using `display_element` */ display_element: 'display_stage', on_finish: function () { jsPsych.data.displayData(); } }); Change 2: Adding display_stage CSS and Div The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div> Change 3: Adding extra scripts for Qualtrics The below scripts are not necessary to run this reaction time experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- jspsych.css should be availble from your GitHub at https://<your-github-username>.github.io/<your-experiment-name>/jspsych-6.1.0/css/jspsych.css --> <link href=\"https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> Third transformation: demo-simple-rt-task-qualtrics.js To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); The demo-simple-rt-task-qualtrics.js file in this GitHub repository contains several changes from demo-simple-rt-task-transformed-with-display-element.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. By separating the experiment-related code from the operation-related code, converting the html file to Qualtrics JavaScript function is pretty much similar to the Hello-World example . Let's look at each change. Change 1: Hiding the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 2: Defining and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. One way to check whether these files are accessilbe is to view the source of demo-simple-rt-task-transformed.html and click the imported scripts. For example of jspsych.js , https://your-github-username.github.io/your-experiment-name/jspsych-6.1.0/jspsych.js . var task_github = \"https://kywch.github.io/Simple-RT-Task/\"; // https://<your-github-username>.github.io/<your-experiment-name> // requiredResources must include all the JS files that demo-simple-rt-task-transformed.html uses. var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\", task_github + \"rt-task_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 3: Appending the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 4: Wrapping jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). Change 5: Summarizing and save the results to Qualtrics The original jsPsych v6.3 tutorial shows you how you can process and summarize the experiment results online. Wouldn't it be great if your experiment results are directly included in your Qualtrics data? Well, you can actually summarize the results online and save those results in Qualtrics' Embedded Data using the setEmbeddedData function. demo-simple-rt-task-qualtrics.js does so when the jsPsych experiment finishes by running the below code (from debrief_block ). jsPsych.init({ timeline: timeline, display_element: 'display_stage', on_finish: function (data) { /* Change 5: Summarizing and save the results to Qualtrics */ // summarize the results var trials = jsPsych.data.get().filter({ test_part: 'test' }); var correct_trials = trials.filter({ correct: true }); var accuracy = Math.round(correct_trials.count() / trials.count() * 100); var rt = Math.round(correct_trials.select('rt').mean()); // save to qualtrics embedded data Qualtrics.SurveyEngine.setEmbeddedData(\"accuracy\", accuracy); Qualtrics.SurveyEngine.setEmbeddedData(\"rt\", rt); /* Change 6: Adding the clean up and continue functions.*/ // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); Change 6: Adding the clean up and continue functions When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question. Finally, embedding jsPsych in Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question Create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole demo-simple-rt-task-qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Step 3. Open the Question HTML editor and copy paste the portion of demo-simple-rt-task-transformed-with-display-element.html The Change 3 section of the demo-simple-rt-task-transformed-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of demo-simple-rt-task-transformed-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below. Step 4. Create Embedded Data elements To store the experiment results -- accuracy and rt -- in Qualtrics, you need to create the Embedded Data elements named accuracy and rt in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type accuracy Click Set a Value Now and type -1 Click Add a New Field and type rt Click Set a Value Now and type -1 Step 5. Move Set Embedded Data block to the top of Survey Flow The accuracy and rt fields should be defined before the jsPsych reaction time task, so you need to move the Embedded Data block to the top of the Survey Flow. Click and hold down Move to drag the Embedded Data to the top of the Survey Flow. After this, you should see the Survey Flow like below. Step 6. Add a check for the Embedded Data You should make sure that the experiment results are saved correctly. You can do so by showing the accuracy and rt Embedded Data after the reaction task. Click Add Page Break Click Create a New Question Change Question Type to Text/Graphic Type ${e://Field/accuracy} and ${e://Field/rt} to access these Embedded Data Step 7. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same reaction time task running in Qualtrics. For example, try this Qualtrics link . Do you want to save the trial-by-trial data? Then, you need a server that can receive your data. See the tutorial Saving data to a web server using PHP .","title":"Embedding Reaction-Time Task"},{"location":"rt-task/#embedding-the-jspsych-simple-reaction-time-task-into-qualtrics","text":"WARNING!! This tutorial series is based on version 6.x of jsPsych. Due to extensive changes in jsPsych 7.x and above, many things in this tutorial may not work with jsPsych v7.x and above. You can get jsPsych v6.3.1 (the last jsPsych 6.x release) from here . Here, I used v6.1.0 , which is not much different from v6.3.1 Let's try to embed a more complicated task, the original jsPsych v6.3 Simple Reaction Time Task , to qualtrics. You can first try the task by clicking HERE .","title":"Embedding the jsPsych Simple Reaction Time Task into Qualtrics"},{"location":"rt-task/#the-start-demo-simple-rt-taskhtml","text":"The original experiment code, demo-simple-rt-task.html is here . Let's make the code work in a separate folder like the hello-world example . To do so, you need to change the url of jsPsych scripts, stylesheet, and stimuli of the experiment code. In this tutorial, we will change those twice to make the rt-task (1) run on a new folder and (2) use the GitHub-hosted resources. First, let's make it run locally. To do so, The jsPsych library, plugins, and stylesheet come from the local folder. As you can see, the demo-simple-rt-task.html in this repository looks at the local jspsych-6.1.0 folder for these files. <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\"></script> <link rel=\"stylesheet\" href=\"jspsych-6.1.0/css/jspsych.css\"></link> The experiment also needs stimuli images (see the original jsPsych v6.3 tutorial ). So, you need to create a folder called img in the experiment folder and copy blue.png and orange.png into the img folder. Your folder should look like this.","title":"The start: demo-simple-rt-task.html"},{"location":"rt-task/#hosting-this-task-in-github","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps.","title":"Hosting this task in GitHub"},{"location":"rt-task/#step-0-create-a-github-account","text":"Go to the GitHub site and create your account.","title":"Step 0. Create a GitHub account"},{"location":"rt-task/#step-1-create-a-new-github-repository","text":"First, create a repository for your experiment by following this Create a repo guide .","title":"Step 1. Create a new GitHub repository"},{"location":"rt-task/#step-2-add-experiment-files-to-the-repository","text":"Upload your experiment files to the repository. The easy way is to drag and drop your files like this Adding a file to a repository guide . Do NOT forget to click the Commit changes button. My Simple-RT-Task repository looks like this: https://github.com/kywch/Simple-RT-Task/ .","title":"Step 2. Add experiment files to the repository"},{"location":"rt-task/#step-3-click-the-settings-button","text":"Click the Settings button on the repository home page.","title":"Step 3. Click the Settings button"},{"location":"rt-task/#step-4-enable-github-pages-for-your-experiment","text":"Scroll down and find the GitHub Pages section. Select the Source to be the master branch . Within a few minutes, a website will be available at https://<your-github-username>.github.io/<your-experiment-name>/ . How do you know the page is up and running? Well, let's try to access the jspsych.css file by going into https://<your-github-username>.github.io/<your-experiment-name>/jspsych-6.1.0/css/jspsych.css . For example, https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css .","title":"Step 4. Enable GitHub Pages for your experiment"},{"location":"rt-task/#wait-did-you-know","text":"Did you know that you also accidentally made your task online that anyone with the Internet can try your task? Open your browser and go to https://<your-github-username>.github.io/<your-experiment-name>/demo-simple-rt-task.html , or try mine: https://kywch.github.io/Simple-RT-Task/demo-simple-rt-task.html . If your expeirment doesnt' work, (this may sound silly but worked for me) try to turn off and on the GitHub Pages multiple times (i.e., switching the Source to be None and master branch ).","title":"WAIT, did you know?"},{"location":"rt-task/#first-transformation-demo-simple-rt-task-transformedhtml-and-rt-task_mainjs","text":"I prefer to separate out the experiment-related code from the operation-related code, following the Experiment Factory style. If you haven't, please visit the Experiment Factory library , which contain a ton of experiments with running demos and their code. In the demo-simple-rt-task.html , constructing the timeline can be considered to be experiment-related, and the remaining parts that also appear in the Hello-World example , such as loading jspsych.js and jsPsych.init() can be considered to be operation-related. Here, I am separating the experiment-related code and the operation-related code and putting the code into rt-task_main.js and demo-simple-rt-task-transformed.html , respectively, by following steps:","title":"First transformation: demo-simple-rt-task-transformed.html and rt-task_main.js"},{"location":"rt-task/#step-1-copy-demo-simple-rt-taskhtml-to-demo-simple-rt-task-transformedhtml","text":"","title":"Step 1. Copy demo-simple-rt-task.html to demo-simple-rt-task-transformed.html"},{"location":"rt-task/#step-2-create-a-new-file-rt-task_mainjs","text":"And open rt-task_main.js in a new editor window.","title":"Step 2. Create a new file rt-task_main.js"},{"location":"rt-task/#step-3-cut-and-paste-the-experiment-related-code","text":"Open demo-simple-rt-task-transformed.html . You should have both rt-task_main.js and demo-simple-rt-task-transformed.html opened. Select the code from the /* create timeline */ line to the timeline.push(debrief_block); line, cut the selection , and paste it to rt-task_main.js . REPEAT . The code is being cut-and-pasted (NOT copy-pasted). /* create timeline */ var timeline = []; /* define welcome message trial */ var welcome_block = { type: \"html-keyboard-response\", stimulus: \"Welcome to the experiment. Press any key to begin.\" }; timeline.push(welcome_block); /* define instructions trial */ var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\"+ \"<div style='float: left;'><img src='img/blue.png'></img>\" + \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='img/orange.png'></img>\" + \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\"+ \"<p>Press any key to begin.</p>\", post_trial_gap: 2000 }; timeline.push(instructions); /* test trials */ var test_stimuli = [ { stimulus: \"img/blue.png\", data: { test_part: 'test', correct_response: 'f' } }, { stimulus: \"img/orange.png\", data: { test_part: 'test', correct_response: 'j' } } ]; var fixation = { type: 'html-keyboard-response', stimulus: '<div style=\"font-size:60px;\">+</div>', choices: jsPsych.NO_KEYS, trial_duration: function(){ return jsPsych.randomization.sampleWithoutReplacement([250, 500, 750, 1000, 1250, 1500, 1750, 2000], 1)[0]; }, data: {test_part: 'fixation'} } var test = { type: \"image-keyboard-response\", stimulus: jsPsych.timelineVariable('stimulus'), choices: ['f', 'j'], data: jsPsych.timelineVariable('data'), on_finish: function(data){ data.correct = data.key_press == jsPsych.pluginAPI.convertKeyCharacterToKeyCode(data.correct_response); }, } var test_procedure = { timeline: [fixation, test], timeline_variables: test_stimuli, repetitions: 5, randomize_order: true } timeline.push(test_procedure); /* define debrief */ var debrief_block = { type: \"html-keyboard-response\", stimulus: function() { var trials = jsPsych.data.get().filter({test_part: 'test'}); var correct_trials = trials.filter({correct: true}); var accuracy = Math.round(correct_trials.count() / trials.count() * 100); var rt = Math.round(correct_trials.select('rt').mean()); return \"<p>You responded correctly on \"+accuracy+\"% of the trials.</p>\"+ \"<p>Your average response time was \"+rt+\"ms.</p>\"+ \"<p>Press any key to complete the experiment. Thank you!</p>\"; } }; timeline.push(debrief_block);","title":"Step 3. Cut and paste the experiment-related code"},{"location":"rt-task/#step-4-rt-task_mainjs-use-the-github-hosted-stimuli-images","text":"The above code uses the stimuli images in the img folder placed with the experiment html. But since you also put these images in your GitHub repository and made these available through the Internet, you can also use these images. The img/blue.png is available at https://<your-github-username>.github.io/<your-experiment-name>/img/blue.png . For example, https://kywch.github.io/Simple-RT-Task/img/blue.png . And, the img/orange.png is available at https://<your-github-username>.github.io/<your-experiment-name>/img/orange.png . For example, https://kywch.github.io/Simple-RT-Task/img/orange.png . The rt-task_main.js in this tutorial has a few changes to use the GitHub-hosted images. Let's see these changes.","title":"Step 4. rt-task_main.js: Use the GitHub-hosted stimuli images"},{"location":"rt-task/#change-1-adding-the-image-hosting-site","text":"The repo_site variable was added to locate the site that hosts stimuli images. You can easily use your repository by changing this line. // define the site that hosts stimuli images // usually https://<your-github-username>.github.io/<your-experiment-name>/ var repo_site = \"https://kywch.github.io/Simple-RT-Task/\";","title":"Change 1: Adding the image hosting site"},{"location":"rt-task/#change-2-adding-repo_site-in-instructions","text":"The repo_site variable should be added to wherever img/blue.png and img/orange.png are used like the below. The find function really helps in doing so. var instructions = { type: \"html-keyboard-response\", stimulus: \"<p>In this experiment, a circle will appear in the center \" + \"of the screen.</p><p>If the circle is <strong>blue</strong>, \" + \"press the letter F on the keyboard as fast as you can.</p>\" + \"<p>If the circle is <strong>orange</strong>, press the letter J \" + \"as fast as you can.</p>\" + \"<div style='width: 700px;'>\" + \"<div style='float: left;'><img src='\" + repo_site + \"img/blue.png'></img>\" + // Change 2: Adding `repo_site` in `instructions` \"<p class='small'><strong>Press the F key</strong></p></div>\" + \"<div class='float: right;'><img src='\" + repo_site + \"img/orange.png'></img>\" + // Change 2: Adding `repo_site` in `instructions` \"<p class='small'><strong>Press the J key</strong></p></div>\" + \"</div>\" + \"<p>Press any key to begin.</p>\", post_trial_gap: 2000 };","title":"Change 2: Adding repo_site in instructions"},{"location":"rt-task/#change-3-adding-repo_site-in-test_stimuli","text":"var test_stimuli = [{ stimulus: repo_site + \"img/blue.png\", // Change 3: Adding `repo_site` in `test_stimuli` data: { test_part: 'test', correct_response: 'f' } }, { stimulus: repo_site + \"img/orange.png\", // Change 3: Adding `repo_site` in `test_stimuli` data: { test_part: 'test', correct_response: 'j' } } ];","title":"Change 3: Adding repo_site in test_stimuli"},{"location":"rt-task/#step-5-demo-simple-rt-task-transformedhtml-import-rt-task_mainjs","text":"Cutting the experiment-related code makes the demo-simple-rt-task-transformed.html file much shorter. To make demo-simple-rt-task-transformed.html work, you need to load rt-task_main.js by using a <script> tag like the other jspsych plugin files (see the original jsPsych v6.3 tutorial ). <!-- CHANGE: Loading the external main experiment script --> <script src=\"rt-task_main.js\"></script> After making these changes, don't forget to SAVE !","title":"Step 5. demo-simple-rt-task-transformed.html: Import rt-task_main.js"},{"location":"rt-task/#does-this-work","text":"Let's find out by opening demo-simple-rt-task-transformed.html in a browser.","title":"Does this work?"},{"location":"rt-task/#step-6-upload-demo-simple-rt-task-transformedhtml-and-rt-task_mainjs-to-github","text":"If this works, let's upload demo-simple-rt-task-transformed.html and rt-task_main.js to your GitHub repository so that your task also runs over the Internet. After uploading both scripts (and waiting for a few minutes), you should be able to access https://<your-github-username>.github.io/<your-experiment-name>/demo-simple-rt-task-transformed.html . For example, https://kywch.github.io/Simple-RT-Task/demo-simple-rt-task-transformed.html . If the above link works, then it also means that the experiment-related code, rt-task_main.js , is also available for Qualtrics to load. You can actually access it by going to https://<your-github-username>.github.io/<your-experiment-name>/rt-task_main.js . For example, https://kywch.github.io/Simple-RT-Task/rt-task_main.js .","title":"Step 6: Upload demo-simple-rt-task-transformed.html and rt-task_main.js to GitHub"},{"location":"rt-task/#second-transformation-demo-simple-rt-task-transformed-with-display-elementhtml","text":"Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The demo-simple-rt-task-transformed-with-display-element.html file in this GitHub repository contains three changes from the demo-simple-rt-task-transformed.html . When you open demo-simple-rt-task-transformed-with-display-element.html in a browser, you should see the same reaction time task. Let's look at each change.","title":"Second transformation: demo-simple-rt-task-transformed-with-display-element.html"},{"location":"rt-task/#change-1-using-display_element","text":"By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . /* start the experiment */ jsPsych.init({ timeline: timeline, /* Change 1: Using `display_element` */ display_element: 'display_stage', on_finish: function () { jsPsych.data.displayData(); } });","title":"Change 1: Using display_element"},{"location":"rt-task/#change-2-adding-display_stage-css-and-div","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Change 2: Adding display_stage CSS and Div"},{"location":"rt-task/#change-3-adding-extra-scripts-for-qualtrics","text":"The below scripts are not necessary to run this reaction time experiment, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- jspsych.css should be availble from your GitHub at https://<your-github-username>.github.io/<your-experiment-name>/jspsych-6.1.0/css/jspsych.css --> <link href=\"https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div>","title":"Change 3: Adding extra scripts for Qualtrics"},{"location":"rt-task/#third-transformation-demo-simple-rt-task-qualtricsjs","text":"To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); The demo-simple-rt-task-qualtrics.js file in this GitHub repository contains several changes from demo-simple-rt-task-transformed-with-display-element.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. By separating the experiment-related code from the operation-related code, converting the html file to Qualtrics JavaScript function is pretty much similar to the Hello-World example . Let's look at each change.","title":"Third transformation: demo-simple-rt-task-qualtrics.js"},{"location":"rt-task/#change-1-hiding-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 1: Hiding the Next button"},{"location":"rt-task/#change-2-defining-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. One way to check whether these files are accessilbe is to view the source of demo-simple-rt-task-transformed.html and click the imported scripts. For example of jspsych.js , https://your-github-username.github.io/your-experiment-name/jspsych-6.1.0/jspsych.js . var task_github = \"https://kywch.github.io/Simple-RT-Task/\"; // https://<your-github-username>.github.io/<your-experiment-name> // requiredResources must include all the JS files that demo-simple-rt-task-transformed.html uses. var requiredResources = [ task_github + \"jspsych-6.1.0/jspsych.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\", task_github + \"jspsych-6.1.0/plugins/jspsych-image-keyboard-response.js\", task_github + \"rt-task_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 2: Defining and load required resources"},{"location":"rt-task/#change-3-appending-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 3: Appending the display_stage Div using jQuery"},{"location":"rt-task/#change-4-wrapping-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above).","title":"Change 4: Wrapping jsPsych.init() in a function"},{"location":"rt-task/#change-5-summarizing-and-save-the-results-to-qualtrics","text":"The original jsPsych v6.3 tutorial shows you how you can process and summarize the experiment results online. Wouldn't it be great if your experiment results are directly included in your Qualtrics data? Well, you can actually summarize the results online and save those results in Qualtrics' Embedded Data using the setEmbeddedData function. demo-simple-rt-task-qualtrics.js does so when the jsPsych experiment finishes by running the below code (from debrief_block ). jsPsych.init({ timeline: timeline, display_element: 'display_stage', on_finish: function (data) { /* Change 5: Summarizing and save the results to Qualtrics */ // summarize the results var trials = jsPsych.data.get().filter({ test_part: 'test' }); var correct_trials = trials.filter({ correct: true }); var accuracy = Math.round(correct_trials.count() / trials.count() * 100); var rt = Math.round(correct_trials.select('rt').mean()); // save to qualtrics embedded data Qualtrics.SurveyEngine.setEmbeddedData(\"accuracy\", accuracy); Qualtrics.SurveyEngine.setEmbeddedData(\"rt\", rt); /* Change 6: Adding the clean up and continue functions.*/ // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } });","title":"Change 5: Summarizing and save the results to Qualtrics"},{"location":"rt-task/#change-6-adding-the-clean-up-and-continue-functions","text":"When the jsPsych ends, display_stage and display_stage_background should be removed. Then, execulte the clickNextButton to simulate clicking the Next button and proceed to the next question.","title":"Change 6: Adding the clean up and continue functions"},{"location":"rt-task/#finally-embedding-jspsych-in-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Finally, embedding jsPsych in Qualtrics"},{"location":"rt-task/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"Create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"rt-task/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-demo-simple-rt-task-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript .","title":"Step 2. Open the Question JavaScript editor and copy paste the whole demo-simple-rt-task-qualtrics.js"},{"location":"rt-task/#step-3-open-the-question-html-editor-and-copy-paste-the-portion-of-demo-simple-rt-task-transformed-with-display-elementhtml","text":"The Change 3 section of the demo-simple-rt-task-transformed-with-display-element.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of demo-simple-rt-task-transformed-with-display-element.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/Simple-RT-Task/jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"></link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the portion of demo-simple-rt-task-transformed-with-display-element.html"},{"location":"rt-task/#step-4-create-embedded-data-elements","text":"To store the experiment results -- accuracy and rt -- in Qualtrics, you need to create the Embedded Data elements named accuracy and rt in your survey by following this Qualtrics tutorial . Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type accuracy Click Set a Value Now and type -1 Click Add a New Field and type rt Click Set a Value Now and type -1","title":"Step 4. Create Embedded Data elements"},{"location":"rt-task/#step-5-move-set-embedded-data-block-to-the-top-of-survey-flow","text":"The accuracy and rt fields should be defined before the jsPsych reaction time task, so you need to move the Embedded Data block to the top of the Survey Flow. Click and hold down Move to drag the Embedded Data to the top of the Survey Flow. After this, you should see the Survey Flow like below.","title":"Step 5. Move Set Embedded Data block to the top of Survey Flow"},{"location":"rt-task/#step-6-add-a-check-for-the-embedded-data","text":"You should make sure that the experiment results are saved correctly. You can do so by showing the accuracy and rt Embedded Data after the reaction task. Click Add Page Break Click Create a New Question Change Question Type to Text/Graphic Type ${e://Field/accuracy} and ${e://Field/rt} to access these Embedded Data","title":"Step 6. Add a check for the Embedded Data"},{"location":"rt-task/#step-7-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same reaction time task running in Qualtrics. For example, try this Qualtrics link .","title":"Step 7. Publish and test!"},{"location":"rt-task/#do-you-want-to-save-the-trial-by-trial-data","text":"Then, you need a server that can receive your data. See the tutorial Saving data to a web server using PHP .","title":"Do you want to save the trial-by-trial data?"},{"location":"save-dropbox/","text":"Saving jsPsych data to your Dropbox folder Did you know Dropbox can also act like a server for saving your files? You can save each participant's data file without access to a web server! WARNING : Dropbox will retire the creation of long-lived access tokens on September 30th, 2021 . After that, this tutorial WILL NOT work. So, please plan your experiments accordingly. See the Dropbox announcement . Step 0. Get a Dropbox account Go to the Dropbox site and create a free account. Step 1. Create a Dropbox app for saving files Go to the Dropbox App console and sign in, if necessary. Once you see a screen like below, (1) select Scoped access , (2) select App folder , and (3) name your app. I named my app SaveMyExperimentData . When you are done, click Create app . Step 2. Give the necessary permisions for uploading files If your app is created successfully, you will see the tabs: Settings , Permissions , Branding , and Analytics . Click the Permissions tab. Go to Files and folders section and check the files.metadata.write , files.content.write , files.content.read boxes like below to allow file uploads. Step 3. Get the Dropbox access token Then click the Settings tab, and you will see a screen like below. Scroll down to find Access token expiration and set it to No expiration . If you don't change the expiration, this key will expire in 4 hours, and expiration, your experiment CANNOT upload files to Dropbox. Then, go to Generate access token and click the button to get the token. If you generate the key first, then you may have to repeat the whole step because permissions and expiration cannot be changed after the token has been generated. WARNING: Do NOT share this access token with anyone, including sharing your code, etc. With this code, anyone can access or delete your Dropbox files and abuse your Dropbox account. . So I suggest you two things when you finish your data collection. Invalidate the access code by deleting the app (see the Step 8 below). When you delete your app, saved files in your folder remains intact. Replace the access code with blank in your source code, as I did in this tutorial, so that you do not accidentally publish your access code. Step 4. Add the save function to the experiment HTML script The Dropbox side work is done. Now, you need to add scripts to send the result file when an experiment session is done. The experiment-with-display-element-save-dropbox.html file in this GitHub repository contains three additional changes from experiment-with-display-element.html . When you open experiment-with-display-element-save-dropbox.html in a browser, you should see the same \"Hello world!\". In addtion, you will find new json and csv files in your Dropbox folder under Apps/<your-app-name> , for example, Apps/SaveMyExperimentData . We start from experiment-with-display-element.html , which you can see from the Hello World! tutorial . Let's look at these additional change. Change 4: Defining necessary variables for saving the results You can set task_name and sbj_id as you like. However, you must provide a correct dropbox_access_token . // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"test01\"; // YOU MUST GET YOUR OWN DROPBOX ACCESS TOKEN var dropbox_access_token = '<PUT YOUR Dropbox ACCESS TOKEN HERE>'; // my preference is to include the task and sbj_id in the file name var save_filename = '/' + task_name + '/' + task_name + '_' + sbj_id; Change 5. Defining save functions using Dropbox API You must load the Dropbox API to use it. <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js\"></script> You can use either the JSON or CSV format, whichever convenient for you. The save functions look like this. /* Change 5: Defining save functions using Dropbox API */ function save_data_json() { try { var dbx = new Dropbox.Dropbox({ fetch: fetch, accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.json', mode: 'overwrite', mute: true, contents: jsPsych.data.get().json() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } function save_data_csv() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.csv', mode: 'overwrite', mute: true, contents: jsPsych.data.get().csv() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } Change 6: Sending the results file upon completion The on_finish callback can be declared in the jsPsych.init method. For details, see the original jsPsych tutorial . The callback will trigger once all trials in the experiment have been run, so it is a great place to call save functions. NOTE: Here, both save_data_json() and save_data_csv() were called to show how these can be used. Choose one. jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Sending the results file upon completion */ on_finish: function() { save_data_json(); save_data_csv(); } }) Putting it all together So the experiment-with-display-element-save-dropbox.html code looks like this. This html file should save the result files to your server. <!DOCTYPE html> <html> <head> <title>My experiment</title> <!-- Change 5: Defining save functions using Dropbox API --> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js\"></script> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> </head> <body> <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> </body> <script> /* Change 4: Defining necessary variables for saving the results */ // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"test01\"; // YOU MUST GET YOUR OWN DROPBOX ACCESS TOKEN var dropbox_access_token = '<PUT YOUR Dropbox ACCESS TOKEN HERE>'; // my preference is to include the task and sbj_id in the file name var save_filename = '/' + task_name + '/' + task_name + '_' + sbj_id; /* Change 5: Defining save functions using Dropbox API */ function save_data_json() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.json', mode: 'overwrite', mute: true, contents: jsPsych.data.get().json() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } function save_data_csv() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.csv', mode: 'overwrite', mute: true, contents: jsPsych.data.get().csv() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } /* Change 1: Using `display_element` */ jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Sending the results file upon completion */ on_finish: function () { save_data_json(); save_data_csv(); } }) </script> </html> Step 5. Add Participand ID to Qualtrics Let's log in to Qualtrics. The basics of embedding jsPsych experiment into Qualtrics is explained in the Embedding Hello World! page. However, if you want to save the experiment data elsewhere, you must have the Participant ID so that you can link Qualtrics data and the experiment file later. In Qualtrics, you can keep or assign the participant ID using Embedded Data elements . The below steps will create the Embedded Data called workerId , which will hold the Participant ID. The value of workerId can be set from the Qualtrics survey URL (for details, see Qualtrics.com: Setting values from the Survey URL and Qualtrics.com: Passing information through query string ). However, if workerId is not set, then Qualtrics will automatically generate a random Participant ID, ranging from PID10000 - PID99999, and use this ID to save data. Setting the name of participant ID variable depends on how you recruit your participants (see the Recruiting Participants section). I set its name to be workerId because I have been using Cloudresearch/TurkPrime with Amazon MTurk, and Cloudresearch uses workerId to automatically add Mturk Worker ID . However, other services suggest different field name -- for example, Prolific suggests PROLIFIC_PID -- so please follow the Qualtrics integration guide from the participant recruiting service you are using. Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId . WARNING: These fields are case sensitive. The I in Id is capitalized. All other letters are lower case. Click Add Below on this Set Embedded Data block Choose Branch Click Add a Condition Click Question --> choose Embedded Data Type in workerId Click Is Equal to --> choose Is Empty Click Add a New Element Here under the Branch block Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId . CLick Set a Value Now Type in PID${rand://int/10000:99999} --> This generates a random Participant ID between PID10000 and PID99999. For details, see Qualtrics.com: Assigning Randomized IDs to Respondents . Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow After these steps, you should see a screen like below. Step 6. Use the save function from Qualtrics The qualtrics-save-dropbox.js file in this GitHub repository contains additional changes from qualtrics.js and experiment-with-display-element-save-dropbox.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. We start from qualtrics.js , which you can see from the Hello World! tutorial . Let's look at these additional change. Change 6: Loading the Dropbox API Add the Dropbox API library https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js to requiredResources like below so that Qualtrics loads the Dropbox API. var requiredResources = [ 'https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js', // Change 6: Loading the Dropbox API jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; Change 7: Adding necessary variables and functions for saving the results The below javascript defines necessary variables and functions for saving the results. Importantly, this script will grab the Participant ID from the Embedded Data workerId , using the piped text ${e://Field/workerId} , and put it in the data file name. IMPORTANT: You must also provide a correct dropbox_access_token . // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"${e://Field/workerId}\"; // YOU MUST GET YOUR OWN DROPBOX ACCESS TOKEN var dropbox_access_token = '<PUT YOUR Dropbox ACCESS TOKEN HERE>'; // my preference is to include the task and sbj_id in the file name var save_filename = '/' + task_name + '/' + task_name + '_' + sbj_id; function save_data_json() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.json', mode: 'overwrite', mute: true, contents: jsPsych.data.get().json() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } function save_data_csv() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.csv', mode: 'overwrite', mute: true, contents: jsPsych.data.get().csv() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } Change 8: Calling the save function -- CHOOSE ONE! The save function was added inside on_finish , which is called once all trials in the experiment have been run. The participant ID, sbj_id , was added to the data itself, so that you can match the data file even when the file name is changed. NOTE: Here, both save_data_json() and save_data_csv() were called to show how these can be used. Choose one. jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 5: Adding the clean up and continue functions.*/ on_finish: function (data) { /* Change 8: Calling the save function -- CHOOSE ONE! */ // include the participant ID in the data // this must be done before saving jsPsych.data.get().addToLast({participant: sbj_id}); save_data_json(); save_data_csv(); // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); Putting it all together So the qualtrics-save-dropbox.js code looks like this. Embed this script in Qualtrics by following these steps and see whether your save function works. Qualtrics.SurveyEngine.addOnload(function () { /*Place your JavaScript here to run when the page loads*/ /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); /* Change 2: Defining and loading required resources */ var jslib_url = \"https://kywch.github.io/jsPsych/\"; // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ 'https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js', // Change 6: Loading the Dropbox API jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); /* Change 7: Adding necessary variables and functions for saving the results */ // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"${e://Field/workerId}\"; // YOU MUST GET YOUR OWN DROPBOX ACCESS TOKEN var dropbox_access_token = '<PUT YOUR Dropbox ACCESS TOKEN HERE>'; // my preference is to include the task and sbj_id in the file name var save_filename = '/' + task_name + '/' + task_name + '_' + sbj_id; function save_data_json() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.json', mode: 'overwrite', mute: true, contents: jsPsych.data.get().json() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } function save_data_csv() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.csv', mode: 'overwrite', mute: true, contents: jsPsych.data.get().csv() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } /* Change 4: Wraping jsPsych.init() in a function */ function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 5: Adding the clean up and continue functions.*/ on_finish: function (data) { /* Change 8: Calling the save function -- CHOOSE ONE! */ // include the participant ID in the data // this must be done before saving jsPsych.data.get().addToLast({participant: sbj_id}); save_data_json(); save_data_csv(); // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); } }); Qualtrics.SurveyEngine.addOnReady(function () { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function () { /*Place your JavaScript here to run when the page is unloaded*/ }); Step 7. Download the data? You already have them! When an experimental session finishes, its file will instantly delivered to your Dropbox folder. Isn't it nice? Step 8. Unlink your Dropbox app As I mentioned in the Step 2 , the Dropbox access token you have is dangerous because anyone with the code can access or delete your Dropbox files and abuse your Dropbox account. So it is safe to delete the app after your data collection is done. However, the saved files in your Dropbox folder remains intact, so you don't need to worry. Deleting the app is very simple. Go to the Dropbox App console , click your app, scroll down, and click the Delete app button. After this step, your Dropbox is safe.","title":"Saving jsPsych data to your Dropbox folder"},{"location":"save-dropbox/#saving-jspsych-data-to-your-dropbox-folder","text":"Did you know Dropbox can also act like a server for saving your files? You can save each participant's data file without access to a web server! WARNING : Dropbox will retire the creation of long-lived access tokens on September 30th, 2021 . After that, this tutorial WILL NOT work. So, please plan your experiments accordingly. See the Dropbox announcement .","title":"Saving jsPsych data to your Dropbox folder"},{"location":"save-dropbox/#step-0-get-a-dropbox-account","text":"Go to the Dropbox site and create a free account.","title":"Step 0. Get a Dropbox account"},{"location":"save-dropbox/#step-1-create-a-dropbox-app-for-saving-files","text":"Go to the Dropbox App console and sign in, if necessary. Once you see a screen like below, (1) select Scoped access , (2) select App folder , and (3) name your app. I named my app SaveMyExperimentData . When you are done, click Create app .","title":"Step 1. Create a Dropbox app for saving files"},{"location":"save-dropbox/#step-2-give-the-necessary-permisions-for-uploading-files","text":"If your app is created successfully, you will see the tabs: Settings , Permissions , Branding , and Analytics . Click the Permissions tab. Go to Files and folders section and check the files.metadata.write , files.content.write , files.content.read boxes like below to allow file uploads.","title":"Step 2. Give the necessary permisions for uploading files"},{"location":"save-dropbox/#step-3-get-the-dropbox-access-token","text":"Then click the Settings tab, and you will see a screen like below. Scroll down to find Access token expiration and set it to No expiration . If you don't change the expiration, this key will expire in 4 hours, and expiration, your experiment CANNOT upload files to Dropbox. Then, go to Generate access token and click the button to get the token. If you generate the key first, then you may have to repeat the whole step because permissions and expiration cannot be changed after the token has been generated. WARNING: Do NOT share this access token with anyone, including sharing your code, etc. With this code, anyone can access or delete your Dropbox files and abuse your Dropbox account. . So I suggest you two things when you finish your data collection. Invalidate the access code by deleting the app (see the Step 8 below). When you delete your app, saved files in your folder remains intact. Replace the access code with blank in your source code, as I did in this tutorial, so that you do not accidentally publish your access code.","title":"Step 3. Get the Dropbox access token"},{"location":"save-dropbox/#step-4-add-the-save-function-to-the-experiment-html-script","text":"The Dropbox side work is done. Now, you need to add scripts to send the result file when an experiment session is done. The experiment-with-display-element-save-dropbox.html file in this GitHub repository contains three additional changes from experiment-with-display-element.html . When you open experiment-with-display-element-save-dropbox.html in a browser, you should see the same \"Hello world!\". In addtion, you will find new json and csv files in your Dropbox folder under Apps/<your-app-name> , for example, Apps/SaveMyExperimentData . We start from experiment-with-display-element.html , which you can see from the Hello World! tutorial . Let's look at these additional change.","title":"Step 4. Add the save function to the experiment HTML script"},{"location":"save-dropbox/#change-4-defining-necessary-variables-for-saving-the-results","text":"You can set task_name and sbj_id as you like. However, you must provide a correct dropbox_access_token . // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"test01\"; // YOU MUST GET YOUR OWN DROPBOX ACCESS TOKEN var dropbox_access_token = '<PUT YOUR Dropbox ACCESS TOKEN HERE>'; // my preference is to include the task and sbj_id in the file name var save_filename = '/' + task_name + '/' + task_name + '_' + sbj_id;","title":"Change 4: Defining necessary variables for saving the results"},{"location":"save-dropbox/#change-5-defining-save-functions-using-dropbox-api","text":"You must load the Dropbox API to use it. <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js\"></script> You can use either the JSON or CSV format, whichever convenient for you. The save functions look like this. /* Change 5: Defining save functions using Dropbox API */ function save_data_json() { try { var dbx = new Dropbox.Dropbox({ fetch: fetch, accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.json', mode: 'overwrite', mute: true, contents: jsPsych.data.get().json() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } function save_data_csv() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.csv', mode: 'overwrite', mute: true, contents: jsPsych.data.get().csv() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } }","title":"Change 5. Defining save functions using Dropbox API"},{"location":"save-dropbox/#change-6-sending-the-results-file-upon-completion","text":"The on_finish callback can be declared in the jsPsych.init method. For details, see the original jsPsych tutorial . The callback will trigger once all trials in the experiment have been run, so it is a great place to call save functions. NOTE: Here, both save_data_json() and save_data_csv() were called to show how these can be used. Choose one. jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Sending the results file upon completion */ on_finish: function() { save_data_json(); save_data_csv(); } })","title":"Change 6: Sending the results file upon completion"},{"location":"save-dropbox/#putting-it-all-together","text":"So the experiment-with-display-element-save-dropbox.html code looks like this. This html file should save the result files to your server. <!DOCTYPE html> <html> <head> <title>My experiment</title> <!-- Change 5: Defining save functions using Dropbox API --> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js\"></script> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> </head> <body> <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> </body> <script> /* Change 4: Defining necessary variables for saving the results */ // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"test01\"; // YOU MUST GET YOUR OWN DROPBOX ACCESS TOKEN var dropbox_access_token = '<PUT YOUR Dropbox ACCESS TOKEN HERE>'; // my preference is to include the task and sbj_id in the file name var save_filename = '/' + task_name + '/' + task_name + '_' + sbj_id; /* Change 5: Defining save functions using Dropbox API */ function save_data_json() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.json', mode: 'overwrite', mute: true, contents: jsPsych.data.get().json() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } function save_data_csv() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.csv', mode: 'overwrite', mute: true, contents: jsPsych.data.get().csv() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } /* Change 1: Using `display_element` */ jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Sending the results file upon completion */ on_finish: function () { save_data_json(); save_data_csv(); } }) </script> </html>","title":"Putting it all together"},{"location":"save-dropbox/#step-5-add-participand-id-to-qualtrics","text":"Let's log in to Qualtrics. The basics of embedding jsPsych experiment into Qualtrics is explained in the Embedding Hello World! page. However, if you want to save the experiment data elsewhere, you must have the Participant ID so that you can link Qualtrics data and the experiment file later. In Qualtrics, you can keep or assign the participant ID using Embedded Data elements . The below steps will create the Embedded Data called workerId , which will hold the Participant ID. The value of workerId can be set from the Qualtrics survey URL (for details, see Qualtrics.com: Setting values from the Survey URL and Qualtrics.com: Passing information through query string ). However, if workerId is not set, then Qualtrics will automatically generate a random Participant ID, ranging from PID10000 - PID99999, and use this ID to save data. Setting the name of participant ID variable depends on how you recruit your participants (see the Recruiting Participants section). I set its name to be workerId because I have been using Cloudresearch/TurkPrime with Amazon MTurk, and Cloudresearch uses workerId to automatically add Mturk Worker ID . However, other services suggest different field name -- for example, Prolific suggests PROLIFIC_PID -- so please follow the Qualtrics integration guide from the participant recruiting service you are using. Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId . WARNING: These fields are case sensitive. The I in Id is capitalized. All other letters are lower case. Click Add Below on this Set Embedded Data block Choose Branch Click Add a Condition Click Question --> choose Embedded Data Type in workerId Click Is Equal to --> choose Is Empty Click Add a New Element Here under the Branch block Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId . CLick Set a Value Now Type in PID${rand://int/10000:99999} --> This generates a random Participant ID between PID10000 and PID99999. For details, see Qualtrics.com: Assigning Randomized IDs to Respondents . Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow After these steps, you should see a screen like below.","title":"Step 5. Add Participand ID to Qualtrics"},{"location":"save-dropbox/#step-6-use-the-save-function-from-qualtrics","text":"The qualtrics-save-dropbox.js file in this GitHub repository contains additional changes from qualtrics.js and experiment-with-display-element-save-dropbox.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. We start from qualtrics.js , which you can see from the Hello World! tutorial . Let's look at these additional change.","title":"Step 6. Use the save function from Qualtrics"},{"location":"save-dropbox/#change-6-loading-the-dropbox-api","text":"Add the Dropbox API library https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js to requiredResources like below so that Qualtrics loads the Dropbox API. var requiredResources = [ 'https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js', // Change 6: Loading the Dropbox API jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ];","title":"Change 6: Loading the Dropbox API"},{"location":"save-dropbox/#change-7-adding-necessary-variables-and-functions-for-saving-the-results","text":"The below javascript defines necessary variables and functions for saving the results. Importantly, this script will grab the Participant ID from the Embedded Data workerId , using the piped text ${e://Field/workerId} , and put it in the data file name. IMPORTANT: You must also provide a correct dropbox_access_token . // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"${e://Field/workerId}\"; // YOU MUST GET YOUR OWN DROPBOX ACCESS TOKEN var dropbox_access_token = '<PUT YOUR Dropbox ACCESS TOKEN HERE>'; // my preference is to include the task and sbj_id in the file name var save_filename = '/' + task_name + '/' + task_name + '_' + sbj_id; function save_data_json() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.json', mode: 'overwrite', mute: true, contents: jsPsych.data.get().json() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } function save_data_csv() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.csv', mode: 'overwrite', mute: true, contents: jsPsych.data.get().csv() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } }","title":"Change 7: Adding necessary variables and functions for saving the results"},{"location":"save-dropbox/#change-8-calling-the-save-function-choose-one","text":"The save function was added inside on_finish , which is called once all trials in the experiment have been run. The participant ID, sbj_id , was added to the data itself, so that you can match the data file even when the file name is changed. NOTE: Here, both save_data_json() and save_data_csv() were called to show how these can be used. Choose one. jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 5: Adding the clean up and continue functions.*/ on_finish: function (data) { /* Change 8: Calling the save function -- CHOOSE ONE! */ // include the participant ID in the data // this must be done before saving jsPsych.data.get().addToLast({participant: sbj_id}); save_data_json(); save_data_csv(); // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } });","title":"Change 8: Calling the save function -- CHOOSE ONE!"},{"location":"save-dropbox/#putting-it-all-together_1","text":"So the qualtrics-save-dropbox.js code looks like this. Embed this script in Qualtrics by following these steps and see whether your save function works. Qualtrics.SurveyEngine.addOnload(function () { /*Place your JavaScript here to run when the page loads*/ /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); /* Change 2: Defining and loading required resources */ var jslib_url = \"https://kywch.github.io/jsPsych/\"; // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ 'https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js', // Change 6: Loading the Dropbox API jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); /* Change 7: Adding necessary variables and functions for saving the results */ // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"${e://Field/workerId}\"; // YOU MUST GET YOUR OWN DROPBOX ACCESS TOKEN var dropbox_access_token = '<PUT YOUR Dropbox ACCESS TOKEN HERE>'; // my preference is to include the task and sbj_id in the file name var save_filename = '/' + task_name + '/' + task_name + '_' + sbj_id; function save_data_json() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.json', mode: 'overwrite', mute: true, contents: jsPsych.data.get().json() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } function save_data_csv() { try { var dbx = new Dropbox.Dropbox({ accessToken: dropbox_access_token }); dbx.filesUpload({ path: save_filename + '.csv', mode: 'overwrite', mute: true, contents: jsPsych.data.get().csv() }) .then(function (response) { console.log(response); }) .catch(function (error) { console.error(error); }); } catch (err) { console.log(\"Save data function failed.\", err); } } /* Change 4: Wraping jsPsych.init() in a function */ function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 5: Adding the clean up and continue functions.*/ on_finish: function (data) { /* Change 8: Calling the save function -- CHOOSE ONE! */ // include the participant ID in the data // this must be done before saving jsPsych.data.get().addToLast({participant: sbj_id}); save_data_json(); save_data_csv(); // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); } }); Qualtrics.SurveyEngine.addOnReady(function () { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function () { /*Place your JavaScript here to run when the page is unloaded*/ });","title":"Putting it all together"},{"location":"save-dropbox/#step-7-download-the-data-you-already-have-them","text":"When an experimental session finishes, its file will instantly delivered to your Dropbox folder. Isn't it nice?","title":"Step 7. Download the data? You already have them!"},{"location":"save-dropbox/#step-8-unlink-your-dropbox-app","text":"As I mentioned in the Step 2 , the Dropbox access token you have is dangerous because anyone with the code can access or delete your Dropbox files and abuse your Dropbox account. So it is safe to delete the app after your data collection is done. However, the saved files in your Dropbox folder remains intact, so you don't need to worry. Deleting the app is very simple. Go to the Dropbox App console , click your app, scroll down, and click the Delete app button. After this step, your Dropbox is safe.","title":"Step 8. Unlink your Dropbox app"},{"location":"save-php/","text":"Saving jsPsych data to a web server using PHP You can save the aggregated data to Qualtrics, but you may also want to look at the trial-level data for further analysis. If you have access to a web server that can run PHP , then you can save each participant's data as a CSV or JSON file on the server. Step 0. Get access to a web server Your institution usually provides you a free access to a web server, so that you can run your personal web site. If you are not familiar with web servers and PHP, please please ask your IT professional for help. They almost always can HELP you! Also look for resources like below. UNL.edu: Prerequisites for hosting web content on your account/setting up your first PHP page Step 1. Go into the public_html directory If you have gained the access to a web server, login to the server and go to the public_html directory. If you are not sure, please read this page first: Prerequisites for hosting web content on your account/how to setup your first PHP page . Reading this linux command cheatsheet can also help. $ cd ~/public_html Step 2. Set up the directories for saving experiment files Let's create a directory called exp_data , which will host necessary files and serve as a parent directory for your experiments by running three separate commands one-by-one. This command makes a directory called exp_data : $ mkdir exp_data This command moves you into the exp_data directory: $ cd exp_data This command shows you where you are. So you should see something like /home/<your-account>/public_html/exp_data : $ pwd This command prevents others from seeing inside exp_data by creating an empty index html file: $ touch index.html This command makes sure that index.html hides the directory structure (for details of .htaccess , see http://www.htaccess-guide.com/directoryindex-uses/ ) $ echo \"DirectoryIndex index.html\" >> .htaccess Step 3. Create the save_data.php Let's create the PHP file that will receive and save your data by using vi . If you are not familiar with vi , please read this guide for using the vi editor . This command will open an vi editor and let you edit it: $ vi save_data.php Copy-paste the below PHP code and save, then you are done with this step: <?php // WARNING: the below config can cause a serious security issue. // Please read https://portswigger.net/web-security/cors/access-control-allow-origin // Once you are done testing, you should limit the access //header('Access-Control-Allow-Origin: https://ssd.az1.qualtrics.com'); header('Access-Control-Allow-Origin: *'); // NOTE: the below code expects three fields and will NOT work if any of these is missing. // - data_dir: specify the server directory to store data // - file_name: specify the filename of the data being saved, which can include subject id // - exp_data: contain the full json/csv data to be saved if (isset($_POST['exp_data']) == false) { echo('Hello'); exit; } $exp_data = $_POST['exp_data']; /* prevent XSS: */ $_POST = filter_input_array(INPUT_POST, FILTER_SANITIZE_STRING); if (isset($_POST['data_dir']) == true) { $data_dir = $_POST['data_dir']; // data directory } else { exit; } if (isset($_POST['file_name']) == true) { $file_name = $_POST['file_name']; // mturk_id } else { exit; } // write the file to disk // NOTE: you must make the data directory by all users // For example, by running `chmod 772` to give a write access to EVERYONE file_put_contents($data_dir.'/'.$file_name, $exp_data); exit; ?> Your save_data.php url will look like https://<server-url>/~<your-account>/exp_data/save_data.php , like my url -- https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php . Note that the exp_data/save_data.php part should be the same if you followed the above steps. If your script is running, you will see Hello in your browser. Step 4. Make an experiment directory The above PHP script requires the experimenter to specify data_dir , in which experiment files are saved. Here, let's create a folder called hello-world under exp_data and save files there. Make sure that you are in the exp_data folder with pwd . This command makes a directory called hello-world : $ mkdir hello-world You also need to adjust this directory's permission so that the PHP script can save files. To learn more about permissions, see this page: http://linuxcommand.org/lc3_lts0090.php . This command allows the PHP script to write files in the hello-world directory, while preventing other people from seeing inside: $ chmod 772 hello-world Step 5. Add the save function to the experiment HTML script The server side work is done. Now, you need to add scripts to send the result file when an experiment session is done. The experiment-with-display-element-save-php.html file in this GitHub repository contains three additional changes from experiment-with-display-element.html . When you open experiment-with-display-element-save-php.html in a browser, you should see the same \"Hello world!\". In addtion, you will find new json and csv files under hello-world when you put correct url of save_data.php below. We start from experiment-with-display-element.html , which you can see from the Hello World! tutorial . Let's look at these additional change. Change 4: Defining necessary variables for saving the results The above save_data.php expects three fields -- data_dir , file_name , and exp_data -- and will NOT work if any of these is missing. data_dir specifies the server directory to store data. You may want to include task_name in the directory name. file_name specifies the filename of the result file. You may want to include the subject id. exp_data contains the full json/csv data to be saved. You need to replace save_url with your save_data.php url. // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"test01\"; // you must put your save_data php url here. var save_url = \"https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php\"; var data_dir = task_name; // my preference is to include the task and sbj_id in the file name var file_name = task_name + '_' + sbj_id; Change 5. Defining save functions using jQuery Qualtrics loads jQuery by default, so you can use jQuery for saving files. However, this html script must load jQuery library to use the save function. <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'></script> You can use either the JSON or CSV format, whichever convenient for you. The save functions look like this. function save_data_json() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.json', // the file type should be added exp_data: jsPsych.data.get().json() } }); } function save_data_csv() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: jsPsych.data.get().csv() } }); } Change 6: Sending the results file upon completion The on_finish callback can be declared in the jsPsych.init method. For details, see the original jsPsych v6.3 tutorial . The callback will trigger once all trials in the experiment have been run, so it is a great place to call save functions. NOTE: Here, both save_data_json() and save_data_csv() were called to show how these can be used. Choose one. jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Sending the results file upon completion */ on_finish: function() { save_data_json(); save_data_csv(); } }) Putting it all together So the experiment-with-display-element-save-php.html code looks like this. This html file should save the result files to your server. <!DOCTYPE html> <html> <head> <title>My experiment</title> <!-- Change 5: Defining save functions using jQuery --> <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'></script> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> </head> <body> <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> </body> <script> /* Change 4: Defining necessary variables for saving the results */ // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"test01\"; // you must put your save_data php url here. var save_url = \"https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php\"; var data_dir = task_name; // my preference is to include the task and sbj_id in the file name var file_name = task_name + '_' + sbj_id; /* Change 5: Defining save functions using jQuery */ function save_data_json() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.json', // the file type should be added exp_data: jsPsych.data.get().json() } }); } function save_data_csv() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: jsPsych.data.get().csv() } }); } var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } /* Change 1: Using `display_element` */ jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Sending the results file upon completion */ on_finish: function() { save_data_json(); save_data_csv(); } }) </script> </html> Step 6. Add Participand ID to Qualtrics Let's log in to Qualtrics. The basics of embedding jsPsych experiment into Qualtrics is explained in the Embedding Hello World! page. However, if you want to save the experiment data elsewhere, you must have the Participant ID so that you can link Qualtrics data and the experiment file later. In Qualtrics, you can keep or assign the participant ID using Embedded Data elements . The below steps will create the Embedded Data called workerId , which will hold the Participant ID. The value of workerId can be set from the Qualtrics survey URL (for details, see Qualtrics.com: Setting values from the Survey URL and Qualtrics.com: Passing information through query string ). However, if workerId is not set, then Qualtrics will automatically generate a random Participant ID, ranging from PID10000 - PID99999, and use this ID to save data. Setting the name of participant ID variable depends on how you recruit your participants (see the Recruiting Participants section). I set its name to be workerId because I have been using Cloudresearch/TurkPrime with Amazon MTurk, and Cloudresearch uses workerId to automatically add Mturk Worker ID . However, other services suggest different field name -- for example, Prolific suggests PROLIFIC_PID -- so please follow the Qualtrics integration guide from the participant recruiting service you are using. Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId . WARNING: These fields are case sensitive. The I in Id is capitalized. All other letters are lower case. Click Add Below on this Set Embedded Data block Choose Branch Click Add a Condition Click Question --> choose Embedded Data Type in workerId Click Is Equal to --> choose Is Empty Click Add a New Element Here under the Branch block Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId . CLick Set a Value Now Type in PID${rand://int/10000:99999} --> This generates a random Participant ID between PID10000 and PID99999. For details, see Qualtrics.com: Assigning Randomized IDs to Respondents . Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow After these steps, you should see a screen like below. Step 7. Use the save function from Qualtrics The qualtrics-save-php.js file in this GitHub repository contains additional changes from qualtrics.js and experiment-with-display-element-save-php.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. We start from qualtrics.js , which you can see from the Hello World! tutorial . Let's look at these additional change. Change 6: Defining necessary variables and functions for saving the results The below javascript defines necessary variables and functions for saving the results. Importantly, this script will grab the Participant ID from the Embedded Data workerId , using the piped text ${e://Field/workerId} , and put it in the data file name. The above save_data.php expects three fields -- data_dir , file_name , and exp_data -- and will NOT work if any of these is missing. data_dir specifies the server directory to store data. You may want to include task_name in the directory name. file_name specifies the filename of the data being saved. exp_data contains the full json/csv data to be saved. You need to replace save_url with your save_data.php url. // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"${e://Field/workerId}\"; // you must put your save_data php url here. var save_url = \"https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php\"; var data_dir = task_name; // my preference is to include the task and sbj_id in the file name var file_name = task_name + '_' + sbj_id; function save_data_json() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.json', // the file type should be added exp_data: jsPsych.data.get().json() } }); } function save_data_csv() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: jsPsych.data.get().csv() } }); } Change 7: Calling the save function -- CHOOSE ONE! The save function was added inside on_finish , which is called once all trials in the experiment have been run. The participant ID, sbj_id , was added to the data itself, so that you can match the data file even when the file name is changed. NOTE: Here, both save_data_json() and save_data_csv() were called to show how these can be used. Choose one. jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 5: Add the clean up and continue functions.*/ on_finish: function (data) { /* Change 7: Calling the save function -- CHOOSE ONE! */ // include the participant ID in the data // this must be done before saving jsPsych.data.get().addToLast({participant: sbj_id}); save_data_json(); save_data_csv(); // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); Putting it all together So the qualtrics-save-php.js code looks like this. Embed this script in Qualtrics by following these steps and see whether your save function works. Qualtrics.SurveyEngine.addOnload(function () { /*Place your JavaScript here to run when the page loads*/ /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); /* Change 2: Defining and load required resources */ var jslib_url = \"https://kywch.github.io/jsPsych/\"; // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); /* Change 6: Defining necessary variables and functions for saving the results */ // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"${e://Field/workerId}\"; // you must put your save_data php url here. var save_url = \"https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php\"; var data_dir = task_name; // my preference is to include the task and sbj_id in the file name var file_name = task_name + '_' + sbj_id; function save_data_json() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.json', // the file type should be added exp_data: jsPsych.data.get().json() } }); } function save_data_csv() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: jsPsych.data.get().csv() } }); } /* Change 4: Wrapping jsPsych.init() in a function */ function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 5: Adding the clean up and continue functions.*/ on_finish: function (data) { /* Change 7: Calling the save function -- CHOOSE ONE! */ // include the participant ID in the data // this must be done before saving jsPsych.data.get().addToLast({participant: sbj_id}); save_data_json(); save_data_csv(); // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); } }); Qualtrics.SurveyEngine.addOnReady(function () { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function () { /*Place your JavaScript here to run when the page is unloaded*/ }); Step 8. Download the data When your experiment is done, you can easily download the result files with the following steps. First, log in to your account. Then, this command takes you to the exp_data that you made. $ cd ~/public_html/exp_data This command compresses the directory with the result files (in this case hello-world ). You need to replace hello-world with your own experiment/directory. $ zip -r hello-world.zip hello-world You can access the zipped file through your web-browser by going to https://<server-url>/~<your-account>/exp_data/hello-world.zip , like my url -- https://users.rcc.uchicago.edu/~kywch/exp_data/hello-world.zip . After downloading the zipped file, you may want to delete it. $ rm hello-world.zip","title":"Saving Data with PHP"},{"location":"save-php/#saving-jspsych-data-to-a-web-server-using-php","text":"You can save the aggregated data to Qualtrics, but you may also want to look at the trial-level data for further analysis. If you have access to a web server that can run PHP , then you can save each participant's data as a CSV or JSON file on the server.","title":"Saving jsPsych data to a web server using PHP"},{"location":"save-php/#step-0-get-access-to-a-web-server","text":"Your institution usually provides you a free access to a web server, so that you can run your personal web site. If you are not familiar with web servers and PHP, please please ask your IT professional for help. They almost always can HELP you! Also look for resources like below. UNL.edu: Prerequisites for hosting web content on your account/setting up your first PHP page","title":"Step 0. Get access to a web server"},{"location":"save-php/#step-1-go-into-the-public_html-directory","text":"If you have gained the access to a web server, login to the server and go to the public_html directory. If you are not sure, please read this page first: Prerequisites for hosting web content on your account/how to setup your first PHP page . Reading this linux command cheatsheet can also help. $ cd ~/public_html","title":"Step 1. Go into the public_html directory"},{"location":"save-php/#step-2-set-up-the-directories-for-saving-experiment-files","text":"Let's create a directory called exp_data , which will host necessary files and serve as a parent directory for your experiments by running three separate commands one-by-one. This command makes a directory called exp_data : $ mkdir exp_data This command moves you into the exp_data directory: $ cd exp_data This command shows you where you are. So you should see something like /home/<your-account>/public_html/exp_data : $ pwd This command prevents others from seeing inside exp_data by creating an empty index html file: $ touch index.html This command makes sure that index.html hides the directory structure (for details of .htaccess , see http://www.htaccess-guide.com/directoryindex-uses/ ) $ echo \"DirectoryIndex index.html\" >> .htaccess","title":"Step 2. Set up the directories for saving experiment files"},{"location":"save-php/#step-3-create-the-save_dataphp","text":"Let's create the PHP file that will receive and save your data by using vi . If you are not familiar with vi , please read this guide for using the vi editor . This command will open an vi editor and let you edit it: $ vi save_data.php Copy-paste the below PHP code and save, then you are done with this step: <?php // WARNING: the below config can cause a serious security issue. // Please read https://portswigger.net/web-security/cors/access-control-allow-origin // Once you are done testing, you should limit the access //header('Access-Control-Allow-Origin: https://ssd.az1.qualtrics.com'); header('Access-Control-Allow-Origin: *'); // NOTE: the below code expects three fields and will NOT work if any of these is missing. // - data_dir: specify the server directory to store data // - file_name: specify the filename of the data being saved, which can include subject id // - exp_data: contain the full json/csv data to be saved if (isset($_POST['exp_data']) == false) { echo('Hello'); exit; } $exp_data = $_POST['exp_data']; /* prevent XSS: */ $_POST = filter_input_array(INPUT_POST, FILTER_SANITIZE_STRING); if (isset($_POST['data_dir']) == true) { $data_dir = $_POST['data_dir']; // data directory } else { exit; } if (isset($_POST['file_name']) == true) { $file_name = $_POST['file_name']; // mturk_id } else { exit; } // write the file to disk // NOTE: you must make the data directory by all users // For example, by running `chmod 772` to give a write access to EVERYONE file_put_contents($data_dir.'/'.$file_name, $exp_data); exit; ?> Your save_data.php url will look like https://<server-url>/~<your-account>/exp_data/save_data.php , like my url -- https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php . Note that the exp_data/save_data.php part should be the same if you followed the above steps. If your script is running, you will see Hello in your browser.","title":"Step 3. Create the save_data.php"},{"location":"save-php/#step-4-make-an-experiment-directory","text":"The above PHP script requires the experimenter to specify data_dir , in which experiment files are saved. Here, let's create a folder called hello-world under exp_data and save files there. Make sure that you are in the exp_data folder with pwd . This command makes a directory called hello-world : $ mkdir hello-world You also need to adjust this directory's permission so that the PHP script can save files. To learn more about permissions, see this page: http://linuxcommand.org/lc3_lts0090.php . This command allows the PHP script to write files in the hello-world directory, while preventing other people from seeing inside: $ chmod 772 hello-world","title":"Step 4. Make an experiment directory"},{"location":"save-php/#step-5-add-the-save-function-to-the-experiment-html-script","text":"The server side work is done. Now, you need to add scripts to send the result file when an experiment session is done. The experiment-with-display-element-save-php.html file in this GitHub repository contains three additional changes from experiment-with-display-element.html . When you open experiment-with-display-element-save-php.html in a browser, you should see the same \"Hello world!\". In addtion, you will find new json and csv files under hello-world when you put correct url of save_data.php below. We start from experiment-with-display-element.html , which you can see from the Hello World! tutorial . Let's look at these additional change.","title":"Step 5. Add the save function to the experiment HTML script"},{"location":"save-php/#change-4-defining-necessary-variables-for-saving-the-results","text":"The above save_data.php expects three fields -- data_dir , file_name , and exp_data -- and will NOT work if any of these is missing. data_dir specifies the server directory to store data. You may want to include task_name in the directory name. file_name specifies the filename of the result file. You may want to include the subject id. exp_data contains the full json/csv data to be saved. You need to replace save_url with your save_data.php url. // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"test01\"; // you must put your save_data php url here. var save_url = \"https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php\"; var data_dir = task_name; // my preference is to include the task and sbj_id in the file name var file_name = task_name + '_' + sbj_id;","title":"Change 4: Defining necessary variables for saving the results"},{"location":"save-php/#change-5-defining-save-functions-using-jquery","text":"Qualtrics loads jQuery by default, so you can use jQuery for saving files. However, this html script must load jQuery library to use the save function. <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'></script> You can use either the JSON or CSV format, whichever convenient for you. The save functions look like this. function save_data_json() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.json', // the file type should be added exp_data: jsPsych.data.get().json() } }); } function save_data_csv() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: jsPsych.data.get().csv() } }); }","title":"Change 5. Defining save functions using jQuery"},{"location":"save-php/#change-6-sending-the-results-file-upon-completion","text":"The on_finish callback can be declared in the jsPsych.init method. For details, see the original jsPsych v6.3 tutorial . The callback will trigger once all trials in the experiment have been run, so it is a great place to call save functions. NOTE: Here, both save_data_json() and save_data_csv() were called to show how these can be used. Choose one. jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Sending the results file upon completion */ on_finish: function() { save_data_json(); save_data_csv(); } })","title":"Change 6: Sending the results file upon completion"},{"location":"save-php/#putting-it-all-together","text":"So the experiment-with-display-element-save-php.html code looks like this. This html file should save the result files to your server. <!DOCTYPE html> <html> <head> <title>My experiment</title> <!-- Change 5: Defining save functions using jQuery --> <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'></script> <script src=\"jspsych-6.1.0/jspsych.js\"></script> <script src=\"jspsych-6.1.0/plugins/jspsych-html-keyboard-response.js\"></script> <link href=\"jspsych-6.1.0/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> </head> <body> <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/jsPsych/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> </body> <script> /* Change 4: Defining necessary variables for saving the results */ // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"test01\"; // you must put your save_data php url here. var save_url = \"https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php\"; var data_dir = task_name; // my preference is to include the task and sbj_id in the file name var file_name = task_name + '_' + sbj_id; /* Change 5: Defining save functions using jQuery */ function save_data_json() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.json', // the file type should be added exp_data: jsPsych.data.get().json() } }); } function save_data_csv() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: jsPsych.data.get().csv() } }); } var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } /* Change 1: Using `display_element` */ jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 6: Sending the results file upon completion */ on_finish: function() { save_data_json(); save_data_csv(); } }) </script> </html>","title":"Putting it all together"},{"location":"save-php/#step-6-add-participand-id-to-qualtrics","text":"Let's log in to Qualtrics. The basics of embedding jsPsych experiment into Qualtrics is explained in the Embedding Hello World! page. However, if you want to save the experiment data elsewhere, you must have the Participant ID so that you can link Qualtrics data and the experiment file later. In Qualtrics, you can keep or assign the participant ID using Embedded Data elements . The below steps will create the Embedded Data called workerId , which will hold the Participant ID. The value of workerId can be set from the Qualtrics survey URL (for details, see Qualtrics.com: Setting values from the Survey URL and Qualtrics.com: Passing information through query string ). However, if workerId is not set, then Qualtrics will automatically generate a random Participant ID, ranging from PID10000 - PID99999, and use this ID to save data. Setting the name of participant ID variable depends on how you recruit your participants (see the Recruiting Participants section). I set its name to be workerId because I have been using Cloudresearch/TurkPrime with Amazon MTurk, and Cloudresearch uses workerId to automatically add Mturk Worker ID . However, other services suggest different field name -- for example, Prolific suggests PROLIFIC_PID -- so please follow the Qualtrics integration guide from the participant recruiting service you are using. Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId . WARNING: These fields are case sensitive. The I in Id is capitalized. All other letters are lower case. Click Add Below on this Set Embedded Data block Choose Branch Click Add a Condition Click Question --> choose Embedded Data Type in workerId Click Is Equal to --> choose Is Empty Click Add a New Element Here under the Branch block Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId . CLick Set a Value Now Type in PID${rand://int/10000:99999} --> This generates a random Participant ID between PID10000 and PID99999. For details, see Qualtrics.com: Assigning Randomized IDs to Respondents . Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow After these steps, you should see a screen like below.","title":"Step 6. Add Participand ID to Qualtrics"},{"location":"save-php/#step-7-use-the-save-function-from-qualtrics","text":"The qualtrics-save-php.js file in this GitHub repository contains additional changes from qualtrics.js and experiment-with-display-element-save-php.html and can be direclty copy-pasted into the Qualtrics Question JavaScript Editor. We start from qualtrics.js , which you can see from the Hello World! tutorial . Let's look at these additional change.","title":"Step 7. Use the save function from Qualtrics"},{"location":"save-php/#change-6-defining-necessary-variables-and-functions-for-saving-the-results","text":"The below javascript defines necessary variables and functions for saving the results. Importantly, this script will grab the Participant ID from the Embedded Data workerId , using the piped text ${e://Field/workerId} , and put it in the data file name. The above save_data.php expects three fields -- data_dir , file_name , and exp_data -- and will NOT work if any of these is missing. data_dir specifies the server directory to store data. You may want to include task_name in the directory name. file_name specifies the filename of the data being saved. exp_data contains the full json/csv data to be saved. You need to replace save_url with your save_data.php url. // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"${e://Field/workerId}\"; // you must put your save_data php url here. var save_url = \"https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php\"; var data_dir = task_name; // my preference is to include the task and sbj_id in the file name var file_name = task_name + '_' + sbj_id; function save_data_json() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.json', // the file type should be added exp_data: jsPsych.data.get().json() } }); } function save_data_csv() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: jsPsych.data.get().csv() } }); }","title":"Change 6: Defining necessary variables and functions for saving the results"},{"location":"save-php/#change-7-calling-the-save-function-choose-one","text":"The save function was added inside on_finish , which is called once all trials in the experiment have been run. The participant ID, sbj_id , was added to the data itself, so that you can match the data file even when the file name is changed. NOTE: Here, both save_data_json() and save_data_csv() were called to show how these can be used. Choose one. jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 5: Add the clean up and continue functions.*/ on_finish: function (data) { /* Change 7: Calling the save function -- CHOOSE ONE! */ // include the participant ID in the data // this must be done before saving jsPsych.data.get().addToLast({participant: sbj_id}); save_data_json(); save_data_csv(); // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } });","title":"Change 7: Calling the save function -- CHOOSE ONE!"},{"location":"save-php/#putting-it-all-together_1","text":"So the qualtrics-save-php.js code looks like this. Embed this script in Qualtrics by following these steps and see whether your save function works. Qualtrics.SurveyEngine.addOnload(function () { /*Place your JavaScript here to run when the page loads*/ /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); /* Change 2: Defining and load required resources */ var jslib_url = \"https://kywch.github.io/jsPsych/\"; // the below urls must be accessible with your browser // for example, https://kywch.github.io/jsPsych/jspsych.js var requiredResources = [ jslib_url + \"jspsych.js\", jslib_url + \"plugins/jspsych-html-keyboard-response.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); /* Change 6: Defining necessary variables and functions for saving the results */ // experimental session-defining variables var task_name = \"hello-world\"; var sbj_id = \"${e://Field/workerId}\"; // you must put your save_data php url here. var save_url = \"https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php\"; var data_dir = task_name; // my preference is to include the task and sbj_id in the file name var file_name = task_name + '_' + sbj_id; function save_data_json() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.json', // the file type should be added exp_data: jsPsych.data.get().json() } }); } function save_data_csv() { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: jsPsych.data.get().csv() } }); } /* Change 4: Wrapping jsPsych.init() in a function */ function initExp() { var hello_trial = { type: 'html-keyboard-response', stimulus: 'Hello world!' } jsPsych.init({ timeline: [hello_trial], display_element: 'display_stage', /* Change 5: Adding the clean up and continue functions.*/ on_finish: function (data) { /* Change 7: Calling the save function -- CHOOSE ONE! */ // include the participant ID in the data // this must be done before saving jsPsych.data.get().addToLast({participant: sbj_id}); save_data_json(); save_data_csv(); // clear the stage jQuery('display_stage').remove(); jQuery('display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); } }); } }); Qualtrics.SurveyEngine.addOnReady(function () { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function () { /*Place your JavaScript here to run when the page is unloaded*/ });","title":"Putting it all together"},{"location":"save-php/#step-8-download-the-data","text":"When your experiment is done, you can easily download the result files with the following steps. First, log in to your account. Then, this command takes you to the exp_data that you made. $ cd ~/public_html/exp_data This command compresses the directory with the result files (in this case hello-world ). You need to replace hello-world with your own experiment/directory. $ zip -r hello-world.zip hello-world You can access the zipped file through your web-browser by going to https://<server-url>/~<your-account>/exp_data/hello-world.zip , like my url -- https://users.rcc.uchicago.edu/~kywch/exp_data/hello-world.zip . After downloading the zipped file, you may want to delete it. $ rm hello-world.zip","title":"Step 8. Download the data"},{"location":"stop-it/","text":"Embedding the STOP-IT Stop Signal Task into Qualtrics Let's embed the Stop Signal Task by Verbruggen et al., 2019 , the jsPsych_version into Qualtrics. You can first try the task by clicking HERE . I adapted the original scripts to make the task work in Qualtrics and put these into my STOP-IT repository . So, it'd be easier for you to fork my STOP-IT repository and start from there. This version of the Stop Signal Task needs to save the trial-by-trial data for analysis, so I'm saving the data file to a PHP web server, following the Saving Data with PHP . Verbruggen et al. (2019) also provided the analysis script , so please have a look. This tutorial consists of two parts. (1) I will first explain how you can embed the Stop Signal Task in Qualtrics . (2) I will then explain the changes I made to the original experiment code . Embedding the STOP-IT Stop Signal Task into Qualtrics Hosting the STOP-IT scripts in GitHub To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Go to the my STOP-IT repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. When you are done, you can check the online files with your browser by directly going to the jspsych.js , jspsych.css , jspsych-html-keyboard-response.js , and stop-it_main.js . jspsych.js should be available at https://<your-github-username>.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/jspsych.js , like https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/css/jspsych.css , like https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/css/jspsych.css . jspsych-html-keyboard-response.js should be available at https://<your-github-username>.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js , like https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js . stop-it_main.js should be available at https://<your-github-username>.github.io/STOP-IT/jsPsych_version/stop-it_main.js , like https://kywch.github.io/STOP-IT/jsPsych_version/stop-it_main.js . Preparing the Dropbox to save your files To analyze the Stop Signal Task data, you need the trial-by-trial data file, which you can get these by using a web server and PHP . Please read it and prepare a url for save . Once you have the url, find the line var save_url = \"<PUT YOUR SAVE URL HERE>\"; in experiment-transformed-qualtrics.js and replace <PUT YOUR SAVE URL HERE> with the url. For the save function to work properly, it must start with https:// . Embedding the task to Qualtrics Let's log in to Qualtrics and take a look at each step. Step 1. Create a new Qualtrics project and then a new question First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic . Step 2. Open the Question JavaScript editor and copy paste the whole experiment-transformed-qualtrics.js Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole experiment-transformed-qualtrics.js (click to see the code) into the editor. YOU MUST PUT THE SAVE URL that begins with https:// INTO THE CODE. Step 3. Open the Question HTML editor and copy paste the below html code The Change 3 section of the experiment-transformed-third.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of experiment-transformed-third.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below. Step 4. Create Embedded Data elements To store the experiment results with the participant's ID, you need to create the Embedded Data elements named workerId in your survey by following this Qualtrics tutorial . Why do I use the name workerId ? For an answer, please read the Recruiting Participants section. Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow Step 5. Publish and test! Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same STOP-IT Stop Signal Task running in Qualtrics. For example, try this Qualtrics link . DOUBLE CHECK WHETHER THE TRIAL-BY-TRIAL DATA IS SAVED TO YOUR DROPBOX. Explaining the code changes Using the GitHub-hosted images: configuration/experiment_variables.js The original STOP-IT task uses the stimuli images in the images folder placed with the experiment html. But since these images are available online once you enable your GitHub Pages, you can use these images. For example, the images/fix.png is available at https://<your-github-username>.github.io/<your-experiment-name>/jsPsych_version/images/fix.png . For example, https://kywch.github.io/STOP-IT/jsPsych_version/images/fix.png . So, I modifed the fix_stim , go_stim1 , go_stim2 , stop_stim1 , and stop_stim2 variables in the configuration/experiment_variables.js by adding the repo_site variable like below. // define the site that hosts stimuli images // usually https://<your-github-username>.github.io/<your-experiment-name>/ var repo_site = 'https://kywch.github.io/STOP-IT/jsPsych_version/'; // locate the stimuli that will be used in the experiment var fix_stim = repo_site + 'images/fix.png'; var go_stim1 = repo_site + 'images/go_left.png'; var go_stim2 = repo_site + 'images/go_right.png'; var stop_stim1 = repo_site + 'images/stop_left.png'; var stop_stim2 = repo_site + 'images/stop_right.png'; Please compare the original experiment_variables.js (click to see the code) vs. the modified experiment_variables.js (click the see the code) . First transformation: experiment-transformed-first.html and stop-it_main.js I prefer to separate out the experiment-related code from the operation-related code, following the Experiment Factory style. If you haven't, please visit the Experiment Factory library , which contain a ton of experiments with running demos and their code. In the experiment.html (click to see the code) , defining the components that go into the timeline can be considered to be experiment-related, and the remaining parts that also appear in the Hello-World example , such as loading jspsych.js and jsPsych.init() can be considered to be operation-related. So, I separated the experiment-related code and the operation-related code and putting the code into stop-it_main.js (click to see the code) and experiment-transformed-first.html (click to see the code) , respectively. In addition, the original STOP-IT code includes the consent, participant_id, gender pages, etc, but these pages can be better handled by Qualtrics. So, I took these pages out and isolated the stop signal task. Please take a moment to look at the stop-it_main.js (click to see the code) and experiment-transformed-first.html (click to see the code) files and compare these to the original experiment.html (click to see the code) . Double click both experiment.html and experiment-transformed-first.html in your local folder and see if these work well. Second transformation (display_element): experiment-transformed-second.html Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The experiment-transformed-second.html (click to see the code) contains three changes from the experiment-transformed-first.html (click to see the code) . When you open experiment-transformed-second.html in a browser, you should see the same Stop Signal Task. Let's look at each change. Change 1: Using display_element By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . // run the experiment! jsPsych.init({ /* Change 1: Using `display_element` */ display_element: 'display_stage', timeline: timeline, preload_images: [fix_stim, go_stim1, go_stim2, stop_stim1, stop_stim2], Change 2: Adding display_stage CSS and Div The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div> Change 3: Adding extra scripts for Qualtrics The below scripts are not necessary to run this task, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> Third transformation (save to PHP): experiment-transformed-third.html To make experiment-transformed-third.html (click to see the code) work and save the trial-by-trial data file, you should set up your Dropbox App and get your Dropbox access token . To do so, see the above instructions . The experiment-transformed-third.html (click to see the code) contains three additional changes from experiment-transformed-second.html (click to see the code) . Let's look at these additional change. Change 4-5: Defining necessary variables and functions for saving the results You can set task_id and/or data_dir as you like. However, you must provide a correct save_url . // you must put your save_data php url here. // like https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php var save_url = \"<PUT YOUR SAVE URL HERE>\"; function save_data(data_dir, file_name) { var selected_data = filter_data(); console.log(\"Save data function called.\"); try { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: selected_data.csv() } }); } catch (err) { console.log(\"Save data function failed.\", err); } } Also, sbj_id , and thus file_name , must be unique. Otherwise, you will lose the data. That's why the random number is used when sbj_id is empty. // experimental session-defining variables flag_debug = true; task_id = \"STOP-IT\"; sbj_id = \"${e://Field/workerId}\"; if (!sbj_id.trim()) { sbj_id = Math.random().toString(36).slice(-6); try { Qualtrics.SurveyEngine.setEmbeddedData(\"workerId\", sbj_id); } catch (err) { console.log('Warning: ', err); } } // PHP-based data save function // save_data needs data_dir and file_name // my preference is to include the task id/name and sbj_id in the file name var data_dir = task_id; var file_name = task_id + '_' + sbj_id + '.csv'; Change 6: Sending the results file upon completion The on_finish callback can be declared in the jsPsych.init method. For details, see the original jsPsych tutorial . The callback will trigger once all trials in the experiment have been run, so it is a great place to call save functions. /* Change 6: Sending the results file upon completion */ on_finish: function () { save_data(data_dir, file_name); }, Fourth transformation: experiment-transformed-qualtrics.js To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change. Change 1: Hiding the Next button The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton(); Change 2: Defining and load required resources The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. /* Change 2: Defining and load required resources */ var task_github = \"https://kywch.github.io/STOP-IT/jsPsych_version/\"; // https://<your-github-username>.github.io/<your-experiment-name> // requiredResources must include all the JS files that demo-simple-rt-task-transformed.html uses. var requiredResources = [ \"https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js\", task_github + \"js/jspsych-6.0.5/jspsych.js\", task_github + \"js/jspsych-6.0.5/plugins/jspsych-instructions.js\", task_github + \"js/jspsych-6.0.5/plugins/jspsych-fullscreen.js\", task_github + \"js/jspsych-6.0.5/plugins/jspsych-call-function.js\", task_github + \"js/jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\", task_github + \"js/jspsych-detect-held-down-keys.js\", task_github + \"js/custom-stop-signal-plugin.js\", task_github + \"js/sprintf.js\", task_github + \"configuration/experiment_variables.js\", task_github + \"configuration/text_variables.js\", task_github + \"stop-it_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); } Change 3: Appending the display_stage Div using jQuery In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body'); Change 4: Adding save and helper functions /* Change 4: Adding save and helper functions */ function filter_data() { var ignore_columns = ['raw_rt', 'trial_type', 'first_stimulus', 'second_stimulus', 'onset_of_first_stimulus', 'onset_of_second_stimulus', 'key_press', 'correct_response', 'trial_index', 'internal_node_id' ]; var rows = { trial_type: 'custom-stop-signal-plugin' }; // we are only interested in our main stimulus, not fixation, feedback etc. var selected_data = jsPsych.data.get().filter(rows).ignore(ignore_columns); // the next piece of codes orders the columns of the data file var d = selected_data.values() // get the data values // make an array that specifies the order of the object properties var arr = ['block_i', 'trial_i', 'stim', 'signal', 'SSD', 'response', 'rt', 'correct', 'focus', 'Fullscreen', 'time_elapsed', 'window_resolution' ]; new_arr = [] // we will fill this array with the ordered data function myFunction(item) { // this is function is called in the arr.forEach call below new_obj[item] = obj[item] return new_obj } // do it for the whole data array for (i = 0; i < d.length; i++) { obj = d[i]; // get one row of data new_obj = {}; arr.forEach(myFunction) // for each element in the array run my function selected_data.values()[i] = new_obj; // insert the ordered values back in the jsPsych.data object } return selected_data; } // you must put your save_data php url here. // like https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php var save_url = \"<PUT YOUR SAVE URL HERE>\"; function save_data(data_dir, file_name) { var selected_data = filter_data(); console.log(\"Save data function called.\"); try { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: selected_data.csv() } }); } catch (err) { console.log(\"Save data function failed.\", err); } } Change 5: Wrapping jsPsych.init() in a function The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). Please look carefully at the variable sbj_id . It first looks at Qualtrics' embedded data workerId . If it's empty, then the code generates a random sequence and use it as sbj_id so that the saved data file is almost always unique. /* Change 5: Wrapping jsPsych.init() in a function */ function initExp() { // experimental session-defining variables flag_debug = true; task_id = \"STOP-IT\"; sbj_id = \"${e://Field/workerId}\"; if (!sbj_id.trim()) { sbj_id = Math.random().toString(36).slice(-6); try { Qualtrics.SurveyEngine.setEmbeddedData(\"workerId\", sbj_id); } catch (err) { console.log('Warning: ', err); } } // PHP-based data save function // save_data needs data_dir and file_name // my preference is to include the task id/name and sbj_id in the file name var data_dir = task_id; var file_name = task_id + '_' + sbj_id + '.csv'; // push all the procedures, which are defined in stop-it_main.js to the overall timeline var timeline = []; // this array stores the events we want to run in the experiment timeline.push(start_procedure, block_procedure, end_procedure); jsPsych.init({ display_element: 'display_stage', timeline: timeline, preload_images: [fix_stim, go_stim1, go_stim2, stop_stim1, stop_stim2], // ... omitted } }); Change 6: Adding the clean up and continue functions When the jsPsych ends, display_stage and display_stage_background should be removed. Then, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { save_data(data_dir, file_name); /* Change 6: Adding the clean up and continue functions.*/ // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }","title":"Embedding Stop Signal Task (STOP-IT)"},{"location":"stop-it/#embedding-the-stop-it-stop-signal-task-into-qualtrics","text":"Let's embed the Stop Signal Task by Verbruggen et al., 2019 , the jsPsych_version into Qualtrics. You can first try the task by clicking HERE . I adapted the original scripts to make the task work in Qualtrics and put these into my STOP-IT repository . So, it'd be easier for you to fork my STOP-IT repository and start from there. This version of the Stop Signal Task needs to save the trial-by-trial data for analysis, so I'm saving the data file to a PHP web server, following the Saving Data with PHP . Verbruggen et al. (2019) also provided the analysis script , so please have a look. This tutorial consists of two parts. (1) I will first explain how you can embed the Stop Signal Task in Qualtrics . (2) I will then explain the changes I made to the original experiment code .","title":"Embedding the STOP-IT Stop Signal Task into Qualtrics"},{"location":"stop-it/#embedding-the-stop-it-stop-signal-task-into-qualtrics_1","text":"","title":"Embedding the STOP-IT Stop Signal Task into Qualtrics"},{"location":"stop-it/#hosting-the-stop-it-scripts-in-github","text":"To use jsPsych in Qualtrics, the jsPsych javascript and CSS files need to be online and loadable from Qualtrics. Creating a GitHub repository for your experiment helps you do so in simple steps. Go to the my STOP-IT repository . Follow the Hosting jsPsych tutorial to fork it to your GitHub repository and make the scripts available online. When you are done, you can check the online files with your browser by directly going to the jspsych.js , jspsych.css , jspsych-html-keyboard-response.js , and stop-it_main.js . jspsych.js should be available at https://<your-github-username>.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/jspsych.js , like https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/jspsych.js . jspsych.css should be available at https://<your-github-username>.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/css/jspsych.css , like https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/css/jspsych.css . jspsych-html-keyboard-response.js should be available at https://<your-github-username>.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js , like https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js . stop-it_main.js should be available at https://<your-github-username>.github.io/STOP-IT/jsPsych_version/stop-it_main.js , like https://kywch.github.io/STOP-IT/jsPsych_version/stop-it_main.js .","title":"Hosting the STOP-IT scripts in GitHub"},{"location":"stop-it/#preparing-the-dropbox-to-save-your-files","text":"To analyze the Stop Signal Task data, you need the trial-by-trial data file, which you can get these by using a web server and PHP . Please read it and prepare a url for save . Once you have the url, find the line var save_url = \"<PUT YOUR SAVE URL HERE>\"; in experiment-transformed-qualtrics.js and replace <PUT YOUR SAVE URL HERE> with the url. For the save function to work properly, it must start with https:// .","title":"Preparing the Dropbox to save your files"},{"location":"stop-it/#embedding-the-task-to-qualtrics","text":"Let's log in to Qualtrics and take a look at each step.","title":"Embedding the task to Qualtrics"},{"location":"stop-it/#step-1-create-a-new-qualtrics-project-and-then-a-new-question","text":"First, create a new Qualtrics project. Then, create a new question and (1) change its format to Text/Graphic .","title":"Step 1. Create a new Qualtrics project and then a new question"},{"location":"stop-it/#step-2-open-the-question-javascript-editor-and-copy-paste-the-whole-experiment-transformed-qualtricsjs","text":"Keep going in the above picture. (2) Click the gear to open the dropdown menu, and then (3) find and click Add JavaScript . Then copy-paste the whole experiment-transformed-qualtrics.js (click to see the code) into the editor. YOU MUST PUT THE SAVE URL that begins with https:// INTO THE CODE.","title":"Step 2. Open the Question JavaScript editor and copy paste the whole experiment-transformed-qualtrics.js"},{"location":"stop-it/#step-3-open-the-question-html-editor-and-copy-paste-the-below-html-code","text":"The Change 3 section of the experiment-transformed-third.html file contains the link to jsPsych CSS file, the inline styles for display_stage Div, and the error message to be displayed when things go wrong. To open the HTML editor, click the HTML View button. Then, copy paste the portion of experiment-transformed-third.html to the HTML editor, starting from <!-- COPY PASTE TO QUALTRICS FROM HERE --> to <!-- COPY PASTE TO QUALTRICS UP TO HERE --> . <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div> <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> After copy pasting, you should see something like below.","title":"Step 3. Open the Question HTML editor and copy paste the below html code"},{"location":"stop-it/#step-4-create-embedded-data-elements","text":"To store the experiment results with the participant's ID, you need to create the Embedded Data elements named workerId in your survey by following this Qualtrics tutorial . Why do I use the name workerId ? For an answer, please read the Recruiting Participants section. Click Survey Flow from the Survey tab Click Add a New Element Here Choose Embedded Data Click Create New Field or Choose From Dropdown and type workerId Click Move of the new blocks you created ( Set Embedded Data and Then Branch If ) and move these blocks the top of Survey Flow","title":"Step 4. Create Embedded Data elements"},{"location":"stop-it/#step-5-publish-and-test","text":"Publish the survey by following this Qualtrics tutorial . Then, an anonymous Qualtrics link is generated. If you click this link, you should be able to see the same STOP-IT Stop Signal Task running in Qualtrics. For example, try this Qualtrics link . DOUBLE CHECK WHETHER THE TRIAL-BY-TRIAL DATA IS SAVED TO YOUR DROPBOX.","title":"Step 5. Publish and test!"},{"location":"stop-it/#explaining-the-code-changes","text":"","title":"Explaining the code changes"},{"location":"stop-it/#using-the-github-hosted-images-configurationexperiment_variablesjs","text":"The original STOP-IT task uses the stimuli images in the images folder placed with the experiment html. But since these images are available online once you enable your GitHub Pages, you can use these images. For example, the images/fix.png is available at https://<your-github-username>.github.io/<your-experiment-name>/jsPsych_version/images/fix.png . For example, https://kywch.github.io/STOP-IT/jsPsych_version/images/fix.png . So, I modifed the fix_stim , go_stim1 , go_stim2 , stop_stim1 , and stop_stim2 variables in the configuration/experiment_variables.js by adding the repo_site variable like below. // define the site that hosts stimuli images // usually https://<your-github-username>.github.io/<your-experiment-name>/ var repo_site = 'https://kywch.github.io/STOP-IT/jsPsych_version/'; // locate the stimuli that will be used in the experiment var fix_stim = repo_site + 'images/fix.png'; var go_stim1 = repo_site + 'images/go_left.png'; var go_stim2 = repo_site + 'images/go_right.png'; var stop_stim1 = repo_site + 'images/stop_left.png'; var stop_stim2 = repo_site + 'images/stop_right.png'; Please compare the original experiment_variables.js (click to see the code) vs. the modified experiment_variables.js (click the see the code) .","title":"Using the GitHub-hosted images: configuration/experiment_variables.js"},{"location":"stop-it/#first-transformation-experiment-transformed-firsthtml-and-stop-it_mainjs","text":"I prefer to separate out the experiment-related code from the operation-related code, following the Experiment Factory style. If you haven't, please visit the Experiment Factory library , which contain a ton of experiments with running demos and their code. In the experiment.html (click to see the code) , defining the components that go into the timeline can be considered to be experiment-related, and the remaining parts that also appear in the Hello-World example , such as loading jspsych.js and jsPsych.init() can be considered to be operation-related. So, I separated the experiment-related code and the operation-related code and putting the code into stop-it_main.js (click to see the code) and experiment-transformed-first.html (click to see the code) , respectively. In addition, the original STOP-IT code includes the consent, participant_id, gender pages, etc, but these pages can be better handled by Qualtrics. So, I took these pages out and isolated the stop signal task. Please take a moment to look at the stop-it_main.js (click to see the code) and experiment-transformed-first.html (click to see the code) files and compare these to the original experiment.html (click to see the code) . Double click both experiment.html and experiment-transformed-first.html in your local folder and see if these work well.","title":"First transformation: experiment-transformed-first.html and stop-it_main.js"},{"location":"stop-it/#second-transformation-display_element-experiment-transformed-secondhtml","text":"Adding the display_element parameter in the jsPsych.init() and having additional control over the display element is important for embedding jsPsych into Qualtrics. The experiment-transformed-second.html (click to see the code) contains three changes from the experiment-transformed-first.html (click to see the code) . When you open experiment-transformed-second.html in a browser, you should see the same Stop Signal Task. Let's look at each change.","title":"Second transformation (display_element): experiment-transformed-second.html"},{"location":"stop-it/#change-1-using-display_element","text":"By adding the display_element parameter in the jsPsych.init() like below, jsPsych will render the experiment in the <div> called display_stage , which the current script does not have yet. So, let's add the display_stage . // run the experiment! jsPsych.init({ /* Change 1: Using `display_element` */ display_element: 'display_stage', timeline: timeline, preload_images: [fix_stim, go_stim1, go_stim2, stop_stim1, stop_stim2],","title":"Change 1: Using display_element"},{"location":"stop-it/#change-2-adding-display_stage-css-and-div","text":"The display_stage needs below CSS and HTML code after the <body> tag, which also include the display_stage_background . Both are necessary to function well. <!-- Change 2: Adding `display_stage` CSS and Div --> <style> #display_stage_background { width: 100vw; background-color: white; z-index: -1; } #display_stage { position: fixed; left: 1vw; top: 1vh; height: 98vh; width: 98vw; background-color: white; box-shadow: 1px 1px 1px #999; border-radius: 15px; z-index: 0; overflow-y: hidden; overflow-x: hidden; } </style> <!-- COPY PASTE TO QUALTRICS UP TO HERE --> <div id='display_stage_background'></div> <div id='display_stage'></div>","title":"Change 2: Adding display_stage CSS and Div"},{"location":"stop-it/#change-3-adding-extra-scripts-for-qualtrics","text":"The below scripts are not necessary to run this task, but you need to copy-paste these in Qualtrics later. One critical point is that now we use the jsPsych stylesheet hosted in the GitHub Pages (explained above in the Hosting jsPsych section) instead of the CSS file in your computer. This is important because Qualtrics can also access the GitHub-hosted files. <!-- Change 3: Adding extra scripts for Qualtrics --> <!-- COPY PASTE TO QUALTRICS FROM HERE --> <link href=\"https://kywch.github.io/STOP-IT/jsPsych_version/js/jspsych-6.0.5/css/jspsych.css\" rel=\"stylesheet\" type=\"text/css\"> </link> <div> <span style=\"font-size: 24px;\"> <br><br> If you are seeing this message for <span style=\"color: rgb(255, 0, 0);\"><b>more than 5 minutes</b></span>,<br> please screen-capture this screen and send the image to us. <br><br> <span style=\"font-size: 28px;\">We are very sorry for the inconvenience.</span> </span> </div>","title":"Change 3: Adding extra scripts for Qualtrics"},{"location":"stop-it/#third-transformation-save-to-php-experiment-transformed-thirdhtml","text":"To make experiment-transformed-third.html (click to see the code) work and save the trial-by-trial data file, you should set up your Dropbox App and get your Dropbox access token . To do so, see the above instructions . The experiment-transformed-third.html (click to see the code) contains three additional changes from experiment-transformed-second.html (click to see the code) . Let's look at these additional change.","title":"Third transformation (save to PHP): experiment-transformed-third.html"},{"location":"stop-it/#change-4-5-defining-necessary-variables-and-functions-for-saving-the-results","text":"You can set task_id and/or data_dir as you like. However, you must provide a correct save_url . // you must put your save_data php url here. // like https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php var save_url = \"<PUT YOUR SAVE URL HERE>\"; function save_data(data_dir, file_name) { var selected_data = filter_data(); console.log(\"Save data function called.\"); try { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: selected_data.csv() } }); } catch (err) { console.log(\"Save data function failed.\", err); } } Also, sbj_id , and thus file_name , must be unique. Otherwise, you will lose the data. That's why the random number is used when sbj_id is empty. // experimental session-defining variables flag_debug = true; task_id = \"STOP-IT\"; sbj_id = \"${e://Field/workerId}\"; if (!sbj_id.trim()) { sbj_id = Math.random().toString(36).slice(-6); try { Qualtrics.SurveyEngine.setEmbeddedData(\"workerId\", sbj_id); } catch (err) { console.log('Warning: ', err); } } // PHP-based data save function // save_data needs data_dir and file_name // my preference is to include the task id/name and sbj_id in the file name var data_dir = task_id; var file_name = task_id + '_' + sbj_id + '.csv';","title":"Change 4-5: Defining necessary variables and functions for saving the results"},{"location":"stop-it/#change-6-sending-the-results-file-upon-completion","text":"The on_finish callback can be declared in the jsPsych.init method. For details, see the original jsPsych tutorial . The callback will trigger once all trials in the experiment have been run, so it is a great place to call save functions. /* Change 6: Sending the results file upon completion */ on_finish: function () { save_data(data_dir, file_name); },","title":"Change 6: Sending the results file upon completion"},{"location":"stop-it/#fourth-transformation-experiment-transformed-qualtricsjs","text":"To make your jsPsych experiment work in Qualtrics, you need to add your code to the below skeleton provided by Qualtrics Question JavaScript Editor. For details, see the Add JavaScript help page . Qualtrics.SurveyEngine.addOnload(function() { /*Place your JavaScript here to run when the page loads*/ }); Qualtrics.SurveyEngine.addOnReady(function() { /*Place your JavaScript here to run when the page is fully displayed*/ }); Qualtrics.SurveyEngine.addOnUnload(function() { /*Place your JavaScript here to run when the page is unloaded*/ }); Let's look at each change.","title":"Fourth transformation: experiment-transformed-qualtrics.js"},{"location":"stop-it/#change-1-hiding-the-next-button","text":"The below javascript code hides the Next button and puts the javascript code in the driving seat. /* Change 1: Hiding the Next button */ // Retrieve Qualtrics object and save in qthis var qthis = this; // Hide buttons qthis.hideNextButton();","title":"Change 1: Hiding the Next button"},{"location":"stop-it/#change-2-defining-and-load-required-resources","text":"The below javascript defines where the necessary files are so that Qualtrics can load these. If you enabled GitHub Pages of your repository, Qualtrics can load the necessary JS, CSS, and image files right away. /* Change 2: Defining and load required resources */ var task_github = \"https://kywch.github.io/STOP-IT/jsPsych_version/\"; // https://<your-github-username>.github.io/<your-experiment-name> // requiredResources must include all the JS files that demo-simple-rt-task-transformed.html uses. var requiredResources = [ \"https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/4.0.30/Dropbox-sdk.min.js\", task_github + \"js/jspsych-6.0.5/jspsych.js\", task_github + \"js/jspsych-6.0.5/plugins/jspsych-instructions.js\", task_github + \"js/jspsych-6.0.5/plugins/jspsych-fullscreen.js\", task_github + \"js/jspsych-6.0.5/plugins/jspsych-call-function.js\", task_github + \"js/jspsych-6.0.5/plugins/jspsych-html-keyboard-response.js\", task_github + \"js/jspsych-detect-held-down-keys.js\", task_github + \"js/custom-stop-signal-plugin.js\", task_github + \"js/sprintf.js\", task_github + \"configuration/experiment_variables.js\", task_github + \"configuration/text_variables.js\", task_github + \"stop-it_main.js\" ]; function loadScript(idx) { console.log(\"Loading \", requiredResources[idx]); jQuery.getScript(requiredResources[idx], function () { if ((idx + 1) < requiredResources.length) { loadScript(idx + 1); } else { initExp(); } }); } if (window.Qualtrics && (!window.frameElement || window.frameElement.id !== \"mobile-preview-view\")) { loadScript(0); }","title":"Change 2: Defining and load required resources"},{"location":"stop-it/#change-3-appending-the-display_stage-div-using-jquery","text":"In Qualtrics, jQuery (loaded by default) is used to append the display_stage_background and display_stage Divs. The CSS for these elements will be added directly to Question HTML later in this tutorial. /* Change 3: Appending the display_stage Div using jQuery */ // jQuery is loaded in Qualtrics by default jQuery(\"<div id = 'display_stage_background'></div>\").appendTo('body'); jQuery(\"<div id = 'display_stage'></div>\").appendTo('body');","title":"Change 3: Appending the display_stage Div using jQuery"},{"location":"stop-it/#change-4-adding-save-and-helper-functions","text":"/* Change 4: Adding save and helper functions */ function filter_data() { var ignore_columns = ['raw_rt', 'trial_type', 'first_stimulus', 'second_stimulus', 'onset_of_first_stimulus', 'onset_of_second_stimulus', 'key_press', 'correct_response', 'trial_index', 'internal_node_id' ]; var rows = { trial_type: 'custom-stop-signal-plugin' }; // we are only interested in our main stimulus, not fixation, feedback etc. var selected_data = jsPsych.data.get().filter(rows).ignore(ignore_columns); // the next piece of codes orders the columns of the data file var d = selected_data.values() // get the data values // make an array that specifies the order of the object properties var arr = ['block_i', 'trial_i', 'stim', 'signal', 'SSD', 'response', 'rt', 'correct', 'focus', 'Fullscreen', 'time_elapsed', 'window_resolution' ]; new_arr = [] // we will fill this array with the ordered data function myFunction(item) { // this is function is called in the arr.forEach call below new_obj[item] = obj[item] return new_obj } // do it for the whole data array for (i = 0; i < d.length; i++) { obj = d[i]; // get one row of data new_obj = {}; arr.forEach(myFunction) // for each element in the array run my function selected_data.values()[i] = new_obj; // insert the ordered values back in the jsPsych.data object } return selected_data; } // you must put your save_data php url here. // like https://users.rcc.uchicago.edu/~kywch/exp_data/save_data.php var save_url = \"<PUT YOUR SAVE URL HERE>\"; function save_data(data_dir, file_name) { var selected_data = filter_data(); console.log(\"Save data function called.\"); try { jQuery.ajax({ type: 'post', cache: false, url: save_url, data: { data_dir: data_dir, file_name: file_name + '.csv', // the file type should be added exp_data: selected_data.csv() } }); } catch (err) { console.log(\"Save data function failed.\", err); } }","title":"Change 4: Adding save and helper functions"},{"location":"stop-it/#change-5-wrapping-jspsychinit-in-a-function","text":"The main experiment codes are wrapped in the initExp function to make sure it runs after all the necessary library and plugin files are loaded (as defined in the loadScript function above). Please look carefully at the variable sbj_id . It first looks at Qualtrics' embedded data workerId . If it's empty, then the code generates a random sequence and use it as sbj_id so that the saved data file is almost always unique. /* Change 5: Wrapping jsPsych.init() in a function */ function initExp() { // experimental session-defining variables flag_debug = true; task_id = \"STOP-IT\"; sbj_id = \"${e://Field/workerId}\"; if (!sbj_id.trim()) { sbj_id = Math.random().toString(36).slice(-6); try { Qualtrics.SurveyEngine.setEmbeddedData(\"workerId\", sbj_id); } catch (err) { console.log('Warning: ', err); } } // PHP-based data save function // save_data needs data_dir and file_name // my preference is to include the task id/name and sbj_id in the file name var data_dir = task_id; var file_name = task_id + '_' + sbj_id + '.csv'; // push all the procedures, which are defined in stop-it_main.js to the overall timeline var timeline = []; // this array stores the events we want to run in the experiment timeline.push(start_procedure, block_procedure, end_procedure); jsPsych.init({ display_element: 'display_stage', timeline: timeline, preload_images: [fix_stim, go_stim1, go_stim2, stop_stim1, stop_stim2], // ... omitted } });","title":"Change 5: Wrapping jsPsych.init() in a function"},{"location":"stop-it/#change-6-adding-the-clean-up-and-continue-functions","text":"When the jsPsych ends, display_stage and display_stage_background should be removed. Then, the script executes the clickNextButton to simulate clicking the Next button and proceed to the next question. on_finish: function () { save_data(data_dir, file_name); /* Change 6: Adding the clean up and continue functions.*/ // clear the stage jQuery('#display_stage').remove(); jQuery('#display_stage_background').remove(); // simulate click on Qualtrics \"next\" button, making use of the Qualtrics JS API qthis.clickNextButton(); }","title":"Change 6: Adding the clean up and continue functions"}]}